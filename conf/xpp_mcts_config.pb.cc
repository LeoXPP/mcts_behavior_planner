// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xpp_mcts_config.proto

#include "xpp_mcts_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR XICABehaviorDeciderConfig::XICABehaviorDeciderConfig(
    ::_pbi::ConstantInitialized)
  : coarse_time_step_()
  , fine_time_step_()
  , jerk_action_()
  , lk_dkappa_action_()
  , right_dkappa_action_()
  , left_dkappa_action_()
  , timevariantbicycleaccdynamicsconfig_(0)
  , is_debug_info_open_(false)
  , use_neighbor_back_obs_(false)
  , use_virtual_obs_(false)
  , always_use_neighbor_obs_(false)
  , is_tree_pre_constructed_(false)
  , xica_need_preconstruct_(true)
  , xica_need_ego_idm_(true)
  , mcts_max_search_time_(10)
  , mcts_max_search_iter_(5000)
  , mcts_node_pool_size_(10000)
  , veh_max_acc_(10)
  , veh_min_acc_(-2)
  , veh_ego_length_(5)
  , veh_ego_width_(2)
  , gamma_(0.8)
  , c_(1.41)
  , vru_max_vel_(6)
  , left_turn_range_(15)
  , heading_range_(0.17)
  , lk_lat_range_(8)
  , lat_expand_factor_(1.4)
  , long_expand_factor_(1.6)
  , invalid_penalty_(-0.5)
  , vel_limit_factor_(1.1)
  , max_delta_l_(2.5)
  , min_decision_distance_(15)
  , min_valid_node_num_(300)
  , is_opposite_collision_func_open_(true)
  , is_opposite_left_turn_func_open_(true)
  , use_x_ica_behavior_decider_(true)
  , use_ref_pre_construct_(true)
  , w_acc_(0.2)
  , w_eff_(0.2)
  , w_ref_(0.6)
  , w_safe_(0.5)
  , w_pred_(0.6)
  , w_cons_act_(0.6)
  , w_cons_his_(0.4)
  , lookhead_distance_(60)
  , nudge_obstacles_num_(5)
  , curr_lane_obstacles_num_(3)
  , left_obstacles_num_(3)
  , right_obstacles_num_(3)
  , ego_agent_reward_adjust_(1)
  , xica_w_eff_(0.3)
  , xica_w_acc_(0.1)
  , xica_w_safe_(1)
  , xica_w_occ_(0.5)
  , max_acc__(1.3)
  , comfort_acc__(0.5)
  , acc_exp__(2)
  , idm_min_dist__(2.5)
  , idm_desired_time__(0.9)
  , idmepsilon_(1e-05)
  , occ_bound_max_(-1)
  , xica_w_cons_his_(0.5)
  , min_decision_delta_t_(0.5)
  , xica_diff_dis_max_(5)
  , xica_diff_v_max_(3)
  , xica_diff_a_max_(2)
  , rel_lat_thresh_(1)
  , xica_w_refline_(1){}
struct XICABehaviorDeciderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XICABehaviorDeciderConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XICABehaviorDeciderConfigDefaultTypeInternal() {}
  union {
    XICABehaviorDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XICABehaviorDeciderConfigDefaultTypeInternal _XICABehaviorDeciderConfig_default_instance_;
static ::_pb::Metadata file_level_metadata_xpp_5fmcts_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_xpp_5fmcts_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_xpp_5fmcts_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_xpp_5fmcts_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, mcts_max_search_iter_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, mcts_max_search_time_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, mcts_node_pool_size_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, timevariantbicycleaccdynamicsconfig_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, veh_max_acc_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, veh_min_acc_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, veh_ego_length_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, veh_ego_width_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, gamma_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, c_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, min_valid_node_num_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, vru_max_vel_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, left_turn_range_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, heading_range_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, lk_lat_range_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, lat_expand_factor_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, long_expand_factor_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, invalid_penalty_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, vel_limit_factor_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, max_delta_l_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, min_decision_distance_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, coarse_time_step_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, fine_time_step_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, jerk_action_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, lk_dkappa_action_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, right_dkappa_action_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, left_dkappa_action_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, is_opposite_collision_func_open_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, is_opposite_left_turn_func_open_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, is_debug_info_open_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, w_acc_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, w_eff_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, w_ref_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, w_safe_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, w_pred_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, w_cons_act_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, w_cons_his_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, use_x_ica_behavior_decider_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, use_neighbor_back_obs_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, lookhead_distance_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, use_virtual_obs_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, nudge_obstacles_num_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, curr_lane_obstacles_num_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, always_use_neighbor_obs_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, left_obstacles_num_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, right_obstacles_num_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, is_tree_pre_constructed_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, ego_agent_reward_adjust_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_w_eff_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_w_acc_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_w_safe_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_w_occ_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, max_acc__),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, comfort_acc__),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, acc_exp__),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, idm_min_dist__),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, idm_desired_time__),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, idmepsilon_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, use_ref_pre_construct_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_need_preconstruct_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_need_ego_idm_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, occ_bound_max_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_w_cons_his_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, min_decision_delta_t_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_diff_dis_max_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_diff_v_max_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_diff_a_max_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, rel_lat_thresh_),
  PROTOBUF_FIELD_OFFSET(::XICABehaviorDeciderConfig, xica_w_refline_),
  9,
  8,
  10,
  0,
  11,
  12,
  13,
  14,
  15,
  16,
  27,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  28,
  29,
  1,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  30,
  2,
  39,
  3,
  40,
  41,
  4,
  42,
  43,
  5,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  31,
  6,
  7,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 75, -1, sizeof(::XICABehaviorDeciderConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_XICABehaviorDeciderConfig_default_instance_._instance,
};

const char descriptor_table_protodef_xpp_5fmcts_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025xpp_mcts_config.proto\"\267\020\n\031XICABehavior"
  "DeciderConfig\022\"\n\024mcts_max_search_iter\030\001 "
  "\001(\005:\0045000\022 \n\024mcts_max_search_time\030\002 \001(\001:"
  "\00210\022\"\n\023mcts_node_pool_size\030\003 \001(\005:\00510000\022"
  ".\n#TimeVariantBicycleAccDynamicsConfig\030\004"
  " \001(\005:\0010\022\027\n\013veh_max_acc\030\005 \001(\001:\00210\022\027\n\013veh_"
  "min_acc\030\006 \001(\001:\002-2\022\031\n\016veh_ego_length\030\007 \001("
  "\001:\0015\022\030\n\rveh_ego_width\030\010 \001(\001:\0012\022\022\n\005gamma\030"
  "\t \001(\001:\0030.8\022\017\n\001c\030\n \001(\001:\0041.41\022\037\n\022min_valid"
  "_node_num\030\013 \001(\005:\003300\022\026\n\013vru_max_vel\030\014 \001("
  "\001:\0016\022\033\n\017left_turn_range\030\r \001(\001:\00215\022\033\n\rhea"
  "ding_range\030\016 \001(\001:\0040.17\022\027\n\014lk_lat_range\030\017"
  " \001(\001:\0018\022\036\n\021lat_expand_factor\030\020 \001(\001:\0031.4\022"
  "\037\n\022long_expand_factor\030\021 \001(\001:\0031.6\022\035\n\017inva"
  "lid_penalty\030\022 \001(\001:\004-0.5\022\035\n\020vel_limit_fac"
  "tor\030\023 \001(\001:\0031.1\022\030\n\013max_delta_l\030\024 \001(\001:\0032.5"
  "\022!\n\025min_decision_distance\030\025 \001(\001:\00215\022\030\n\020c"
  "oarse_time_step\030\036 \003(\001\022\026\n\016fine_time_step\030"
  "\037 \003(\001\022\023\n\013jerk_action\030  \003(\001\022\030\n\020lk_dkappa_"
  "action\030! \003(\001\022\033\n\023right_dkappa_action\030\" \003("
  "\001\022\032\n\022left_dkappa_action\030# \003(\001\022-\n\037is_oppo"
  "site_collision_func_open\030( \001(\010:\004true\022-\n\037"
  "is_opposite_left_turn_func_open\030) \001(\010:\004t"
  "rue\022!\n\022is_debug_info_open\030* \001(\010:\005false\022\022"
  "\n\005w_acc\030d \001(\001:\0030.2\022\022\n\005w_eff\030e \001(\001:\0030.2\022\022"
  "\n\005w_ref\030f \001(\001:\0030.6\022\023\n\006w_safe\030g \001(\001:\0030.5\022"
  "\023\n\006w_pred\030h \001(\001:\0030.6\022\027\n\nw_cons_act\030i \001(\001"
  ":\0030.6\022\027\n\nw_cons_his\030j \001(\001:\0030.4\022)\n\032use_x_"
  "ica_behavior_decider\030\226\001 \001(\010:\004true\022%\n\025use"
  "_neighbor_back_obs\030\227\001 \001(\010:\005false\022\036\n\021look"
  "head_distance\030\230\001 \001(\001:\00260\022\037\n\017use_virtual_"
  "obs\030\231\001 \001(\010:\005false\022\037\n\023nudge_obstacles_num"
  "\030\232\001 \001(\005:\0015\022#\n\027curr_lane_obstacles_num\030\233\001"
  " \001(\005:\0013\022\'\n\027always_use_neighbor_obs\030\234\001 \001("
  "\010:\005false\022\036\n\022left_obstacles_num\030\235\001 \001(\005:\0013"
  "\022\037\n\023right_obstacles_num\030\236\001 \001(\005:\0013\022\'\n\027is_"
  "tree_pre_constructed\030\237\001 \001(\010:\005false\022#\n\027eg"
  "o_agent_reward_adjust\030\240\001 \001(\001:\0011\022\030\n\nxica_"
  "w_eff\030\241\001 \001(\001:\0030.3\022\030\n\nxica_w_acc\030\242\001 \001(\001:\003"
  "0.1\022\027\n\013xica_w_safe\030\243\001 \001(\001:\0011\022\030\n\nxica_w_o"
  "cc\030\244\001 \001(\001:\0030.5\022\026\n\010max_acc_\030\245\001 \001(\001:\0031.3\022\032"
  "\n\014comfort_acc_\030\246\001 \001(\001:\0030.5\022\024\n\010acc_exp_\030\247"
  "\001 \001(\001:\0012\022\033\n\ridm_min_dist_\030\250\001 \001(\001:\0032.5\022\037\n"
  "\021idm_desired_time_\030\251\001 \001(\001:\0030.9\022\032\n\nidmeps"
  "ilon\030\252\001 \001(\001:\0051e-05\022$\n\025use_ref_pre_constr"
  "uct\030\253\001 \001(\010:\004true\022%\n\026xica_need_preconstru"
  "ct\030\254\001 \001(\010:\004true\022 \n\021xica_need_ego_idm\030\255\001 "
  "\001(\010:\004true\022\032\n\rocc_bound_max\030\256\001 \001(\001:\002-1\022\035\n"
  "\017xica_w_cons_his\030\257\001 \001(\001:\0030.5\022\"\n\024min_deci"
  "sion_delta_t\030\260\001 \001(\001:\0030.5\022\035\n\021xica_diff_di"
  "s_max\030\261\001 \001(\001:\0015\022\033\n\017xica_diff_v_max\030\262\001 \001("
  "\001:\0013\022\033\n\017xica_diff_a_max\030\263\001 \001(\001:\0012\022\032\n\016rel"
  "_lat_thresh\030\264\001 \001(\001:\0011\022\032\n\016xica_w_refline\030"
  "\265\001 \001(\001:\0011"
  ;
static ::_pbi::once_flag descriptor_table_xpp_5fmcts_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_xpp_5fmcts_5fconfig_2eproto = {
    false, false, 2129, descriptor_table_protodef_xpp_5fmcts_5fconfig_2eproto,
    "xpp_mcts_config.proto",
    &descriptor_table_xpp_5fmcts_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_xpp_5fmcts_5fconfig_2eproto::offsets,
    file_level_metadata_xpp_5fmcts_5fconfig_2eproto, file_level_enum_descriptors_xpp_5fmcts_5fconfig_2eproto,
    file_level_service_descriptors_xpp_5fmcts_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_xpp_5fmcts_5fconfig_2eproto_getter() {
  return &descriptor_table_xpp_5fmcts_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_xpp_5fmcts_5fconfig_2eproto(&descriptor_table_xpp_5fmcts_5fconfig_2eproto);

// ===================================================================

class XICABehaviorDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<XICABehaviorDeciderConfig>()._has_bits_);
  static void set_has_mcts_max_search_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mcts_max_search_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mcts_node_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_timevariantbicycleaccdynamicsconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_veh_max_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_veh_min_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_veh_ego_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_veh_ego_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_min_valid_node_num(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_vru_max_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_left_turn_range(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_heading_range(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lk_lat_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_lat_expand_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_long_expand_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_invalid_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_vel_limit_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_max_delta_l(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_min_decision_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_is_opposite_collision_func_open(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_is_opposite_left_turn_func_open(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_is_debug_info_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_w_acc(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_w_eff(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_w_ref(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_w_safe(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_w_pred(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_w_cons_act(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_w_cons_his(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_use_x_ica_behavior_decider(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_use_neighbor_back_obs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lookhead_distance(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_use_virtual_obs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nudge_obstacles_num(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_curr_lane_obstacles_num(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_always_use_neighbor_obs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_left_obstacles_num(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_right_obstacles_num(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_is_tree_pre_constructed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ego_agent_reward_adjust(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_xica_w_eff(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_xica_w_acc(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_xica_w_safe(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_xica_w_occ(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_max_acc_(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_comfort_acc_(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_acc_exp_(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_idm_min_dist_(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_idm_desired_time_(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_idmepsilon(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_use_ref_pre_construct(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_xica_need_preconstruct(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_xica_need_ego_idm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_occ_bound_max(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_xica_w_cons_his(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_min_decision_delta_t(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_xica_diff_dis_max(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_xica_diff_v_max(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_xica_diff_a_max(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_rel_lat_thresh(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_xica_w_refline(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
};

XICABehaviorDeciderConfig::XICABehaviorDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  coarse_time_step_(arena),
  fine_time_step_(arena),
  jerk_action_(arena),
  lk_dkappa_action_(arena),
  right_dkappa_action_(arena),
  left_dkappa_action_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:XICABehaviorDeciderConfig)
}
XICABehaviorDeciderConfig::XICABehaviorDeciderConfig(const XICABehaviorDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      coarse_time_step_(from.coarse_time_step_),
      fine_time_step_(from.fine_time_step_),
      jerk_action_(from.jerk_action_),
      lk_dkappa_action_(from.lk_dkappa_action_),
      right_dkappa_action_(from.right_dkappa_action_),
      left_dkappa_action_(from.left_dkappa_action_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timevariantbicycleaccdynamicsconfig_, &from.timevariantbicycleaccdynamicsconfig_,
    static_cast<size_t>(reinterpret_cast<char*>(&xica_w_refline_) -
    reinterpret_cast<char*>(&timevariantbicycleaccdynamicsconfig_)) + sizeof(xica_w_refline_));
  // @@protoc_insertion_point(copy_constructor:XICABehaviorDeciderConfig)
}

inline void XICABehaviorDeciderConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timevariantbicycleaccdynamicsconfig_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_tree_pre_constructed_) -
    reinterpret_cast<char*>(&timevariantbicycleaccdynamicsconfig_)) + sizeof(is_tree_pre_constructed_));
xica_need_preconstruct_ = true;
xica_need_ego_idm_ = true;
mcts_max_search_time_ = 10;
mcts_max_search_iter_ = 5000;
mcts_node_pool_size_ = 10000;
veh_max_acc_ = 10;
veh_min_acc_ = -2;
veh_ego_length_ = 5;
veh_ego_width_ = 2;
gamma_ = 0.8;
c_ = 1.41;
vru_max_vel_ = 6;
left_turn_range_ = 15;
heading_range_ = 0.17;
lk_lat_range_ = 8;
lat_expand_factor_ = 1.4;
long_expand_factor_ = 1.6;
invalid_penalty_ = -0.5;
vel_limit_factor_ = 1.1;
max_delta_l_ = 2.5;
min_decision_distance_ = 15;
min_valid_node_num_ = 300;
is_opposite_collision_func_open_ = true;
is_opposite_left_turn_func_open_ = true;
use_x_ica_behavior_decider_ = true;
use_ref_pre_construct_ = true;
w_acc_ = 0.2;
w_eff_ = 0.2;
w_ref_ = 0.6;
w_safe_ = 0.5;
w_pred_ = 0.6;
w_cons_act_ = 0.6;
w_cons_his_ = 0.4;
lookhead_distance_ = 60;
nudge_obstacles_num_ = 5;
curr_lane_obstacles_num_ = 3;
left_obstacles_num_ = 3;
right_obstacles_num_ = 3;
ego_agent_reward_adjust_ = 1;
xica_w_eff_ = 0.3;
xica_w_acc_ = 0.1;
xica_w_safe_ = 1;
xica_w_occ_ = 0.5;
max_acc__ = 1.3;
comfort_acc__ = 0.5;
acc_exp__ = 2;
idm_min_dist__ = 2.5;
idm_desired_time__ = 0.9;
idmepsilon_ = 1e-05;
occ_bound_max_ = -1;
xica_w_cons_his_ = 0.5;
min_decision_delta_t_ = 0.5;
xica_diff_dis_max_ = 5;
xica_diff_v_max_ = 3;
xica_diff_a_max_ = 2;
rel_lat_thresh_ = 1;
xica_w_refline_ = 1;
}

XICABehaviorDeciderConfig::~XICABehaviorDeciderConfig() {
  // @@protoc_insertion_point(destructor:XICABehaviorDeciderConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XICABehaviorDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XICABehaviorDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XICABehaviorDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:XICABehaviorDeciderConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coarse_time_step_.Clear();
  fine_time_step_.Clear();
  jerk_action_.Clear();
  lk_dkappa_action_.Clear();
  right_dkappa_action_.Clear();
  left_dkappa_action_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&timevariantbicycleaccdynamicsconfig_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_tree_pre_constructed_) -
        reinterpret_cast<char*>(&timevariantbicycleaccdynamicsconfig_)) + sizeof(is_tree_pre_constructed_));
    xica_need_preconstruct_ = true;
    xica_need_ego_idm_ = true;
  }
  if (cached_has_bits & 0x0000ff00u) {
    mcts_max_search_time_ = 10;
    mcts_max_search_iter_ = 5000;
    mcts_node_pool_size_ = 10000;
    veh_max_acc_ = 10;
    veh_min_acc_ = -2;
    veh_ego_length_ = 5;
    veh_ego_width_ = 2;
    gamma_ = 0.8;
  }
  if (cached_has_bits & 0x00ff0000u) {
    c_ = 1.41;
    vru_max_vel_ = 6;
    left_turn_range_ = 15;
    heading_range_ = 0.17;
    lk_lat_range_ = 8;
    lat_expand_factor_ = 1.4;
    long_expand_factor_ = 1.6;
    invalid_penalty_ = -0.5;
  }
  if (cached_has_bits & 0xff000000u) {
    vel_limit_factor_ = 1.1;
    max_delta_l_ = 2.5;
    min_decision_distance_ = 15;
    min_valid_node_num_ = 300;
    is_opposite_collision_func_open_ = true;
    is_opposite_left_turn_func_open_ = true;
    use_x_ica_behavior_decider_ = true;
    use_ref_pre_construct_ = true;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    w_acc_ = 0.2;
    w_eff_ = 0.2;
    w_ref_ = 0.6;
    w_safe_ = 0.5;
    w_pred_ = 0.6;
    w_cons_act_ = 0.6;
    w_cons_his_ = 0.4;
    lookhead_distance_ = 60;
  }
  if (cached_has_bits & 0x0000ff00u) {
    nudge_obstacles_num_ = 5;
    curr_lane_obstacles_num_ = 3;
    left_obstacles_num_ = 3;
    right_obstacles_num_ = 3;
    ego_agent_reward_adjust_ = 1;
    xica_w_eff_ = 0.3;
    xica_w_acc_ = 0.1;
    xica_w_safe_ = 1;
  }
  if (cached_has_bits & 0x00ff0000u) {
    xica_w_occ_ = 0.5;
    max_acc__ = 1.3;
    comfort_acc__ = 0.5;
    acc_exp__ = 2;
    idm_min_dist__ = 2.5;
    idm_desired_time__ = 0.9;
    idmepsilon_ = 1e-05;
    occ_bound_max_ = -1;
  }
  if (cached_has_bits & 0x7f000000u) {
    xica_w_cons_his_ = 0.5;
    min_decision_delta_t_ = 0.5;
    xica_diff_dis_max_ = 5;
    xica_diff_v_max_ = 3;
    xica_diff_a_max_ = 2;
    rel_lat_thresh_ = 1;
    xica_w_refline_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XICABehaviorDeciderConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mcts_max_search_iter = 1 [default = 5000];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mcts_max_search_iter(&_has_bits_);
          mcts_max_search_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double mcts_max_search_time = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_mcts_max_search_time(&_has_bits_);
          mcts_max_search_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mcts_node_pool_size = 3 [default = 10000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mcts_node_pool_size(&_has_bits_);
          mcts_node_pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 TimeVariantBicycleAccDynamicsConfig = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timevariantbicycleaccdynamicsconfig(&_has_bits_);
          timevariantbicycleaccdynamicsconfig_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double veh_max_acc = 5 [default = 10];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_veh_max_acc(&_has_bits_);
          veh_max_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double veh_min_acc = 6 [default = -2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_veh_min_acc(&_has_bits_);
          veh_min_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double veh_ego_length = 7 [default = 5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_veh_ego_length(&_has_bits_);
          veh_ego_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double veh_ego_width = 8 [default = 2];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_veh_ego_width(&_has_bits_);
          veh_ego_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double gamma = 9 [default = 0.8];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_gamma(&_has_bits_);
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double c = 10 [default = 1.41];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_c(&_has_bits_);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 min_valid_node_num = 11 [default = 300];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_min_valid_node_num(&_has_bits_);
          min_valid_node_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double vru_max_vel = 12 [default = 6];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_vru_max_vel(&_has_bits_);
          vru_max_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double left_turn_range = 13 [default = 15];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_left_turn_range(&_has_bits_);
          left_turn_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_range = 14 [default = 0.17];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_heading_range(&_has_bits_);
          heading_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lk_lat_range = 15 [default = 8];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_lk_lat_range(&_has_bits_);
          lk_lat_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lat_expand_factor = 16 [default = 1.4];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_lat_expand_factor(&_has_bits_);
          lat_expand_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double long_expand_factor = 17 [default = 1.6];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_long_expand_factor(&_has_bits_);
          long_expand_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double invalid_penalty = 18 [default = -0.5];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_invalid_penalty(&_has_bits_);
          invalid_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vel_limit_factor = 19 [default = 1.1];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_vel_limit_factor(&_has_bits_);
          vel_limit_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_delta_l = 20 [default = 2.5];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_max_delta_l(&_has_bits_);
          max_delta_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_decision_distance = 21 [default = 15];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_min_decision_distance(&_has_bits_);
          min_decision_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double coarse_time_step = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_coarse_time_step(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<241>(ptr));
        } else if (static_cast<uint8_t>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coarse_time_step(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double fine_time_step = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_fine_time_step(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<249>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_fine_time_step(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double jerk_action = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_jerk_action(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<257>(ptr));
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_jerk_action(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double lk_dkappa_action = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_lk_dkappa_action(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<265>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_lk_dkappa_action(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double right_dkappa_action = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_right_dkappa_action(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<273>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_right_dkappa_action(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double left_dkappa_action = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_left_dkappa_action(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<281>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_left_dkappa_action(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_opposite_collision_func_open = 40 [default = true];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_opposite_collision_func_open(&_has_bits_);
          is_opposite_collision_func_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_opposite_left_turn_func_open = 41 [default = true];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_opposite_left_turn_func_open(&_has_bits_);
          is_opposite_left_turn_func_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_debug_info_open = 42 [default = false];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_debug_info_open(&_has_bits_);
          is_debug_info_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double w_acc = 100 [default = 0.2];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_w_acc(&_has_bits_);
          w_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double w_eff = 101 [default = 0.2];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_w_eff(&_has_bits_);
          w_eff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double w_ref = 102 [default = 0.6];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_w_ref(&_has_bits_);
          w_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double w_safe = 103 [default = 0.5];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_w_safe(&_has_bits_);
          w_safe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double w_pred = 104 [default = 0.6];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_w_pred(&_has_bits_);
          w_pred_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double w_cons_act = 105 [default = 0.6];
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_w_cons_act(&_has_bits_);
          w_cons_act_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double w_cons_his = 106 [default = 0.4];
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_w_cons_his(&_has_bits_);
          w_cons_his_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_x_ica_behavior_decider = 150 [default = true];
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_use_x_ica_behavior_decider(&_has_bits_);
          use_x_ica_behavior_decider_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_neighbor_back_obs = 151 [default = false];
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_use_neighbor_back_obs(&_has_bits_);
          use_neighbor_back_obs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lookhead_distance = 152 [default = 60];
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_lookhead_distance(&_has_bits_);
          lookhead_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_virtual_obs = 153 [default = false];
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_use_virtual_obs(&_has_bits_);
          use_virtual_obs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nudge_obstacles_num = 154 [default = 5];
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_nudge_obstacles_num(&_has_bits_);
          nudge_obstacles_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 curr_lane_obstacles_num = 155 [default = 3];
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_curr_lane_obstacles_num(&_has_bits_);
          curr_lane_obstacles_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool always_use_neighbor_obs = 156 [default = false];
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_always_use_neighbor_obs(&_has_bits_);
          always_use_neighbor_obs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 left_obstacles_num = 157 [default = 3];
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_left_obstacles_num(&_has_bits_);
          left_obstacles_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 right_obstacles_num = 158 [default = 3];
      case 158:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_right_obstacles_num(&_has_bits_);
          right_obstacles_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_tree_pre_constructed = 159 [default = false];
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_is_tree_pre_constructed(&_has_bits_);
          is_tree_pre_constructed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ego_agent_reward_adjust = 160 [default = 1];
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _Internal::set_has_ego_agent_reward_adjust(&_has_bits_);
          ego_agent_reward_adjust_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double xica_w_eff = 161 [default = 0.3];
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_xica_w_eff(&_has_bits_);
          xica_w_eff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double xica_w_acc = 162 [default = 0.1];
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_xica_w_acc(&_has_bits_);
          xica_w_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double xica_w_safe = 163 [default = 1];
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_xica_w_safe(&_has_bits_);
          xica_w_safe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double xica_w_occ = 164 [default = 0.5];
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_xica_w_occ(&_has_bits_);
          xica_w_occ_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acc_ = 165 [default = 1.3];
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_max_acc_(&_has_bits_);
          max_acc__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double comfort_acc_ = 166 [default = 0.5];
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_comfort_acc_(&_has_bits_);
          comfort_acc__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acc_exp_ = 167 [default = 2];
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_acc_exp_(&_has_bits_);
          acc_exp__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double idm_min_dist_ = 168 [default = 2.5];
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_idm_min_dist_(&_has_bits_);
          idm_min_dist__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double idm_desired_time_ = 169 [default = 0.9];
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_idm_desired_time_(&_has_bits_);
          idm_desired_time__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double idmepsilon = 170 [default = 1e-05];
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_idmepsilon(&_has_bits_);
          idmepsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_ref_pre_construct = 171 [default = true];
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_use_ref_pre_construct(&_has_bits_);
          use_ref_pre_construct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool xica_need_preconstruct = 172 [default = true];
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_xica_need_preconstruct(&_has_bits_);
          xica_need_preconstruct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool xica_need_ego_idm = 173 [default = true];
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_xica_need_ego_idm(&_has_bits_);
          xica_need_ego_idm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double occ_bound_max = 174 [default = -1];
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_occ_bound_max(&_has_bits_);
          occ_bound_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double xica_w_cons_his = 175 [default = 0.5];
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_xica_w_cons_his(&_has_bits_);
          xica_w_cons_his_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_decision_delta_t = 176 [default = 0.5];
      case 176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_min_decision_delta_t(&_has_bits_);
          min_decision_delta_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double xica_diff_dis_max = 177 [default = 5];
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_xica_diff_dis_max(&_has_bits_);
          xica_diff_dis_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double xica_diff_v_max = 178 [default = 3];
      case 178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_xica_diff_v_max(&_has_bits_);
          xica_diff_v_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double xica_diff_a_max = 179 [default = 2];
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_xica_diff_a_max(&_has_bits_);
          xica_diff_a_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double rel_lat_thresh = 180 [default = 1];
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_rel_lat_thresh(&_has_bits_);
          rel_lat_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double xica_w_refline = 181 [default = 1];
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_xica_w_refline(&_has_bits_);
          xica_w_refline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XICABehaviorDeciderConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XICABehaviorDeciderConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mcts_max_search_iter = 1 [default = 5000];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mcts_max_search_iter(), target);
  }

  // optional double mcts_max_search_time = 2 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_mcts_max_search_time(), target);
  }

  // optional int32 mcts_node_pool_size = 3 [default = 10000];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mcts_node_pool_size(), target);
  }

  // optional int32 TimeVariantBicycleAccDynamicsConfig = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_timevariantbicycleaccdynamicsconfig(), target);
  }

  // optional double veh_max_acc = 5 [default = 10];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_veh_max_acc(), target);
  }

  // optional double veh_min_acc = 6 [default = -2];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_veh_min_acc(), target);
  }

  // optional double veh_ego_length = 7 [default = 5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_veh_ego_length(), target);
  }

  // optional double veh_ego_width = 8 [default = 2];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_veh_ego_width(), target);
  }

  // optional double gamma = 9 [default = 0.8];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_gamma(), target);
  }

  // optional double c = 10 [default = 1.41];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_c(), target);
  }

  // optional int32 min_valid_node_num = 11 [default = 300];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_min_valid_node_num(), target);
  }

  // optional double vru_max_vel = 12 [default = 6];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_vru_max_vel(), target);
  }

  // optional double left_turn_range = 13 [default = 15];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_left_turn_range(), target);
  }

  // optional double heading_range = 14 [default = 0.17];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_heading_range(), target);
  }

  // optional double lk_lat_range = 15 [default = 8];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_lk_lat_range(), target);
  }

  // optional double lat_expand_factor = 16 [default = 1.4];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_lat_expand_factor(), target);
  }

  // optional double long_expand_factor = 17 [default = 1.6];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_long_expand_factor(), target);
  }

  // optional double invalid_penalty = 18 [default = -0.5];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_invalid_penalty(), target);
  }

  // optional double vel_limit_factor = 19 [default = 1.1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_vel_limit_factor(), target);
  }

  // optional double max_delta_l = 20 [default = 2.5];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_max_delta_l(), target);
  }

  // optional double min_decision_distance = 21 [default = 15];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_min_decision_distance(), target);
  }

  // repeated double coarse_time_step = 30;
  for (int i = 0, n = this->_internal_coarse_time_step_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_coarse_time_step(i), target);
  }

  // repeated double fine_time_step = 31;
  for (int i = 0, n = this->_internal_fine_time_step_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_fine_time_step(i), target);
  }

  // repeated double jerk_action = 32;
  for (int i = 0, n = this->_internal_jerk_action_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_jerk_action(i), target);
  }

  // repeated double lk_dkappa_action = 33;
  for (int i = 0, n = this->_internal_lk_dkappa_action_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(33, this->_internal_lk_dkappa_action(i), target);
  }

  // repeated double right_dkappa_action = 34;
  for (int i = 0, n = this->_internal_right_dkappa_action_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(34, this->_internal_right_dkappa_action(i), target);
  }

  // repeated double left_dkappa_action = 35;
  for (int i = 0, n = this->_internal_left_dkappa_action_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(35, this->_internal_left_dkappa_action(i), target);
  }

  // optional bool is_opposite_collision_func_open = 40 [default = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_is_opposite_collision_func_open(), target);
  }

  // optional bool is_opposite_left_turn_func_open = 41 [default = true];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_is_opposite_left_turn_func_open(), target);
  }

  // optional bool is_debug_info_open = 42 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_is_debug_info_open(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double w_acc = 100 [default = 0.2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(100, this->_internal_w_acc(), target);
  }

  // optional double w_eff = 101 [default = 0.2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(101, this->_internal_w_eff(), target);
  }

  // optional double w_ref = 102 [default = 0.6];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(102, this->_internal_w_ref(), target);
  }

  // optional double w_safe = 103 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(103, this->_internal_w_safe(), target);
  }

  // optional double w_pred = 104 [default = 0.6];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(104, this->_internal_w_pred(), target);
  }

  // optional double w_cons_act = 105 [default = 0.6];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(105, this->_internal_w_cons_act(), target);
  }

  // optional double w_cons_his = 106 [default = 0.4];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(106, this->_internal_w_cons_his(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_x_ica_behavior_decider = 150 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(150, this->_internal_use_x_ica_behavior_decider(), target);
  }

  // optional bool use_neighbor_back_obs = 151 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(151, this->_internal_use_neighbor_back_obs(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double lookhead_distance = 152 [default = 60];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(152, this->_internal_lookhead_distance(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_virtual_obs = 153 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(153, this->_internal_use_virtual_obs(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 nudge_obstacles_num = 154 [default = 5];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(154, this->_internal_nudge_obstacles_num(), target);
  }

  // optional int32 curr_lane_obstacles_num = 155 [default = 3];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(155, this->_internal_curr_lane_obstacles_num(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool always_use_neighbor_obs = 156 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(156, this->_internal_always_use_neighbor_obs(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 left_obstacles_num = 157 [default = 3];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(157, this->_internal_left_obstacles_num(), target);
  }

  // optional int32 right_obstacles_num = 158 [default = 3];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(158, this->_internal_right_obstacles_num(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_tree_pre_constructed = 159 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(159, this->_internal_is_tree_pre_constructed(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double ego_agent_reward_adjust = 160 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(160, this->_internal_ego_agent_reward_adjust(), target);
  }

  // optional double xica_w_eff = 161 [default = 0.3];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(161, this->_internal_xica_w_eff(), target);
  }

  // optional double xica_w_acc = 162 [default = 0.1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(162, this->_internal_xica_w_acc(), target);
  }

  // optional double xica_w_safe = 163 [default = 1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(163, this->_internal_xica_w_safe(), target);
  }

  // optional double xica_w_occ = 164 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(164, this->_internal_xica_w_occ(), target);
  }

  // optional double max_acc_ = 165 [default = 1.3];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(165, this->_internal_max_acc_(), target);
  }

  // optional double comfort_acc_ = 166 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(166, this->_internal_comfort_acc_(), target);
  }

  // optional double acc_exp_ = 167 [default = 2];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(167, this->_internal_acc_exp_(), target);
  }

  // optional double idm_min_dist_ = 168 [default = 2.5];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(168, this->_internal_idm_min_dist_(), target);
  }

  // optional double idm_desired_time_ = 169 [default = 0.9];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(169, this->_internal_idm_desired_time_(), target);
  }

  // optional double idmepsilon = 170 [default = 1e-05];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(170, this->_internal_idmepsilon(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_ref_pre_construct = 171 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(171, this->_internal_use_ref_pre_construct(), target);
  }

  // optional bool xica_need_preconstruct = 172 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(172, this->_internal_xica_need_preconstruct(), target);
  }

  // optional bool xica_need_ego_idm = 173 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(173, this->_internal_xica_need_ego_idm(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double occ_bound_max = 174 [default = -1];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(174, this->_internal_occ_bound_max(), target);
  }

  // optional double xica_w_cons_his = 175 [default = 0.5];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(175, this->_internal_xica_w_cons_his(), target);
  }

  // optional double min_decision_delta_t = 176 [default = 0.5];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(176, this->_internal_min_decision_delta_t(), target);
  }

  // optional double xica_diff_dis_max = 177 [default = 5];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(177, this->_internal_xica_diff_dis_max(), target);
  }

  // optional double xica_diff_v_max = 178 [default = 3];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(178, this->_internal_xica_diff_v_max(), target);
  }

  // optional double xica_diff_a_max = 179 [default = 2];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(179, this->_internal_xica_diff_a_max(), target);
  }

  // optional double rel_lat_thresh = 180 [default = 1];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(180, this->_internal_rel_lat_thresh(), target);
  }

  // optional double xica_w_refline = 181 [default = 1];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(181, this->_internal_xica_w_refline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XICABehaviorDeciderConfig)
  return target;
}

size_t XICABehaviorDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XICABehaviorDeciderConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double coarse_time_step = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coarse_time_step_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_coarse_time_step_size());
    total_size += data_size;
  }

  // repeated double fine_time_step = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fine_time_step_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_fine_time_step_size());
    total_size += data_size;
  }

  // repeated double jerk_action = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_jerk_action_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_jerk_action_size());
    total_size += data_size;
  }

  // repeated double lk_dkappa_action = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lk_dkappa_action_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_lk_dkappa_action_size());
    total_size += data_size;
  }

  // repeated double right_dkappa_action = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_right_dkappa_action_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_right_dkappa_action_size());
    total_size += data_size;
  }

  // repeated double left_dkappa_action = 35;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_left_dkappa_action_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_left_dkappa_action_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 TimeVariantBicycleAccDynamicsConfig = 4 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timevariantbicycleaccdynamicsconfig());
    }

    // optional bool is_debug_info_open = 42 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool use_neighbor_back_obs = 151 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool use_virtual_obs = 153 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool always_use_neighbor_obs = 156 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool is_tree_pre_constructed = 159 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool xica_need_preconstruct = 172 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool xica_need_ego_idm = 173 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double mcts_max_search_time = 2 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional int32 mcts_max_search_iter = 1 [default = 5000];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcts_max_search_iter());
    }

    // optional int32 mcts_node_pool_size = 3 [default = 10000];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcts_node_pool_size());
    }

    // optional double veh_max_acc = 5 [default = 10];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double veh_min_acc = 6 [default = -2];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double veh_ego_length = 7 [default = 5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double veh_ego_width = 8 [default = 2];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double gamma = 9 [default = 0.8];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double c = 10 [default = 1.41];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double vru_max_vel = 12 [default = 6];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double left_turn_range = 13 [default = 15];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double heading_range = 14 [default = 0.17];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional double lk_lat_range = 15 [default = 8];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 8;
    }

    // optional double lat_expand_factor = 16 [default = 1.4];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double long_expand_factor = 17 [default = 1.6];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double invalid_penalty = 18 [default = -0.5];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double vel_limit_factor = 19 [default = 1.1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double max_delta_l = 20 [default = 2.5];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double min_decision_distance = 21 [default = 15];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional int32 min_valid_node_num = 11 [default = 300];
    if (cached_has_bits & 0x08000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_min_valid_node_num());
    }

    // optional bool is_opposite_collision_func_open = 40 [default = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_opposite_left_turn_func_open = 41 [default = true];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_x_ica_behavior_decider = 150 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_ref_pre_construct = 171 [default = true];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional double w_acc = 100 [default = 0.2];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double w_eff = 101 [default = 0.2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double w_ref = 102 [default = 0.6];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double w_safe = 103 [default = 0.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double w_pred = 104 [default = 0.6];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double w_cons_act = 105 [default = 0.6];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double w_cons_his = 106 [default = 0.4];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double lookhead_distance = 152 [default = 60];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 nudge_obstacles_num = 154 [default = 5];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_nudge_obstacles_num());
    }

    // optional int32 curr_lane_obstacles_num = 155 [default = 3];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_curr_lane_obstacles_num());
    }

    // optional int32 left_obstacles_num = 157 [default = 3];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_left_obstacles_num());
    }

    // optional int32 right_obstacles_num = 158 [default = 3];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_right_obstacles_num());
    }

    // optional double ego_agent_reward_adjust = 160 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double xica_w_eff = 161 [default = 0.3];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double xica_w_acc = 162 [default = 0.1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double xica_w_safe = 163 [default = 1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double xica_w_occ = 164 [default = 0.5];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double max_acc_ = 165 [default = 1.3];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double comfort_acc_ = 166 [default = 0.5];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double acc_exp_ = 167 [default = 2];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double idm_min_dist_ = 168 [default = 2.5];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double idm_desired_time_ = 169 [default = 0.9];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double idmepsilon = 170 [default = 1e-05];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double occ_bound_max = 174 [default = -1];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional double xica_w_cons_his = 175 [default = 0.5];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double min_decision_delta_t = 176 [default = 0.5];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double xica_diff_dis_max = 177 [default = 5];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double xica_diff_v_max = 178 [default = 3];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double xica_diff_a_max = 179 [default = 2];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double rel_lat_thresh = 180 [default = 1];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double xica_w_refline = 181 [default = 1];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XICABehaviorDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    XICABehaviorDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XICABehaviorDeciderConfig::GetClassData() const { return &_class_data_; }

void XICABehaviorDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<XICABehaviorDeciderConfig *>(to)->MergeFrom(
      static_cast<const XICABehaviorDeciderConfig &>(from));
}


void XICABehaviorDeciderConfig::MergeFrom(const XICABehaviorDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XICABehaviorDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  coarse_time_step_.MergeFrom(from.coarse_time_step_);
  fine_time_step_.MergeFrom(from.fine_time_step_);
  jerk_action_.MergeFrom(from.jerk_action_);
  lk_dkappa_action_.MergeFrom(from.lk_dkappa_action_);
  right_dkappa_action_.MergeFrom(from.right_dkappa_action_);
  left_dkappa_action_.MergeFrom(from.left_dkappa_action_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      timevariantbicycleaccdynamicsconfig_ = from.timevariantbicycleaccdynamicsconfig_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_debug_info_open_ = from.is_debug_info_open_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_neighbor_back_obs_ = from.use_neighbor_back_obs_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_virtual_obs_ = from.use_virtual_obs_;
    }
    if (cached_has_bits & 0x00000010u) {
      always_use_neighbor_obs_ = from.always_use_neighbor_obs_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_tree_pre_constructed_ = from.is_tree_pre_constructed_;
    }
    if (cached_has_bits & 0x00000040u) {
      xica_need_preconstruct_ = from.xica_need_preconstruct_;
    }
    if (cached_has_bits & 0x00000080u) {
      xica_need_ego_idm_ = from.xica_need_ego_idm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mcts_max_search_time_ = from.mcts_max_search_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      mcts_max_search_iter_ = from.mcts_max_search_iter_;
    }
    if (cached_has_bits & 0x00000400u) {
      mcts_node_pool_size_ = from.mcts_node_pool_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      veh_max_acc_ = from.veh_max_acc_;
    }
    if (cached_has_bits & 0x00001000u) {
      veh_min_acc_ = from.veh_min_acc_;
    }
    if (cached_has_bits & 0x00002000u) {
      veh_ego_length_ = from.veh_ego_length_;
    }
    if (cached_has_bits & 0x00004000u) {
      veh_ego_width_ = from.veh_ego_width_;
    }
    if (cached_has_bits & 0x00008000u) {
      gamma_ = from.gamma_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00020000u) {
      vru_max_vel_ = from.vru_max_vel_;
    }
    if (cached_has_bits & 0x00040000u) {
      left_turn_range_ = from.left_turn_range_;
    }
    if (cached_has_bits & 0x00080000u) {
      heading_range_ = from.heading_range_;
    }
    if (cached_has_bits & 0x00100000u) {
      lk_lat_range_ = from.lk_lat_range_;
    }
    if (cached_has_bits & 0x00200000u) {
      lat_expand_factor_ = from.lat_expand_factor_;
    }
    if (cached_has_bits & 0x00400000u) {
      long_expand_factor_ = from.long_expand_factor_;
    }
    if (cached_has_bits & 0x00800000u) {
      invalid_penalty_ = from.invalid_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      vel_limit_factor_ = from.vel_limit_factor_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_delta_l_ = from.max_delta_l_;
    }
    if (cached_has_bits & 0x04000000u) {
      min_decision_distance_ = from.min_decision_distance_;
    }
    if (cached_has_bits & 0x08000000u) {
      min_valid_node_num_ = from.min_valid_node_num_;
    }
    if (cached_has_bits & 0x10000000u) {
      is_opposite_collision_func_open_ = from.is_opposite_collision_func_open_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_opposite_left_turn_func_open_ = from.is_opposite_left_turn_func_open_;
    }
    if (cached_has_bits & 0x40000000u) {
      use_x_ica_behavior_decider_ = from.use_x_ica_behavior_decider_;
    }
    if (cached_has_bits & 0x80000000u) {
      use_ref_pre_construct_ = from.use_ref_pre_construct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      w_acc_ = from.w_acc_;
    }
    if (cached_has_bits & 0x00000002u) {
      w_eff_ = from.w_eff_;
    }
    if (cached_has_bits & 0x00000004u) {
      w_ref_ = from.w_ref_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_safe_ = from.w_safe_;
    }
    if (cached_has_bits & 0x00000010u) {
      w_pred_ = from.w_pred_;
    }
    if (cached_has_bits & 0x00000020u) {
      w_cons_act_ = from.w_cons_act_;
    }
    if (cached_has_bits & 0x00000040u) {
      w_cons_his_ = from.w_cons_his_;
    }
    if (cached_has_bits & 0x00000080u) {
      lookhead_distance_ = from.lookhead_distance_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      nudge_obstacles_num_ = from.nudge_obstacles_num_;
    }
    if (cached_has_bits & 0x00000200u) {
      curr_lane_obstacles_num_ = from.curr_lane_obstacles_num_;
    }
    if (cached_has_bits & 0x00000400u) {
      left_obstacles_num_ = from.left_obstacles_num_;
    }
    if (cached_has_bits & 0x00000800u) {
      right_obstacles_num_ = from.right_obstacles_num_;
    }
    if (cached_has_bits & 0x00001000u) {
      ego_agent_reward_adjust_ = from.ego_agent_reward_adjust_;
    }
    if (cached_has_bits & 0x00002000u) {
      xica_w_eff_ = from.xica_w_eff_;
    }
    if (cached_has_bits & 0x00004000u) {
      xica_w_acc_ = from.xica_w_acc_;
    }
    if (cached_has_bits & 0x00008000u) {
      xica_w_safe_ = from.xica_w_safe_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      xica_w_occ_ = from.xica_w_occ_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_acc__ = from.max_acc__;
    }
    if (cached_has_bits & 0x00040000u) {
      comfort_acc__ = from.comfort_acc__;
    }
    if (cached_has_bits & 0x00080000u) {
      acc_exp__ = from.acc_exp__;
    }
    if (cached_has_bits & 0x00100000u) {
      idm_min_dist__ = from.idm_min_dist__;
    }
    if (cached_has_bits & 0x00200000u) {
      idm_desired_time__ = from.idm_desired_time__;
    }
    if (cached_has_bits & 0x00400000u) {
      idmepsilon_ = from.idmepsilon_;
    }
    if (cached_has_bits & 0x00800000u) {
      occ_bound_max_ = from.occ_bound_max_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      xica_w_cons_his_ = from.xica_w_cons_his_;
    }
    if (cached_has_bits & 0x02000000u) {
      min_decision_delta_t_ = from.min_decision_delta_t_;
    }
    if (cached_has_bits & 0x04000000u) {
      xica_diff_dis_max_ = from.xica_diff_dis_max_;
    }
    if (cached_has_bits & 0x08000000u) {
      xica_diff_v_max_ = from.xica_diff_v_max_;
    }
    if (cached_has_bits & 0x10000000u) {
      xica_diff_a_max_ = from.xica_diff_a_max_;
    }
    if (cached_has_bits & 0x20000000u) {
      rel_lat_thresh_ = from.rel_lat_thresh_;
    }
    if (cached_has_bits & 0x40000000u) {
      xica_w_refline_ = from.xica_w_refline_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XICABehaviorDeciderConfig::CopyFrom(const XICABehaviorDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XICABehaviorDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XICABehaviorDeciderConfig::IsInitialized() const {
  return true;
}

void XICABehaviorDeciderConfig::InternalSwap(XICABehaviorDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  coarse_time_step_.InternalSwap(&other->coarse_time_step_);
  fine_time_step_.InternalSwap(&other->fine_time_step_);
  jerk_action_.InternalSwap(&other->jerk_action_);
  lk_dkappa_action_.InternalSwap(&other->lk_dkappa_action_);
  right_dkappa_action_.InternalSwap(&other->right_dkappa_action_);
  left_dkappa_action_.InternalSwap(&other->left_dkappa_action_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XICABehaviorDeciderConfig, is_tree_pre_constructed_)
      + sizeof(XICABehaviorDeciderConfig::is_tree_pre_constructed_)
      - PROTOBUF_FIELD_OFFSET(XICABehaviorDeciderConfig, timevariantbicycleaccdynamicsconfig_)>(
          reinterpret_cast<char*>(&timevariantbicycleaccdynamicsconfig_),
          reinterpret_cast<char*>(&other->timevariantbicycleaccdynamicsconfig_));
  swap(xica_need_preconstruct_, other->xica_need_preconstruct_);
  swap(xica_need_ego_idm_, other->xica_need_ego_idm_);
  swap(mcts_max_search_time_, other->mcts_max_search_time_);
  swap(mcts_max_search_iter_, other->mcts_max_search_iter_);
  swap(mcts_node_pool_size_, other->mcts_node_pool_size_);
  swap(veh_max_acc_, other->veh_max_acc_);
  swap(veh_min_acc_, other->veh_min_acc_);
  swap(veh_ego_length_, other->veh_ego_length_);
  swap(veh_ego_width_, other->veh_ego_width_);
  swap(gamma_, other->gamma_);
  swap(c_, other->c_);
  swap(vru_max_vel_, other->vru_max_vel_);
  swap(left_turn_range_, other->left_turn_range_);
  swap(heading_range_, other->heading_range_);
  swap(lk_lat_range_, other->lk_lat_range_);
  swap(lat_expand_factor_, other->lat_expand_factor_);
  swap(long_expand_factor_, other->long_expand_factor_);
  swap(invalid_penalty_, other->invalid_penalty_);
  swap(vel_limit_factor_, other->vel_limit_factor_);
  swap(max_delta_l_, other->max_delta_l_);
  swap(min_decision_distance_, other->min_decision_distance_);
  swap(min_valid_node_num_, other->min_valid_node_num_);
  swap(is_opposite_collision_func_open_, other->is_opposite_collision_func_open_);
  swap(is_opposite_left_turn_func_open_, other->is_opposite_left_turn_func_open_);
  swap(use_x_ica_behavior_decider_, other->use_x_ica_behavior_decider_);
  swap(use_ref_pre_construct_, other->use_ref_pre_construct_);
  swap(w_acc_, other->w_acc_);
  swap(w_eff_, other->w_eff_);
  swap(w_ref_, other->w_ref_);
  swap(w_safe_, other->w_safe_);
  swap(w_pred_, other->w_pred_);
  swap(w_cons_act_, other->w_cons_act_);
  swap(w_cons_his_, other->w_cons_his_);
  swap(lookhead_distance_, other->lookhead_distance_);
  swap(nudge_obstacles_num_, other->nudge_obstacles_num_);
  swap(curr_lane_obstacles_num_, other->curr_lane_obstacles_num_);
  swap(left_obstacles_num_, other->left_obstacles_num_);
  swap(right_obstacles_num_, other->right_obstacles_num_);
  swap(ego_agent_reward_adjust_, other->ego_agent_reward_adjust_);
  swap(xica_w_eff_, other->xica_w_eff_);
  swap(xica_w_acc_, other->xica_w_acc_);
  swap(xica_w_safe_, other->xica_w_safe_);
  swap(xica_w_occ_, other->xica_w_occ_);
  swap(max_acc__, other->max_acc__);
  swap(comfort_acc__, other->comfort_acc__);
  swap(acc_exp__, other->acc_exp__);
  swap(idm_min_dist__, other->idm_min_dist__);
  swap(idm_desired_time__, other->idm_desired_time__);
  swap(idmepsilon_, other->idmepsilon_);
  swap(occ_bound_max_, other->occ_bound_max_);
  swap(xica_w_cons_his_, other->xica_w_cons_his_);
  swap(min_decision_delta_t_, other->min_decision_delta_t_);
  swap(xica_diff_dis_max_, other->xica_diff_dis_max_);
  swap(xica_diff_v_max_, other->xica_diff_v_max_);
  swap(xica_diff_a_max_, other->xica_diff_a_max_);
  swap(rel_lat_thresh_, other->rel_lat_thresh_);
  swap(xica_w_refline_, other->xica_w_refline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XICABehaviorDeciderConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_xpp_5fmcts_5fconfig_2eproto_getter, &descriptor_table_xpp_5fmcts_5fconfig_2eproto_once,
      file_level_metadata_xpp_5fmcts_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XICABehaviorDeciderConfig*
Arena::CreateMaybeMessage< ::XICABehaviorDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XICABehaviorDeciderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
