// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xpp_mcts_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xpp_5fmcts_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xpp_5fmcts_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xpp_5fmcts_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xpp_5fmcts_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xpp_5fmcts_5fconfig_2eproto;
class XICABehaviorDeciderConfig;
struct XICABehaviorDeciderConfigDefaultTypeInternal;
extern XICABehaviorDeciderConfigDefaultTypeInternal _XICABehaviorDeciderConfig_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::XICABehaviorDeciderConfig* Arena::CreateMaybeMessage<::XICABehaviorDeciderConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class XICABehaviorDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XICABehaviorDeciderConfig) */ {
 public:
  inline XICABehaviorDeciderConfig() : XICABehaviorDeciderConfig(nullptr) {}
  ~XICABehaviorDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR XICABehaviorDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XICABehaviorDeciderConfig(const XICABehaviorDeciderConfig& from);
  XICABehaviorDeciderConfig(XICABehaviorDeciderConfig&& from) noexcept
    : XICABehaviorDeciderConfig() {
    *this = ::std::move(from);
  }

  inline XICABehaviorDeciderConfig& operator=(const XICABehaviorDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline XICABehaviorDeciderConfig& operator=(XICABehaviorDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XICABehaviorDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const XICABehaviorDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const XICABehaviorDeciderConfig*>(
               &_XICABehaviorDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XICABehaviorDeciderConfig& a, XICABehaviorDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(XICABehaviorDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XICABehaviorDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XICABehaviorDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XICABehaviorDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XICABehaviorDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XICABehaviorDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XICABehaviorDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XICABehaviorDeciderConfig";
  }
  protected:
  explicit XICABehaviorDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoarseTimeStepFieldNumber = 30,
    kFineTimeStepFieldNumber = 31,
    kJerkActionFieldNumber = 32,
    kLkDkappaActionFieldNumber = 33,
    kRightDkappaActionFieldNumber = 34,
    kLeftDkappaActionFieldNumber = 35,
    kTimeVariantBicycleAccDynamicsConfigFieldNumber = 4,
    kIsDebugInfoOpenFieldNumber = 42,
    kUseNeighborBackObsFieldNumber = 151,
    kUseVirtualObsFieldNumber = 153,
    kAlwaysUseNeighborObsFieldNumber = 156,
    kIsTreePreConstructedFieldNumber = 159,
    kXicaNeedPreconstructFieldNumber = 172,
    kXicaNeedEgoIdmFieldNumber = 173,
    kMctsMaxSearchTimeFieldNumber = 2,
    kMctsMaxSearchIterFieldNumber = 1,
    kMctsNodePoolSizeFieldNumber = 3,
    kVehMaxAccFieldNumber = 5,
    kVehMinAccFieldNumber = 6,
    kVehEgoLengthFieldNumber = 7,
    kVehEgoWidthFieldNumber = 8,
    kGammaFieldNumber = 9,
    kCFieldNumber = 10,
    kVruMaxVelFieldNumber = 12,
    kLeftTurnRangeFieldNumber = 13,
    kHeadingRangeFieldNumber = 14,
    kLkLatRangeFieldNumber = 15,
    kLatExpandFactorFieldNumber = 16,
    kLongExpandFactorFieldNumber = 17,
    kInvalidPenaltyFieldNumber = 18,
    kVelLimitFactorFieldNumber = 19,
    kMaxDeltaLFieldNumber = 20,
    kMinDecisionDistanceFieldNumber = 21,
    kMinValidNodeNumFieldNumber = 11,
    kIsOppositeCollisionFuncOpenFieldNumber = 40,
    kIsOppositeLeftTurnFuncOpenFieldNumber = 41,
    kUseXIcaBehaviorDeciderFieldNumber = 150,
    kUseRefPreConstructFieldNumber = 171,
    kWAccFieldNumber = 100,
    kWEffFieldNumber = 101,
    kWRefFieldNumber = 102,
    kWSafeFieldNumber = 103,
    kWPredFieldNumber = 104,
    kWConsActFieldNumber = 105,
    kWConsHisFieldNumber = 106,
    kLookheadDistanceFieldNumber = 152,
    kNudgeObstaclesNumFieldNumber = 154,
    kCurrLaneObstaclesNumFieldNumber = 155,
    kLeftObstaclesNumFieldNumber = 157,
    kRightObstaclesNumFieldNumber = 158,
    kEgoAgentRewardAdjustFieldNumber = 160,
    kXicaWEffFieldNumber = 161,
    kXicaWAccFieldNumber = 162,
    kXicaWSafeFieldNumber = 163,
    kXicaWOccFieldNumber = 164,
    kMaxAccFieldNumber = 165,
    kComfortAccFieldNumber = 166,
    kAccExpFieldNumber = 167,
    kIdmMinDistFieldNumber = 168,
    kIdmDesiredTimeFieldNumber = 169,
    kIdmepsilonFieldNumber = 170,
    kOccBoundMaxFieldNumber = 174,
    kXicaWConsHisFieldNumber = 175,
    kMinDecisionDeltaTFieldNumber = 176,
    kXicaDiffDisMaxFieldNumber = 177,
    kXicaDiffVMaxFieldNumber = 178,
    kXicaDiffAMaxFieldNumber = 179,
    kRelLatThreshFieldNumber = 180,
    kXicaWReflineFieldNumber = 181,
  };
  // repeated double coarse_time_step = 30;
  int coarse_time_step_size() const;
  private:
  int _internal_coarse_time_step_size() const;
  public:
  void clear_coarse_time_step();
  private:
  double _internal_coarse_time_step(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_coarse_time_step() const;
  void _internal_add_coarse_time_step(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_coarse_time_step();
  public:
  double coarse_time_step(int index) const;
  void set_coarse_time_step(int index, double value);
  void add_coarse_time_step(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      coarse_time_step() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_coarse_time_step();

  // repeated double fine_time_step = 31;
  int fine_time_step_size() const;
  private:
  int _internal_fine_time_step_size() const;
  public:
  void clear_fine_time_step();
  private:
  double _internal_fine_time_step(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_fine_time_step() const;
  void _internal_add_fine_time_step(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_fine_time_step();
  public:
  double fine_time_step(int index) const;
  void set_fine_time_step(int index, double value);
  void add_fine_time_step(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      fine_time_step() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_fine_time_step();

  // repeated double jerk_action = 32;
  int jerk_action_size() const;
  private:
  int _internal_jerk_action_size() const;
  public:
  void clear_jerk_action();
  private:
  double _internal_jerk_action(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_jerk_action() const;
  void _internal_add_jerk_action(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_jerk_action();
  public:
  double jerk_action(int index) const;
  void set_jerk_action(int index, double value);
  void add_jerk_action(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      jerk_action() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_jerk_action();

  // repeated double lk_dkappa_action = 33;
  int lk_dkappa_action_size() const;
  private:
  int _internal_lk_dkappa_action_size() const;
  public:
  void clear_lk_dkappa_action();
  private:
  double _internal_lk_dkappa_action(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_lk_dkappa_action() const;
  void _internal_add_lk_dkappa_action(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_lk_dkappa_action();
  public:
  double lk_dkappa_action(int index) const;
  void set_lk_dkappa_action(int index, double value);
  void add_lk_dkappa_action(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      lk_dkappa_action() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_lk_dkappa_action();

  // repeated double right_dkappa_action = 34;
  int right_dkappa_action_size() const;
  private:
  int _internal_right_dkappa_action_size() const;
  public:
  void clear_right_dkappa_action();
  private:
  double _internal_right_dkappa_action(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_right_dkappa_action() const;
  void _internal_add_right_dkappa_action(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_right_dkappa_action();
  public:
  double right_dkappa_action(int index) const;
  void set_right_dkappa_action(int index, double value);
  void add_right_dkappa_action(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      right_dkappa_action() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_right_dkappa_action();

  // repeated double left_dkappa_action = 35;
  int left_dkappa_action_size() const;
  private:
  int _internal_left_dkappa_action_size() const;
  public:
  void clear_left_dkappa_action();
  private:
  double _internal_left_dkappa_action(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_left_dkappa_action() const;
  void _internal_add_left_dkappa_action(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_left_dkappa_action();
  public:
  double left_dkappa_action(int index) const;
  void set_left_dkappa_action(int index, double value);
  void add_left_dkappa_action(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      left_dkappa_action() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_left_dkappa_action();

  // optional int32 TimeVariantBicycleAccDynamicsConfig = 4 [default = 0];
  bool has_timevariantbicycleaccdynamicsconfig() const;
  private:
  bool _internal_has_timevariantbicycleaccdynamicsconfig() const;
  public:
  void clear_timevariantbicycleaccdynamicsconfig();
  int32_t timevariantbicycleaccdynamicsconfig() const;
  void set_timevariantbicycleaccdynamicsconfig(int32_t value);
  private:
  int32_t _internal_timevariantbicycleaccdynamicsconfig() const;
  void _internal_set_timevariantbicycleaccdynamicsconfig(int32_t value);
  public:

  // optional bool is_debug_info_open = 42 [default = false];
  bool has_is_debug_info_open() const;
  private:
  bool _internal_has_is_debug_info_open() const;
  public:
  void clear_is_debug_info_open();
  bool is_debug_info_open() const;
  void set_is_debug_info_open(bool value);
  private:
  bool _internal_is_debug_info_open() const;
  void _internal_set_is_debug_info_open(bool value);
  public:

  // optional bool use_neighbor_back_obs = 151 [default = false];
  bool has_use_neighbor_back_obs() const;
  private:
  bool _internal_has_use_neighbor_back_obs() const;
  public:
  void clear_use_neighbor_back_obs();
  bool use_neighbor_back_obs() const;
  void set_use_neighbor_back_obs(bool value);
  private:
  bool _internal_use_neighbor_back_obs() const;
  void _internal_set_use_neighbor_back_obs(bool value);
  public:

  // optional bool use_virtual_obs = 153 [default = false];
  bool has_use_virtual_obs() const;
  private:
  bool _internal_has_use_virtual_obs() const;
  public:
  void clear_use_virtual_obs();
  bool use_virtual_obs() const;
  void set_use_virtual_obs(bool value);
  private:
  bool _internal_use_virtual_obs() const;
  void _internal_set_use_virtual_obs(bool value);
  public:

  // optional bool always_use_neighbor_obs = 156 [default = false];
  bool has_always_use_neighbor_obs() const;
  private:
  bool _internal_has_always_use_neighbor_obs() const;
  public:
  void clear_always_use_neighbor_obs();
  bool always_use_neighbor_obs() const;
  void set_always_use_neighbor_obs(bool value);
  private:
  bool _internal_always_use_neighbor_obs() const;
  void _internal_set_always_use_neighbor_obs(bool value);
  public:

  // optional bool is_tree_pre_constructed = 159 [default = false];
  bool has_is_tree_pre_constructed() const;
  private:
  bool _internal_has_is_tree_pre_constructed() const;
  public:
  void clear_is_tree_pre_constructed();
  bool is_tree_pre_constructed() const;
  void set_is_tree_pre_constructed(bool value);
  private:
  bool _internal_is_tree_pre_constructed() const;
  void _internal_set_is_tree_pre_constructed(bool value);
  public:

  // optional bool xica_need_preconstruct = 172 [default = true];
  bool has_xica_need_preconstruct() const;
  private:
  bool _internal_has_xica_need_preconstruct() const;
  public:
  void clear_xica_need_preconstruct();
  bool xica_need_preconstruct() const;
  void set_xica_need_preconstruct(bool value);
  private:
  bool _internal_xica_need_preconstruct() const;
  void _internal_set_xica_need_preconstruct(bool value);
  public:

  // optional bool xica_need_ego_idm = 173 [default = true];
  bool has_xica_need_ego_idm() const;
  private:
  bool _internal_has_xica_need_ego_idm() const;
  public:
  void clear_xica_need_ego_idm();
  bool xica_need_ego_idm() const;
  void set_xica_need_ego_idm(bool value);
  private:
  bool _internal_xica_need_ego_idm() const;
  void _internal_set_xica_need_ego_idm(bool value);
  public:

  // optional double mcts_max_search_time = 2 [default = 10];
  bool has_mcts_max_search_time() const;
  private:
  bool _internal_has_mcts_max_search_time() const;
  public:
  void clear_mcts_max_search_time();
  double mcts_max_search_time() const;
  void set_mcts_max_search_time(double value);
  private:
  double _internal_mcts_max_search_time() const;
  void _internal_set_mcts_max_search_time(double value);
  public:

  // optional int32 mcts_max_search_iter = 1 [default = 5000];
  bool has_mcts_max_search_iter() const;
  private:
  bool _internal_has_mcts_max_search_iter() const;
  public:
  void clear_mcts_max_search_iter();
  int32_t mcts_max_search_iter() const;
  void set_mcts_max_search_iter(int32_t value);
  private:
  int32_t _internal_mcts_max_search_iter() const;
  void _internal_set_mcts_max_search_iter(int32_t value);
  public:

  // optional int32 mcts_node_pool_size = 3 [default = 10000];
  bool has_mcts_node_pool_size() const;
  private:
  bool _internal_has_mcts_node_pool_size() const;
  public:
  void clear_mcts_node_pool_size();
  int32_t mcts_node_pool_size() const;
  void set_mcts_node_pool_size(int32_t value);
  private:
  int32_t _internal_mcts_node_pool_size() const;
  void _internal_set_mcts_node_pool_size(int32_t value);
  public:

  // optional double veh_max_acc = 5 [default = 10];
  bool has_veh_max_acc() const;
  private:
  bool _internal_has_veh_max_acc() const;
  public:
  void clear_veh_max_acc();
  double veh_max_acc() const;
  void set_veh_max_acc(double value);
  private:
  double _internal_veh_max_acc() const;
  void _internal_set_veh_max_acc(double value);
  public:

  // optional double veh_min_acc = 6 [default = -2];
  bool has_veh_min_acc() const;
  private:
  bool _internal_has_veh_min_acc() const;
  public:
  void clear_veh_min_acc();
  double veh_min_acc() const;
  void set_veh_min_acc(double value);
  private:
  double _internal_veh_min_acc() const;
  void _internal_set_veh_min_acc(double value);
  public:

  // optional double veh_ego_length = 7 [default = 5];
  bool has_veh_ego_length() const;
  private:
  bool _internal_has_veh_ego_length() const;
  public:
  void clear_veh_ego_length();
  double veh_ego_length() const;
  void set_veh_ego_length(double value);
  private:
  double _internal_veh_ego_length() const;
  void _internal_set_veh_ego_length(double value);
  public:

  // optional double veh_ego_width = 8 [default = 2];
  bool has_veh_ego_width() const;
  private:
  bool _internal_has_veh_ego_width() const;
  public:
  void clear_veh_ego_width();
  double veh_ego_width() const;
  void set_veh_ego_width(double value);
  private:
  double _internal_veh_ego_width() const;
  void _internal_set_veh_ego_width(double value);
  public:

  // optional double gamma = 9 [default = 0.8];
  bool has_gamma() const;
  private:
  bool _internal_has_gamma() const;
  public:
  void clear_gamma();
  double gamma() const;
  void set_gamma(double value);
  private:
  double _internal_gamma() const;
  void _internal_set_gamma(double value);
  public:

  // optional double c = 10 [default = 1.41];
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  double c() const;
  void set_c(double value);
  private:
  double _internal_c() const;
  void _internal_set_c(double value);
  public:

  // optional double vru_max_vel = 12 [default = 6];
  bool has_vru_max_vel() const;
  private:
  bool _internal_has_vru_max_vel() const;
  public:
  void clear_vru_max_vel();
  double vru_max_vel() const;
  void set_vru_max_vel(double value);
  private:
  double _internal_vru_max_vel() const;
  void _internal_set_vru_max_vel(double value);
  public:

  // optional double left_turn_range = 13 [default = 15];
  bool has_left_turn_range() const;
  private:
  bool _internal_has_left_turn_range() const;
  public:
  void clear_left_turn_range();
  double left_turn_range() const;
  void set_left_turn_range(double value);
  private:
  double _internal_left_turn_range() const;
  void _internal_set_left_turn_range(double value);
  public:

  // optional double heading_range = 14 [default = 0.17];
  bool has_heading_range() const;
  private:
  bool _internal_has_heading_range() const;
  public:
  void clear_heading_range();
  double heading_range() const;
  void set_heading_range(double value);
  private:
  double _internal_heading_range() const;
  void _internal_set_heading_range(double value);
  public:

  // optional double lk_lat_range = 15 [default = 8];
  bool has_lk_lat_range() const;
  private:
  bool _internal_has_lk_lat_range() const;
  public:
  void clear_lk_lat_range();
  double lk_lat_range() const;
  void set_lk_lat_range(double value);
  private:
  double _internal_lk_lat_range() const;
  void _internal_set_lk_lat_range(double value);
  public:

  // optional double lat_expand_factor = 16 [default = 1.4];
  bool has_lat_expand_factor() const;
  private:
  bool _internal_has_lat_expand_factor() const;
  public:
  void clear_lat_expand_factor();
  double lat_expand_factor() const;
  void set_lat_expand_factor(double value);
  private:
  double _internal_lat_expand_factor() const;
  void _internal_set_lat_expand_factor(double value);
  public:

  // optional double long_expand_factor = 17 [default = 1.6];
  bool has_long_expand_factor() const;
  private:
  bool _internal_has_long_expand_factor() const;
  public:
  void clear_long_expand_factor();
  double long_expand_factor() const;
  void set_long_expand_factor(double value);
  private:
  double _internal_long_expand_factor() const;
  void _internal_set_long_expand_factor(double value);
  public:

  // optional double invalid_penalty = 18 [default = -0.5];
  bool has_invalid_penalty() const;
  private:
  bool _internal_has_invalid_penalty() const;
  public:
  void clear_invalid_penalty();
  double invalid_penalty() const;
  void set_invalid_penalty(double value);
  private:
  double _internal_invalid_penalty() const;
  void _internal_set_invalid_penalty(double value);
  public:

  // optional double vel_limit_factor = 19 [default = 1.1];
  bool has_vel_limit_factor() const;
  private:
  bool _internal_has_vel_limit_factor() const;
  public:
  void clear_vel_limit_factor();
  double vel_limit_factor() const;
  void set_vel_limit_factor(double value);
  private:
  double _internal_vel_limit_factor() const;
  void _internal_set_vel_limit_factor(double value);
  public:

  // optional double max_delta_l = 20 [default = 2.5];
  bool has_max_delta_l() const;
  private:
  bool _internal_has_max_delta_l() const;
  public:
  void clear_max_delta_l();
  double max_delta_l() const;
  void set_max_delta_l(double value);
  private:
  double _internal_max_delta_l() const;
  void _internal_set_max_delta_l(double value);
  public:

  // optional double min_decision_distance = 21 [default = 15];
  bool has_min_decision_distance() const;
  private:
  bool _internal_has_min_decision_distance() const;
  public:
  void clear_min_decision_distance();
  double min_decision_distance() const;
  void set_min_decision_distance(double value);
  private:
  double _internal_min_decision_distance() const;
  void _internal_set_min_decision_distance(double value);
  public:

  // optional int32 min_valid_node_num = 11 [default = 300];
  bool has_min_valid_node_num() const;
  private:
  bool _internal_has_min_valid_node_num() const;
  public:
  void clear_min_valid_node_num();
  int32_t min_valid_node_num() const;
  void set_min_valid_node_num(int32_t value);
  private:
  int32_t _internal_min_valid_node_num() const;
  void _internal_set_min_valid_node_num(int32_t value);
  public:

  // optional bool is_opposite_collision_func_open = 40 [default = true];
  bool has_is_opposite_collision_func_open() const;
  private:
  bool _internal_has_is_opposite_collision_func_open() const;
  public:
  void clear_is_opposite_collision_func_open();
  bool is_opposite_collision_func_open() const;
  void set_is_opposite_collision_func_open(bool value);
  private:
  bool _internal_is_opposite_collision_func_open() const;
  void _internal_set_is_opposite_collision_func_open(bool value);
  public:

  // optional bool is_opposite_left_turn_func_open = 41 [default = true];
  bool has_is_opposite_left_turn_func_open() const;
  private:
  bool _internal_has_is_opposite_left_turn_func_open() const;
  public:
  void clear_is_opposite_left_turn_func_open();
  bool is_opposite_left_turn_func_open() const;
  void set_is_opposite_left_turn_func_open(bool value);
  private:
  bool _internal_is_opposite_left_turn_func_open() const;
  void _internal_set_is_opposite_left_turn_func_open(bool value);
  public:

  // optional bool use_x_ica_behavior_decider = 150 [default = true];
  bool has_use_x_ica_behavior_decider() const;
  private:
  bool _internal_has_use_x_ica_behavior_decider() const;
  public:
  void clear_use_x_ica_behavior_decider();
  bool use_x_ica_behavior_decider() const;
  void set_use_x_ica_behavior_decider(bool value);
  private:
  bool _internal_use_x_ica_behavior_decider() const;
  void _internal_set_use_x_ica_behavior_decider(bool value);
  public:

  // optional bool use_ref_pre_construct = 171 [default = true];
  bool has_use_ref_pre_construct() const;
  private:
  bool _internal_has_use_ref_pre_construct() const;
  public:
  void clear_use_ref_pre_construct();
  bool use_ref_pre_construct() const;
  void set_use_ref_pre_construct(bool value);
  private:
  bool _internal_use_ref_pre_construct() const;
  void _internal_set_use_ref_pre_construct(bool value);
  public:

  // optional double w_acc = 100 [default = 0.2];
  bool has_w_acc() const;
  private:
  bool _internal_has_w_acc() const;
  public:
  void clear_w_acc();
  double w_acc() const;
  void set_w_acc(double value);
  private:
  double _internal_w_acc() const;
  void _internal_set_w_acc(double value);
  public:

  // optional double w_eff = 101 [default = 0.2];
  bool has_w_eff() const;
  private:
  bool _internal_has_w_eff() const;
  public:
  void clear_w_eff();
  double w_eff() const;
  void set_w_eff(double value);
  private:
  double _internal_w_eff() const;
  void _internal_set_w_eff(double value);
  public:

  // optional double w_ref = 102 [default = 0.6];
  bool has_w_ref() const;
  private:
  bool _internal_has_w_ref() const;
  public:
  void clear_w_ref();
  double w_ref() const;
  void set_w_ref(double value);
  private:
  double _internal_w_ref() const;
  void _internal_set_w_ref(double value);
  public:

  // optional double w_safe = 103 [default = 0.5];
  bool has_w_safe() const;
  private:
  bool _internal_has_w_safe() const;
  public:
  void clear_w_safe();
  double w_safe() const;
  void set_w_safe(double value);
  private:
  double _internal_w_safe() const;
  void _internal_set_w_safe(double value);
  public:

  // optional double w_pred = 104 [default = 0.6];
  bool has_w_pred() const;
  private:
  bool _internal_has_w_pred() const;
  public:
  void clear_w_pred();
  double w_pred() const;
  void set_w_pred(double value);
  private:
  double _internal_w_pred() const;
  void _internal_set_w_pred(double value);
  public:

  // optional double w_cons_act = 105 [default = 0.6];
  bool has_w_cons_act() const;
  private:
  bool _internal_has_w_cons_act() const;
  public:
  void clear_w_cons_act();
  double w_cons_act() const;
  void set_w_cons_act(double value);
  private:
  double _internal_w_cons_act() const;
  void _internal_set_w_cons_act(double value);
  public:

  // optional double w_cons_his = 106 [default = 0.4];
  bool has_w_cons_his() const;
  private:
  bool _internal_has_w_cons_his() const;
  public:
  void clear_w_cons_his();
  double w_cons_his() const;
  void set_w_cons_his(double value);
  private:
  double _internal_w_cons_his() const;
  void _internal_set_w_cons_his(double value);
  public:

  // optional double lookhead_distance = 152 [default = 60];
  bool has_lookhead_distance() const;
  private:
  bool _internal_has_lookhead_distance() const;
  public:
  void clear_lookhead_distance();
  double lookhead_distance() const;
  void set_lookhead_distance(double value);
  private:
  double _internal_lookhead_distance() const;
  void _internal_set_lookhead_distance(double value);
  public:

  // optional int32 nudge_obstacles_num = 154 [default = 5];
  bool has_nudge_obstacles_num() const;
  private:
  bool _internal_has_nudge_obstacles_num() const;
  public:
  void clear_nudge_obstacles_num();
  int32_t nudge_obstacles_num() const;
  void set_nudge_obstacles_num(int32_t value);
  private:
  int32_t _internal_nudge_obstacles_num() const;
  void _internal_set_nudge_obstacles_num(int32_t value);
  public:

  // optional int32 curr_lane_obstacles_num = 155 [default = 3];
  bool has_curr_lane_obstacles_num() const;
  private:
  bool _internal_has_curr_lane_obstacles_num() const;
  public:
  void clear_curr_lane_obstacles_num();
  int32_t curr_lane_obstacles_num() const;
  void set_curr_lane_obstacles_num(int32_t value);
  private:
  int32_t _internal_curr_lane_obstacles_num() const;
  void _internal_set_curr_lane_obstacles_num(int32_t value);
  public:

  // optional int32 left_obstacles_num = 157 [default = 3];
  bool has_left_obstacles_num() const;
  private:
  bool _internal_has_left_obstacles_num() const;
  public:
  void clear_left_obstacles_num();
  int32_t left_obstacles_num() const;
  void set_left_obstacles_num(int32_t value);
  private:
  int32_t _internal_left_obstacles_num() const;
  void _internal_set_left_obstacles_num(int32_t value);
  public:

  // optional int32 right_obstacles_num = 158 [default = 3];
  bool has_right_obstacles_num() const;
  private:
  bool _internal_has_right_obstacles_num() const;
  public:
  void clear_right_obstacles_num();
  int32_t right_obstacles_num() const;
  void set_right_obstacles_num(int32_t value);
  private:
  int32_t _internal_right_obstacles_num() const;
  void _internal_set_right_obstacles_num(int32_t value);
  public:

  // optional double ego_agent_reward_adjust = 160 [default = 1];
  bool has_ego_agent_reward_adjust() const;
  private:
  bool _internal_has_ego_agent_reward_adjust() const;
  public:
  void clear_ego_agent_reward_adjust();
  double ego_agent_reward_adjust() const;
  void set_ego_agent_reward_adjust(double value);
  private:
  double _internal_ego_agent_reward_adjust() const;
  void _internal_set_ego_agent_reward_adjust(double value);
  public:

  // optional double xica_w_eff = 161 [default = 0.3];
  bool has_xica_w_eff() const;
  private:
  bool _internal_has_xica_w_eff() const;
  public:
  void clear_xica_w_eff();
  double xica_w_eff() const;
  void set_xica_w_eff(double value);
  private:
  double _internal_xica_w_eff() const;
  void _internal_set_xica_w_eff(double value);
  public:

  // optional double xica_w_acc = 162 [default = 0.1];
  bool has_xica_w_acc() const;
  private:
  bool _internal_has_xica_w_acc() const;
  public:
  void clear_xica_w_acc();
  double xica_w_acc() const;
  void set_xica_w_acc(double value);
  private:
  double _internal_xica_w_acc() const;
  void _internal_set_xica_w_acc(double value);
  public:

  // optional double xica_w_safe = 163 [default = 1];
  bool has_xica_w_safe() const;
  private:
  bool _internal_has_xica_w_safe() const;
  public:
  void clear_xica_w_safe();
  double xica_w_safe() const;
  void set_xica_w_safe(double value);
  private:
  double _internal_xica_w_safe() const;
  void _internal_set_xica_w_safe(double value);
  public:

  // optional double xica_w_occ = 164 [default = 0.5];
  bool has_xica_w_occ() const;
  private:
  bool _internal_has_xica_w_occ() const;
  public:
  void clear_xica_w_occ();
  double xica_w_occ() const;
  void set_xica_w_occ(double value);
  private:
  double _internal_xica_w_occ() const;
  void _internal_set_xica_w_occ(double value);
  public:

  // optional double max_acc_ = 165 [default = 1.3];
  bool has_max_acc_() const;
  private:
  bool _internal_has_max_acc_() const;
  public:
  void clear_max_acc_();
  double max_acc_() const;
  void set_max_acc_(double value);
  private:
  double _internal_max_acc_() const;
  void _internal_set_max_acc_(double value);
  public:

  // optional double comfort_acc_ = 166 [default = 0.5];
  bool has_comfort_acc_() const;
  private:
  bool _internal_has_comfort_acc_() const;
  public:
  void clear_comfort_acc_();
  double comfort_acc_() const;
  void set_comfort_acc_(double value);
  private:
  double _internal_comfort_acc_() const;
  void _internal_set_comfort_acc_(double value);
  public:

  // optional double acc_exp_ = 167 [default = 2];
  bool has_acc_exp_() const;
  private:
  bool _internal_has_acc_exp_() const;
  public:
  void clear_acc_exp_();
  double acc_exp_() const;
  void set_acc_exp_(double value);
  private:
  double _internal_acc_exp_() const;
  void _internal_set_acc_exp_(double value);
  public:

  // optional double idm_min_dist_ = 168 [default = 2.5];
  bool has_idm_min_dist_() const;
  private:
  bool _internal_has_idm_min_dist_() const;
  public:
  void clear_idm_min_dist_();
  double idm_min_dist_() const;
  void set_idm_min_dist_(double value);
  private:
  double _internal_idm_min_dist_() const;
  void _internal_set_idm_min_dist_(double value);
  public:

  // optional double idm_desired_time_ = 169 [default = 0.9];
  bool has_idm_desired_time_() const;
  private:
  bool _internal_has_idm_desired_time_() const;
  public:
  void clear_idm_desired_time_();
  double idm_desired_time_() const;
  void set_idm_desired_time_(double value);
  private:
  double _internal_idm_desired_time_() const;
  void _internal_set_idm_desired_time_(double value);
  public:

  // optional double idmepsilon = 170 [default = 1e-05];
  bool has_idmepsilon() const;
  private:
  bool _internal_has_idmepsilon() const;
  public:
  void clear_idmepsilon();
  double idmepsilon() const;
  void set_idmepsilon(double value);
  private:
  double _internal_idmepsilon() const;
  void _internal_set_idmepsilon(double value);
  public:

  // optional double occ_bound_max = 174 [default = -1];
  bool has_occ_bound_max() const;
  private:
  bool _internal_has_occ_bound_max() const;
  public:
  void clear_occ_bound_max();
  double occ_bound_max() const;
  void set_occ_bound_max(double value);
  private:
  double _internal_occ_bound_max() const;
  void _internal_set_occ_bound_max(double value);
  public:

  // optional double xica_w_cons_his = 175 [default = 0.5];
  bool has_xica_w_cons_his() const;
  private:
  bool _internal_has_xica_w_cons_his() const;
  public:
  void clear_xica_w_cons_his();
  double xica_w_cons_his() const;
  void set_xica_w_cons_his(double value);
  private:
  double _internal_xica_w_cons_his() const;
  void _internal_set_xica_w_cons_his(double value);
  public:

  // optional double min_decision_delta_t = 176 [default = 0.5];
  bool has_min_decision_delta_t() const;
  private:
  bool _internal_has_min_decision_delta_t() const;
  public:
  void clear_min_decision_delta_t();
  double min_decision_delta_t() const;
  void set_min_decision_delta_t(double value);
  private:
  double _internal_min_decision_delta_t() const;
  void _internal_set_min_decision_delta_t(double value);
  public:

  // optional double xica_diff_dis_max = 177 [default = 5];
  bool has_xica_diff_dis_max() const;
  private:
  bool _internal_has_xica_diff_dis_max() const;
  public:
  void clear_xica_diff_dis_max();
  double xica_diff_dis_max() const;
  void set_xica_diff_dis_max(double value);
  private:
  double _internal_xica_diff_dis_max() const;
  void _internal_set_xica_diff_dis_max(double value);
  public:

  // optional double xica_diff_v_max = 178 [default = 3];
  bool has_xica_diff_v_max() const;
  private:
  bool _internal_has_xica_diff_v_max() const;
  public:
  void clear_xica_diff_v_max();
  double xica_diff_v_max() const;
  void set_xica_diff_v_max(double value);
  private:
  double _internal_xica_diff_v_max() const;
  void _internal_set_xica_diff_v_max(double value);
  public:

  // optional double xica_diff_a_max = 179 [default = 2];
  bool has_xica_diff_a_max() const;
  private:
  bool _internal_has_xica_diff_a_max() const;
  public:
  void clear_xica_diff_a_max();
  double xica_diff_a_max() const;
  void set_xica_diff_a_max(double value);
  private:
  double _internal_xica_diff_a_max() const;
  void _internal_set_xica_diff_a_max(double value);
  public:

  // optional double rel_lat_thresh = 180 [default = 1];
  bool has_rel_lat_thresh() const;
  private:
  bool _internal_has_rel_lat_thresh() const;
  public:
  void clear_rel_lat_thresh();
  double rel_lat_thresh() const;
  void set_rel_lat_thresh(double value);
  private:
  double _internal_rel_lat_thresh() const;
  void _internal_set_rel_lat_thresh(double value);
  public:

  // optional double xica_w_refline = 181 [default = 1];
  bool has_xica_w_refline() const;
  private:
  bool _internal_has_xica_w_refline() const;
  public:
  void clear_xica_w_refline();
  double xica_w_refline() const;
  void set_xica_w_refline(double value);
  private:
  double _internal_xica_w_refline() const;
  void _internal_set_xica_w_refline(double value);
  public:

  // @@protoc_insertion_point(class_scope:XICABehaviorDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > coarse_time_step_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > fine_time_step_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > jerk_action_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > lk_dkappa_action_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > right_dkappa_action_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > left_dkappa_action_;
  int32_t timevariantbicycleaccdynamicsconfig_;
  bool is_debug_info_open_;
  bool use_neighbor_back_obs_;
  bool use_virtual_obs_;
  bool always_use_neighbor_obs_;
  bool is_tree_pre_constructed_;
  bool xica_need_preconstruct_;
  bool xica_need_ego_idm_;
  double mcts_max_search_time_;
  int32_t mcts_max_search_iter_;
  int32_t mcts_node_pool_size_;
  double veh_max_acc_;
  double veh_min_acc_;
  double veh_ego_length_;
  double veh_ego_width_;
  double gamma_;
  double c_;
  double vru_max_vel_;
  double left_turn_range_;
  double heading_range_;
  double lk_lat_range_;
  double lat_expand_factor_;
  double long_expand_factor_;
  double invalid_penalty_;
  double vel_limit_factor_;
  double max_delta_l_;
  double min_decision_distance_;
  int32_t min_valid_node_num_;
  bool is_opposite_collision_func_open_;
  bool is_opposite_left_turn_func_open_;
  bool use_x_ica_behavior_decider_;
  bool use_ref_pre_construct_;
  double w_acc_;
  double w_eff_;
  double w_ref_;
  double w_safe_;
  double w_pred_;
  double w_cons_act_;
  double w_cons_his_;
  double lookhead_distance_;
  int32_t nudge_obstacles_num_;
  int32_t curr_lane_obstacles_num_;
  int32_t left_obstacles_num_;
  int32_t right_obstacles_num_;
  double ego_agent_reward_adjust_;
  double xica_w_eff_;
  double xica_w_acc_;
  double xica_w_safe_;
  double xica_w_occ_;
  double max_acc__;
  double comfort_acc__;
  double acc_exp__;
  double idm_min_dist__;
  double idm_desired_time__;
  double idmepsilon_;
  double occ_bound_max_;
  double xica_w_cons_his_;
  double min_decision_delta_t_;
  double xica_diff_dis_max_;
  double xica_diff_v_max_;
  double xica_diff_a_max_;
  double rel_lat_thresh_;
  double xica_w_refline_;
  friend struct ::TableStruct_xpp_5fmcts_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XICABehaviorDeciderConfig

// optional int32 mcts_max_search_iter = 1 [default = 5000];
inline bool XICABehaviorDeciderConfig::_internal_has_mcts_max_search_iter() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_mcts_max_search_iter() const {
  return _internal_has_mcts_max_search_iter();
}
inline void XICABehaviorDeciderConfig::clear_mcts_max_search_iter() {
  mcts_max_search_iter_ = 5000;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t XICABehaviorDeciderConfig::_internal_mcts_max_search_iter() const {
  return mcts_max_search_iter_;
}
inline int32_t XICABehaviorDeciderConfig::mcts_max_search_iter() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.mcts_max_search_iter)
  return _internal_mcts_max_search_iter();
}
inline void XICABehaviorDeciderConfig::_internal_set_mcts_max_search_iter(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  mcts_max_search_iter_ = value;
}
inline void XICABehaviorDeciderConfig::set_mcts_max_search_iter(int32_t value) {
  _internal_set_mcts_max_search_iter(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.mcts_max_search_iter)
}

// optional double mcts_max_search_time = 2 [default = 10];
inline bool XICABehaviorDeciderConfig::_internal_has_mcts_max_search_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_mcts_max_search_time() const {
  return _internal_has_mcts_max_search_time();
}
inline void XICABehaviorDeciderConfig::clear_mcts_max_search_time() {
  mcts_max_search_time_ = 10;
  _has_bits_[0] &= ~0x00000100u;
}
inline double XICABehaviorDeciderConfig::_internal_mcts_max_search_time() const {
  return mcts_max_search_time_;
}
inline double XICABehaviorDeciderConfig::mcts_max_search_time() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.mcts_max_search_time)
  return _internal_mcts_max_search_time();
}
inline void XICABehaviorDeciderConfig::_internal_set_mcts_max_search_time(double value) {
  _has_bits_[0] |= 0x00000100u;
  mcts_max_search_time_ = value;
}
inline void XICABehaviorDeciderConfig::set_mcts_max_search_time(double value) {
  _internal_set_mcts_max_search_time(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.mcts_max_search_time)
}

// optional int32 mcts_node_pool_size = 3 [default = 10000];
inline bool XICABehaviorDeciderConfig::_internal_has_mcts_node_pool_size() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_mcts_node_pool_size() const {
  return _internal_has_mcts_node_pool_size();
}
inline void XICABehaviorDeciderConfig::clear_mcts_node_pool_size() {
  mcts_node_pool_size_ = 10000;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t XICABehaviorDeciderConfig::_internal_mcts_node_pool_size() const {
  return mcts_node_pool_size_;
}
inline int32_t XICABehaviorDeciderConfig::mcts_node_pool_size() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.mcts_node_pool_size)
  return _internal_mcts_node_pool_size();
}
inline void XICABehaviorDeciderConfig::_internal_set_mcts_node_pool_size(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  mcts_node_pool_size_ = value;
}
inline void XICABehaviorDeciderConfig::set_mcts_node_pool_size(int32_t value) {
  _internal_set_mcts_node_pool_size(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.mcts_node_pool_size)
}

// optional int32 TimeVariantBicycleAccDynamicsConfig = 4 [default = 0];
inline bool XICABehaviorDeciderConfig::_internal_has_timevariantbicycleaccdynamicsconfig() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_timevariantbicycleaccdynamicsconfig() const {
  return _internal_has_timevariantbicycleaccdynamicsconfig();
}
inline void XICABehaviorDeciderConfig::clear_timevariantbicycleaccdynamicsconfig() {
  timevariantbicycleaccdynamicsconfig_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t XICABehaviorDeciderConfig::_internal_timevariantbicycleaccdynamicsconfig() const {
  return timevariantbicycleaccdynamicsconfig_;
}
inline int32_t XICABehaviorDeciderConfig::timevariantbicycleaccdynamicsconfig() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.TimeVariantBicycleAccDynamicsConfig)
  return _internal_timevariantbicycleaccdynamicsconfig();
}
inline void XICABehaviorDeciderConfig::_internal_set_timevariantbicycleaccdynamicsconfig(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  timevariantbicycleaccdynamicsconfig_ = value;
}
inline void XICABehaviorDeciderConfig::set_timevariantbicycleaccdynamicsconfig(int32_t value) {
  _internal_set_timevariantbicycleaccdynamicsconfig(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.TimeVariantBicycleAccDynamicsConfig)
}

// optional double veh_max_acc = 5 [default = 10];
inline bool XICABehaviorDeciderConfig::_internal_has_veh_max_acc() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_veh_max_acc() const {
  return _internal_has_veh_max_acc();
}
inline void XICABehaviorDeciderConfig::clear_veh_max_acc() {
  veh_max_acc_ = 10;
  _has_bits_[0] &= ~0x00000800u;
}
inline double XICABehaviorDeciderConfig::_internal_veh_max_acc() const {
  return veh_max_acc_;
}
inline double XICABehaviorDeciderConfig::veh_max_acc() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.veh_max_acc)
  return _internal_veh_max_acc();
}
inline void XICABehaviorDeciderConfig::_internal_set_veh_max_acc(double value) {
  _has_bits_[0] |= 0x00000800u;
  veh_max_acc_ = value;
}
inline void XICABehaviorDeciderConfig::set_veh_max_acc(double value) {
  _internal_set_veh_max_acc(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.veh_max_acc)
}

// optional double veh_min_acc = 6 [default = -2];
inline bool XICABehaviorDeciderConfig::_internal_has_veh_min_acc() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_veh_min_acc() const {
  return _internal_has_veh_min_acc();
}
inline void XICABehaviorDeciderConfig::clear_veh_min_acc() {
  veh_min_acc_ = -2;
  _has_bits_[0] &= ~0x00001000u;
}
inline double XICABehaviorDeciderConfig::_internal_veh_min_acc() const {
  return veh_min_acc_;
}
inline double XICABehaviorDeciderConfig::veh_min_acc() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.veh_min_acc)
  return _internal_veh_min_acc();
}
inline void XICABehaviorDeciderConfig::_internal_set_veh_min_acc(double value) {
  _has_bits_[0] |= 0x00001000u;
  veh_min_acc_ = value;
}
inline void XICABehaviorDeciderConfig::set_veh_min_acc(double value) {
  _internal_set_veh_min_acc(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.veh_min_acc)
}

// optional double veh_ego_length = 7 [default = 5];
inline bool XICABehaviorDeciderConfig::_internal_has_veh_ego_length() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_veh_ego_length() const {
  return _internal_has_veh_ego_length();
}
inline void XICABehaviorDeciderConfig::clear_veh_ego_length() {
  veh_ego_length_ = 5;
  _has_bits_[0] &= ~0x00002000u;
}
inline double XICABehaviorDeciderConfig::_internal_veh_ego_length() const {
  return veh_ego_length_;
}
inline double XICABehaviorDeciderConfig::veh_ego_length() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.veh_ego_length)
  return _internal_veh_ego_length();
}
inline void XICABehaviorDeciderConfig::_internal_set_veh_ego_length(double value) {
  _has_bits_[0] |= 0x00002000u;
  veh_ego_length_ = value;
}
inline void XICABehaviorDeciderConfig::set_veh_ego_length(double value) {
  _internal_set_veh_ego_length(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.veh_ego_length)
}

// optional double veh_ego_width = 8 [default = 2];
inline bool XICABehaviorDeciderConfig::_internal_has_veh_ego_width() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_veh_ego_width() const {
  return _internal_has_veh_ego_width();
}
inline void XICABehaviorDeciderConfig::clear_veh_ego_width() {
  veh_ego_width_ = 2;
  _has_bits_[0] &= ~0x00004000u;
}
inline double XICABehaviorDeciderConfig::_internal_veh_ego_width() const {
  return veh_ego_width_;
}
inline double XICABehaviorDeciderConfig::veh_ego_width() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.veh_ego_width)
  return _internal_veh_ego_width();
}
inline void XICABehaviorDeciderConfig::_internal_set_veh_ego_width(double value) {
  _has_bits_[0] |= 0x00004000u;
  veh_ego_width_ = value;
}
inline void XICABehaviorDeciderConfig::set_veh_ego_width(double value) {
  _internal_set_veh_ego_width(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.veh_ego_width)
}

// optional double gamma = 9 [default = 0.8];
inline bool XICABehaviorDeciderConfig::_internal_has_gamma() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_gamma() const {
  return _internal_has_gamma();
}
inline void XICABehaviorDeciderConfig::clear_gamma() {
  gamma_ = 0.8;
  _has_bits_[0] &= ~0x00008000u;
}
inline double XICABehaviorDeciderConfig::_internal_gamma() const {
  return gamma_;
}
inline double XICABehaviorDeciderConfig::gamma() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.gamma)
  return _internal_gamma();
}
inline void XICABehaviorDeciderConfig::_internal_set_gamma(double value) {
  _has_bits_[0] |= 0x00008000u;
  gamma_ = value;
}
inline void XICABehaviorDeciderConfig::set_gamma(double value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.gamma)
}

// optional double c = 10 [default = 1.41];
inline bool XICABehaviorDeciderConfig::_internal_has_c() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_c() const {
  return _internal_has_c();
}
inline void XICABehaviorDeciderConfig::clear_c() {
  c_ = 1.41;
  _has_bits_[0] &= ~0x00010000u;
}
inline double XICABehaviorDeciderConfig::_internal_c() const {
  return c_;
}
inline double XICABehaviorDeciderConfig::c() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.c)
  return _internal_c();
}
inline void XICABehaviorDeciderConfig::_internal_set_c(double value) {
  _has_bits_[0] |= 0x00010000u;
  c_ = value;
}
inline void XICABehaviorDeciderConfig::set_c(double value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.c)
}

// optional int32 min_valid_node_num = 11 [default = 300];
inline bool XICABehaviorDeciderConfig::_internal_has_min_valid_node_num() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_min_valid_node_num() const {
  return _internal_has_min_valid_node_num();
}
inline void XICABehaviorDeciderConfig::clear_min_valid_node_num() {
  min_valid_node_num_ = 300;
  _has_bits_[0] &= ~0x08000000u;
}
inline int32_t XICABehaviorDeciderConfig::_internal_min_valid_node_num() const {
  return min_valid_node_num_;
}
inline int32_t XICABehaviorDeciderConfig::min_valid_node_num() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.min_valid_node_num)
  return _internal_min_valid_node_num();
}
inline void XICABehaviorDeciderConfig::_internal_set_min_valid_node_num(int32_t value) {
  _has_bits_[0] |= 0x08000000u;
  min_valid_node_num_ = value;
}
inline void XICABehaviorDeciderConfig::set_min_valid_node_num(int32_t value) {
  _internal_set_min_valid_node_num(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.min_valid_node_num)
}

// optional double vru_max_vel = 12 [default = 6];
inline bool XICABehaviorDeciderConfig::_internal_has_vru_max_vel() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_vru_max_vel() const {
  return _internal_has_vru_max_vel();
}
inline void XICABehaviorDeciderConfig::clear_vru_max_vel() {
  vru_max_vel_ = 6;
  _has_bits_[0] &= ~0x00020000u;
}
inline double XICABehaviorDeciderConfig::_internal_vru_max_vel() const {
  return vru_max_vel_;
}
inline double XICABehaviorDeciderConfig::vru_max_vel() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.vru_max_vel)
  return _internal_vru_max_vel();
}
inline void XICABehaviorDeciderConfig::_internal_set_vru_max_vel(double value) {
  _has_bits_[0] |= 0x00020000u;
  vru_max_vel_ = value;
}
inline void XICABehaviorDeciderConfig::set_vru_max_vel(double value) {
  _internal_set_vru_max_vel(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.vru_max_vel)
}

// optional double left_turn_range = 13 [default = 15];
inline bool XICABehaviorDeciderConfig::_internal_has_left_turn_range() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_left_turn_range() const {
  return _internal_has_left_turn_range();
}
inline void XICABehaviorDeciderConfig::clear_left_turn_range() {
  left_turn_range_ = 15;
  _has_bits_[0] &= ~0x00040000u;
}
inline double XICABehaviorDeciderConfig::_internal_left_turn_range() const {
  return left_turn_range_;
}
inline double XICABehaviorDeciderConfig::left_turn_range() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.left_turn_range)
  return _internal_left_turn_range();
}
inline void XICABehaviorDeciderConfig::_internal_set_left_turn_range(double value) {
  _has_bits_[0] |= 0x00040000u;
  left_turn_range_ = value;
}
inline void XICABehaviorDeciderConfig::set_left_turn_range(double value) {
  _internal_set_left_turn_range(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.left_turn_range)
}

// optional double heading_range = 14 [default = 0.17];
inline bool XICABehaviorDeciderConfig::_internal_has_heading_range() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_heading_range() const {
  return _internal_has_heading_range();
}
inline void XICABehaviorDeciderConfig::clear_heading_range() {
  heading_range_ = 0.17;
  _has_bits_[0] &= ~0x00080000u;
}
inline double XICABehaviorDeciderConfig::_internal_heading_range() const {
  return heading_range_;
}
inline double XICABehaviorDeciderConfig::heading_range() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.heading_range)
  return _internal_heading_range();
}
inline void XICABehaviorDeciderConfig::_internal_set_heading_range(double value) {
  _has_bits_[0] |= 0x00080000u;
  heading_range_ = value;
}
inline void XICABehaviorDeciderConfig::set_heading_range(double value) {
  _internal_set_heading_range(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.heading_range)
}

// optional double lk_lat_range = 15 [default = 8];
inline bool XICABehaviorDeciderConfig::_internal_has_lk_lat_range() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_lk_lat_range() const {
  return _internal_has_lk_lat_range();
}
inline void XICABehaviorDeciderConfig::clear_lk_lat_range() {
  lk_lat_range_ = 8;
  _has_bits_[0] &= ~0x00100000u;
}
inline double XICABehaviorDeciderConfig::_internal_lk_lat_range() const {
  return lk_lat_range_;
}
inline double XICABehaviorDeciderConfig::lk_lat_range() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.lk_lat_range)
  return _internal_lk_lat_range();
}
inline void XICABehaviorDeciderConfig::_internal_set_lk_lat_range(double value) {
  _has_bits_[0] |= 0x00100000u;
  lk_lat_range_ = value;
}
inline void XICABehaviorDeciderConfig::set_lk_lat_range(double value) {
  _internal_set_lk_lat_range(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.lk_lat_range)
}

// optional double lat_expand_factor = 16 [default = 1.4];
inline bool XICABehaviorDeciderConfig::_internal_has_lat_expand_factor() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_lat_expand_factor() const {
  return _internal_has_lat_expand_factor();
}
inline void XICABehaviorDeciderConfig::clear_lat_expand_factor() {
  lat_expand_factor_ = 1.4;
  _has_bits_[0] &= ~0x00200000u;
}
inline double XICABehaviorDeciderConfig::_internal_lat_expand_factor() const {
  return lat_expand_factor_;
}
inline double XICABehaviorDeciderConfig::lat_expand_factor() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.lat_expand_factor)
  return _internal_lat_expand_factor();
}
inline void XICABehaviorDeciderConfig::_internal_set_lat_expand_factor(double value) {
  _has_bits_[0] |= 0x00200000u;
  lat_expand_factor_ = value;
}
inline void XICABehaviorDeciderConfig::set_lat_expand_factor(double value) {
  _internal_set_lat_expand_factor(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.lat_expand_factor)
}

// optional double long_expand_factor = 17 [default = 1.6];
inline bool XICABehaviorDeciderConfig::_internal_has_long_expand_factor() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_long_expand_factor() const {
  return _internal_has_long_expand_factor();
}
inline void XICABehaviorDeciderConfig::clear_long_expand_factor() {
  long_expand_factor_ = 1.6;
  _has_bits_[0] &= ~0x00400000u;
}
inline double XICABehaviorDeciderConfig::_internal_long_expand_factor() const {
  return long_expand_factor_;
}
inline double XICABehaviorDeciderConfig::long_expand_factor() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.long_expand_factor)
  return _internal_long_expand_factor();
}
inline void XICABehaviorDeciderConfig::_internal_set_long_expand_factor(double value) {
  _has_bits_[0] |= 0x00400000u;
  long_expand_factor_ = value;
}
inline void XICABehaviorDeciderConfig::set_long_expand_factor(double value) {
  _internal_set_long_expand_factor(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.long_expand_factor)
}

// optional double invalid_penalty = 18 [default = -0.5];
inline bool XICABehaviorDeciderConfig::_internal_has_invalid_penalty() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_invalid_penalty() const {
  return _internal_has_invalid_penalty();
}
inline void XICABehaviorDeciderConfig::clear_invalid_penalty() {
  invalid_penalty_ = -0.5;
  _has_bits_[0] &= ~0x00800000u;
}
inline double XICABehaviorDeciderConfig::_internal_invalid_penalty() const {
  return invalid_penalty_;
}
inline double XICABehaviorDeciderConfig::invalid_penalty() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.invalid_penalty)
  return _internal_invalid_penalty();
}
inline void XICABehaviorDeciderConfig::_internal_set_invalid_penalty(double value) {
  _has_bits_[0] |= 0x00800000u;
  invalid_penalty_ = value;
}
inline void XICABehaviorDeciderConfig::set_invalid_penalty(double value) {
  _internal_set_invalid_penalty(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.invalid_penalty)
}

// optional double vel_limit_factor = 19 [default = 1.1];
inline bool XICABehaviorDeciderConfig::_internal_has_vel_limit_factor() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_vel_limit_factor() const {
  return _internal_has_vel_limit_factor();
}
inline void XICABehaviorDeciderConfig::clear_vel_limit_factor() {
  vel_limit_factor_ = 1.1;
  _has_bits_[0] &= ~0x01000000u;
}
inline double XICABehaviorDeciderConfig::_internal_vel_limit_factor() const {
  return vel_limit_factor_;
}
inline double XICABehaviorDeciderConfig::vel_limit_factor() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.vel_limit_factor)
  return _internal_vel_limit_factor();
}
inline void XICABehaviorDeciderConfig::_internal_set_vel_limit_factor(double value) {
  _has_bits_[0] |= 0x01000000u;
  vel_limit_factor_ = value;
}
inline void XICABehaviorDeciderConfig::set_vel_limit_factor(double value) {
  _internal_set_vel_limit_factor(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.vel_limit_factor)
}

// optional double max_delta_l = 20 [default = 2.5];
inline bool XICABehaviorDeciderConfig::_internal_has_max_delta_l() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_max_delta_l() const {
  return _internal_has_max_delta_l();
}
inline void XICABehaviorDeciderConfig::clear_max_delta_l() {
  max_delta_l_ = 2.5;
  _has_bits_[0] &= ~0x02000000u;
}
inline double XICABehaviorDeciderConfig::_internal_max_delta_l() const {
  return max_delta_l_;
}
inline double XICABehaviorDeciderConfig::max_delta_l() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.max_delta_l)
  return _internal_max_delta_l();
}
inline void XICABehaviorDeciderConfig::_internal_set_max_delta_l(double value) {
  _has_bits_[0] |= 0x02000000u;
  max_delta_l_ = value;
}
inline void XICABehaviorDeciderConfig::set_max_delta_l(double value) {
  _internal_set_max_delta_l(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.max_delta_l)
}

// optional double min_decision_distance = 21 [default = 15];
inline bool XICABehaviorDeciderConfig::_internal_has_min_decision_distance() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_min_decision_distance() const {
  return _internal_has_min_decision_distance();
}
inline void XICABehaviorDeciderConfig::clear_min_decision_distance() {
  min_decision_distance_ = 15;
  _has_bits_[0] &= ~0x04000000u;
}
inline double XICABehaviorDeciderConfig::_internal_min_decision_distance() const {
  return min_decision_distance_;
}
inline double XICABehaviorDeciderConfig::min_decision_distance() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.min_decision_distance)
  return _internal_min_decision_distance();
}
inline void XICABehaviorDeciderConfig::_internal_set_min_decision_distance(double value) {
  _has_bits_[0] |= 0x04000000u;
  min_decision_distance_ = value;
}
inline void XICABehaviorDeciderConfig::set_min_decision_distance(double value) {
  _internal_set_min_decision_distance(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.min_decision_distance)
}

// repeated double coarse_time_step = 30;
inline int XICABehaviorDeciderConfig::_internal_coarse_time_step_size() const {
  return coarse_time_step_.size();
}
inline int XICABehaviorDeciderConfig::coarse_time_step_size() const {
  return _internal_coarse_time_step_size();
}
inline void XICABehaviorDeciderConfig::clear_coarse_time_step() {
  coarse_time_step_.Clear();
}
inline double XICABehaviorDeciderConfig::_internal_coarse_time_step(int index) const {
  return coarse_time_step_.Get(index);
}
inline double XICABehaviorDeciderConfig::coarse_time_step(int index) const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.coarse_time_step)
  return _internal_coarse_time_step(index);
}
inline void XICABehaviorDeciderConfig::set_coarse_time_step(int index, double value) {
  coarse_time_step_.Set(index, value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.coarse_time_step)
}
inline void XICABehaviorDeciderConfig::_internal_add_coarse_time_step(double value) {
  coarse_time_step_.Add(value);
}
inline void XICABehaviorDeciderConfig::add_coarse_time_step(double value) {
  _internal_add_coarse_time_step(value);
  // @@protoc_insertion_point(field_add:XICABehaviorDeciderConfig.coarse_time_step)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::_internal_coarse_time_step() const {
  return coarse_time_step_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::coarse_time_step() const {
  // @@protoc_insertion_point(field_list:XICABehaviorDeciderConfig.coarse_time_step)
  return _internal_coarse_time_step();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::_internal_mutable_coarse_time_step() {
  return &coarse_time_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::mutable_coarse_time_step() {
  // @@protoc_insertion_point(field_mutable_list:XICABehaviorDeciderConfig.coarse_time_step)
  return _internal_mutable_coarse_time_step();
}

// repeated double fine_time_step = 31;
inline int XICABehaviorDeciderConfig::_internal_fine_time_step_size() const {
  return fine_time_step_.size();
}
inline int XICABehaviorDeciderConfig::fine_time_step_size() const {
  return _internal_fine_time_step_size();
}
inline void XICABehaviorDeciderConfig::clear_fine_time_step() {
  fine_time_step_.Clear();
}
inline double XICABehaviorDeciderConfig::_internal_fine_time_step(int index) const {
  return fine_time_step_.Get(index);
}
inline double XICABehaviorDeciderConfig::fine_time_step(int index) const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.fine_time_step)
  return _internal_fine_time_step(index);
}
inline void XICABehaviorDeciderConfig::set_fine_time_step(int index, double value) {
  fine_time_step_.Set(index, value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.fine_time_step)
}
inline void XICABehaviorDeciderConfig::_internal_add_fine_time_step(double value) {
  fine_time_step_.Add(value);
}
inline void XICABehaviorDeciderConfig::add_fine_time_step(double value) {
  _internal_add_fine_time_step(value);
  // @@protoc_insertion_point(field_add:XICABehaviorDeciderConfig.fine_time_step)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::_internal_fine_time_step() const {
  return fine_time_step_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::fine_time_step() const {
  // @@protoc_insertion_point(field_list:XICABehaviorDeciderConfig.fine_time_step)
  return _internal_fine_time_step();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::_internal_mutable_fine_time_step() {
  return &fine_time_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::mutable_fine_time_step() {
  // @@protoc_insertion_point(field_mutable_list:XICABehaviorDeciderConfig.fine_time_step)
  return _internal_mutable_fine_time_step();
}

// repeated double jerk_action = 32;
inline int XICABehaviorDeciderConfig::_internal_jerk_action_size() const {
  return jerk_action_.size();
}
inline int XICABehaviorDeciderConfig::jerk_action_size() const {
  return _internal_jerk_action_size();
}
inline void XICABehaviorDeciderConfig::clear_jerk_action() {
  jerk_action_.Clear();
}
inline double XICABehaviorDeciderConfig::_internal_jerk_action(int index) const {
  return jerk_action_.Get(index);
}
inline double XICABehaviorDeciderConfig::jerk_action(int index) const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.jerk_action)
  return _internal_jerk_action(index);
}
inline void XICABehaviorDeciderConfig::set_jerk_action(int index, double value) {
  jerk_action_.Set(index, value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.jerk_action)
}
inline void XICABehaviorDeciderConfig::_internal_add_jerk_action(double value) {
  jerk_action_.Add(value);
}
inline void XICABehaviorDeciderConfig::add_jerk_action(double value) {
  _internal_add_jerk_action(value);
  // @@protoc_insertion_point(field_add:XICABehaviorDeciderConfig.jerk_action)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::_internal_jerk_action() const {
  return jerk_action_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::jerk_action() const {
  // @@protoc_insertion_point(field_list:XICABehaviorDeciderConfig.jerk_action)
  return _internal_jerk_action();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::_internal_mutable_jerk_action() {
  return &jerk_action_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::mutable_jerk_action() {
  // @@protoc_insertion_point(field_mutable_list:XICABehaviorDeciderConfig.jerk_action)
  return _internal_mutable_jerk_action();
}

// repeated double lk_dkappa_action = 33;
inline int XICABehaviorDeciderConfig::_internal_lk_dkappa_action_size() const {
  return lk_dkappa_action_.size();
}
inline int XICABehaviorDeciderConfig::lk_dkappa_action_size() const {
  return _internal_lk_dkappa_action_size();
}
inline void XICABehaviorDeciderConfig::clear_lk_dkappa_action() {
  lk_dkappa_action_.Clear();
}
inline double XICABehaviorDeciderConfig::_internal_lk_dkappa_action(int index) const {
  return lk_dkappa_action_.Get(index);
}
inline double XICABehaviorDeciderConfig::lk_dkappa_action(int index) const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.lk_dkappa_action)
  return _internal_lk_dkappa_action(index);
}
inline void XICABehaviorDeciderConfig::set_lk_dkappa_action(int index, double value) {
  lk_dkappa_action_.Set(index, value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.lk_dkappa_action)
}
inline void XICABehaviorDeciderConfig::_internal_add_lk_dkappa_action(double value) {
  lk_dkappa_action_.Add(value);
}
inline void XICABehaviorDeciderConfig::add_lk_dkappa_action(double value) {
  _internal_add_lk_dkappa_action(value);
  // @@protoc_insertion_point(field_add:XICABehaviorDeciderConfig.lk_dkappa_action)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::_internal_lk_dkappa_action() const {
  return lk_dkappa_action_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::lk_dkappa_action() const {
  // @@protoc_insertion_point(field_list:XICABehaviorDeciderConfig.lk_dkappa_action)
  return _internal_lk_dkappa_action();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::_internal_mutable_lk_dkappa_action() {
  return &lk_dkappa_action_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::mutable_lk_dkappa_action() {
  // @@protoc_insertion_point(field_mutable_list:XICABehaviorDeciderConfig.lk_dkappa_action)
  return _internal_mutable_lk_dkappa_action();
}

// repeated double right_dkappa_action = 34;
inline int XICABehaviorDeciderConfig::_internal_right_dkappa_action_size() const {
  return right_dkappa_action_.size();
}
inline int XICABehaviorDeciderConfig::right_dkappa_action_size() const {
  return _internal_right_dkappa_action_size();
}
inline void XICABehaviorDeciderConfig::clear_right_dkappa_action() {
  right_dkappa_action_.Clear();
}
inline double XICABehaviorDeciderConfig::_internal_right_dkappa_action(int index) const {
  return right_dkappa_action_.Get(index);
}
inline double XICABehaviorDeciderConfig::right_dkappa_action(int index) const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.right_dkappa_action)
  return _internal_right_dkappa_action(index);
}
inline void XICABehaviorDeciderConfig::set_right_dkappa_action(int index, double value) {
  right_dkappa_action_.Set(index, value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.right_dkappa_action)
}
inline void XICABehaviorDeciderConfig::_internal_add_right_dkappa_action(double value) {
  right_dkappa_action_.Add(value);
}
inline void XICABehaviorDeciderConfig::add_right_dkappa_action(double value) {
  _internal_add_right_dkappa_action(value);
  // @@protoc_insertion_point(field_add:XICABehaviorDeciderConfig.right_dkappa_action)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::_internal_right_dkappa_action() const {
  return right_dkappa_action_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::right_dkappa_action() const {
  // @@protoc_insertion_point(field_list:XICABehaviorDeciderConfig.right_dkappa_action)
  return _internal_right_dkappa_action();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::_internal_mutable_right_dkappa_action() {
  return &right_dkappa_action_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::mutable_right_dkappa_action() {
  // @@protoc_insertion_point(field_mutable_list:XICABehaviorDeciderConfig.right_dkappa_action)
  return _internal_mutable_right_dkappa_action();
}

// repeated double left_dkappa_action = 35;
inline int XICABehaviorDeciderConfig::_internal_left_dkappa_action_size() const {
  return left_dkappa_action_.size();
}
inline int XICABehaviorDeciderConfig::left_dkappa_action_size() const {
  return _internal_left_dkappa_action_size();
}
inline void XICABehaviorDeciderConfig::clear_left_dkappa_action() {
  left_dkappa_action_.Clear();
}
inline double XICABehaviorDeciderConfig::_internal_left_dkappa_action(int index) const {
  return left_dkappa_action_.Get(index);
}
inline double XICABehaviorDeciderConfig::left_dkappa_action(int index) const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.left_dkappa_action)
  return _internal_left_dkappa_action(index);
}
inline void XICABehaviorDeciderConfig::set_left_dkappa_action(int index, double value) {
  left_dkappa_action_.Set(index, value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.left_dkappa_action)
}
inline void XICABehaviorDeciderConfig::_internal_add_left_dkappa_action(double value) {
  left_dkappa_action_.Add(value);
}
inline void XICABehaviorDeciderConfig::add_left_dkappa_action(double value) {
  _internal_add_left_dkappa_action(value);
  // @@protoc_insertion_point(field_add:XICABehaviorDeciderConfig.left_dkappa_action)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::_internal_left_dkappa_action() const {
  return left_dkappa_action_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
XICABehaviorDeciderConfig::left_dkappa_action() const {
  // @@protoc_insertion_point(field_list:XICABehaviorDeciderConfig.left_dkappa_action)
  return _internal_left_dkappa_action();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::_internal_mutable_left_dkappa_action() {
  return &left_dkappa_action_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
XICABehaviorDeciderConfig::mutable_left_dkappa_action() {
  // @@protoc_insertion_point(field_mutable_list:XICABehaviorDeciderConfig.left_dkappa_action)
  return _internal_mutable_left_dkappa_action();
}

// optional bool is_opposite_collision_func_open = 40 [default = true];
inline bool XICABehaviorDeciderConfig::_internal_has_is_opposite_collision_func_open() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_is_opposite_collision_func_open() const {
  return _internal_has_is_opposite_collision_func_open();
}
inline void XICABehaviorDeciderConfig::clear_is_opposite_collision_func_open() {
  is_opposite_collision_func_open_ = true;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool XICABehaviorDeciderConfig::_internal_is_opposite_collision_func_open() const {
  return is_opposite_collision_func_open_;
}
inline bool XICABehaviorDeciderConfig::is_opposite_collision_func_open() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.is_opposite_collision_func_open)
  return _internal_is_opposite_collision_func_open();
}
inline void XICABehaviorDeciderConfig::_internal_set_is_opposite_collision_func_open(bool value) {
  _has_bits_[0] |= 0x10000000u;
  is_opposite_collision_func_open_ = value;
}
inline void XICABehaviorDeciderConfig::set_is_opposite_collision_func_open(bool value) {
  _internal_set_is_opposite_collision_func_open(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.is_opposite_collision_func_open)
}

// optional bool is_opposite_left_turn_func_open = 41 [default = true];
inline bool XICABehaviorDeciderConfig::_internal_has_is_opposite_left_turn_func_open() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_is_opposite_left_turn_func_open() const {
  return _internal_has_is_opposite_left_turn_func_open();
}
inline void XICABehaviorDeciderConfig::clear_is_opposite_left_turn_func_open() {
  is_opposite_left_turn_func_open_ = true;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool XICABehaviorDeciderConfig::_internal_is_opposite_left_turn_func_open() const {
  return is_opposite_left_turn_func_open_;
}
inline bool XICABehaviorDeciderConfig::is_opposite_left_turn_func_open() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.is_opposite_left_turn_func_open)
  return _internal_is_opposite_left_turn_func_open();
}
inline void XICABehaviorDeciderConfig::_internal_set_is_opposite_left_turn_func_open(bool value) {
  _has_bits_[0] |= 0x20000000u;
  is_opposite_left_turn_func_open_ = value;
}
inline void XICABehaviorDeciderConfig::set_is_opposite_left_turn_func_open(bool value) {
  _internal_set_is_opposite_left_turn_func_open(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.is_opposite_left_turn_func_open)
}

// optional bool is_debug_info_open = 42 [default = false];
inline bool XICABehaviorDeciderConfig::_internal_has_is_debug_info_open() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_is_debug_info_open() const {
  return _internal_has_is_debug_info_open();
}
inline void XICABehaviorDeciderConfig::clear_is_debug_info_open() {
  is_debug_info_open_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool XICABehaviorDeciderConfig::_internal_is_debug_info_open() const {
  return is_debug_info_open_;
}
inline bool XICABehaviorDeciderConfig::is_debug_info_open() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.is_debug_info_open)
  return _internal_is_debug_info_open();
}
inline void XICABehaviorDeciderConfig::_internal_set_is_debug_info_open(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_debug_info_open_ = value;
}
inline void XICABehaviorDeciderConfig::set_is_debug_info_open(bool value) {
  _internal_set_is_debug_info_open(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.is_debug_info_open)
}

// optional double w_acc = 100 [default = 0.2];
inline bool XICABehaviorDeciderConfig::_internal_has_w_acc() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_w_acc() const {
  return _internal_has_w_acc();
}
inline void XICABehaviorDeciderConfig::clear_w_acc() {
  w_acc_ = 0.2;
  _has_bits_[1] &= ~0x00000001u;
}
inline double XICABehaviorDeciderConfig::_internal_w_acc() const {
  return w_acc_;
}
inline double XICABehaviorDeciderConfig::w_acc() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.w_acc)
  return _internal_w_acc();
}
inline void XICABehaviorDeciderConfig::_internal_set_w_acc(double value) {
  _has_bits_[1] |= 0x00000001u;
  w_acc_ = value;
}
inline void XICABehaviorDeciderConfig::set_w_acc(double value) {
  _internal_set_w_acc(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.w_acc)
}

// optional double w_eff = 101 [default = 0.2];
inline bool XICABehaviorDeciderConfig::_internal_has_w_eff() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_w_eff() const {
  return _internal_has_w_eff();
}
inline void XICABehaviorDeciderConfig::clear_w_eff() {
  w_eff_ = 0.2;
  _has_bits_[1] &= ~0x00000002u;
}
inline double XICABehaviorDeciderConfig::_internal_w_eff() const {
  return w_eff_;
}
inline double XICABehaviorDeciderConfig::w_eff() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.w_eff)
  return _internal_w_eff();
}
inline void XICABehaviorDeciderConfig::_internal_set_w_eff(double value) {
  _has_bits_[1] |= 0x00000002u;
  w_eff_ = value;
}
inline void XICABehaviorDeciderConfig::set_w_eff(double value) {
  _internal_set_w_eff(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.w_eff)
}

// optional double w_ref = 102 [default = 0.6];
inline bool XICABehaviorDeciderConfig::_internal_has_w_ref() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_w_ref() const {
  return _internal_has_w_ref();
}
inline void XICABehaviorDeciderConfig::clear_w_ref() {
  w_ref_ = 0.6;
  _has_bits_[1] &= ~0x00000004u;
}
inline double XICABehaviorDeciderConfig::_internal_w_ref() const {
  return w_ref_;
}
inline double XICABehaviorDeciderConfig::w_ref() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.w_ref)
  return _internal_w_ref();
}
inline void XICABehaviorDeciderConfig::_internal_set_w_ref(double value) {
  _has_bits_[1] |= 0x00000004u;
  w_ref_ = value;
}
inline void XICABehaviorDeciderConfig::set_w_ref(double value) {
  _internal_set_w_ref(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.w_ref)
}

// optional double w_safe = 103 [default = 0.5];
inline bool XICABehaviorDeciderConfig::_internal_has_w_safe() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_w_safe() const {
  return _internal_has_w_safe();
}
inline void XICABehaviorDeciderConfig::clear_w_safe() {
  w_safe_ = 0.5;
  _has_bits_[1] &= ~0x00000008u;
}
inline double XICABehaviorDeciderConfig::_internal_w_safe() const {
  return w_safe_;
}
inline double XICABehaviorDeciderConfig::w_safe() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.w_safe)
  return _internal_w_safe();
}
inline void XICABehaviorDeciderConfig::_internal_set_w_safe(double value) {
  _has_bits_[1] |= 0x00000008u;
  w_safe_ = value;
}
inline void XICABehaviorDeciderConfig::set_w_safe(double value) {
  _internal_set_w_safe(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.w_safe)
}

// optional double w_pred = 104 [default = 0.6];
inline bool XICABehaviorDeciderConfig::_internal_has_w_pred() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_w_pred() const {
  return _internal_has_w_pred();
}
inline void XICABehaviorDeciderConfig::clear_w_pred() {
  w_pred_ = 0.6;
  _has_bits_[1] &= ~0x00000010u;
}
inline double XICABehaviorDeciderConfig::_internal_w_pred() const {
  return w_pred_;
}
inline double XICABehaviorDeciderConfig::w_pred() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.w_pred)
  return _internal_w_pred();
}
inline void XICABehaviorDeciderConfig::_internal_set_w_pred(double value) {
  _has_bits_[1] |= 0x00000010u;
  w_pred_ = value;
}
inline void XICABehaviorDeciderConfig::set_w_pred(double value) {
  _internal_set_w_pred(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.w_pred)
}

// optional double w_cons_act = 105 [default = 0.6];
inline bool XICABehaviorDeciderConfig::_internal_has_w_cons_act() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_w_cons_act() const {
  return _internal_has_w_cons_act();
}
inline void XICABehaviorDeciderConfig::clear_w_cons_act() {
  w_cons_act_ = 0.6;
  _has_bits_[1] &= ~0x00000020u;
}
inline double XICABehaviorDeciderConfig::_internal_w_cons_act() const {
  return w_cons_act_;
}
inline double XICABehaviorDeciderConfig::w_cons_act() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.w_cons_act)
  return _internal_w_cons_act();
}
inline void XICABehaviorDeciderConfig::_internal_set_w_cons_act(double value) {
  _has_bits_[1] |= 0x00000020u;
  w_cons_act_ = value;
}
inline void XICABehaviorDeciderConfig::set_w_cons_act(double value) {
  _internal_set_w_cons_act(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.w_cons_act)
}

// optional double w_cons_his = 106 [default = 0.4];
inline bool XICABehaviorDeciderConfig::_internal_has_w_cons_his() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_w_cons_his() const {
  return _internal_has_w_cons_his();
}
inline void XICABehaviorDeciderConfig::clear_w_cons_his() {
  w_cons_his_ = 0.4;
  _has_bits_[1] &= ~0x00000040u;
}
inline double XICABehaviorDeciderConfig::_internal_w_cons_his() const {
  return w_cons_his_;
}
inline double XICABehaviorDeciderConfig::w_cons_his() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.w_cons_his)
  return _internal_w_cons_his();
}
inline void XICABehaviorDeciderConfig::_internal_set_w_cons_his(double value) {
  _has_bits_[1] |= 0x00000040u;
  w_cons_his_ = value;
}
inline void XICABehaviorDeciderConfig::set_w_cons_his(double value) {
  _internal_set_w_cons_his(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.w_cons_his)
}

// optional bool use_x_ica_behavior_decider = 150 [default = true];
inline bool XICABehaviorDeciderConfig::_internal_has_use_x_ica_behavior_decider() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_use_x_ica_behavior_decider() const {
  return _internal_has_use_x_ica_behavior_decider();
}
inline void XICABehaviorDeciderConfig::clear_use_x_ica_behavior_decider() {
  use_x_ica_behavior_decider_ = true;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool XICABehaviorDeciderConfig::_internal_use_x_ica_behavior_decider() const {
  return use_x_ica_behavior_decider_;
}
inline bool XICABehaviorDeciderConfig::use_x_ica_behavior_decider() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.use_x_ica_behavior_decider)
  return _internal_use_x_ica_behavior_decider();
}
inline void XICABehaviorDeciderConfig::_internal_set_use_x_ica_behavior_decider(bool value) {
  _has_bits_[0] |= 0x40000000u;
  use_x_ica_behavior_decider_ = value;
}
inline void XICABehaviorDeciderConfig::set_use_x_ica_behavior_decider(bool value) {
  _internal_set_use_x_ica_behavior_decider(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.use_x_ica_behavior_decider)
}

// optional bool use_neighbor_back_obs = 151 [default = false];
inline bool XICABehaviorDeciderConfig::_internal_has_use_neighbor_back_obs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_use_neighbor_back_obs() const {
  return _internal_has_use_neighbor_back_obs();
}
inline void XICABehaviorDeciderConfig::clear_use_neighbor_back_obs() {
  use_neighbor_back_obs_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool XICABehaviorDeciderConfig::_internal_use_neighbor_back_obs() const {
  return use_neighbor_back_obs_;
}
inline bool XICABehaviorDeciderConfig::use_neighbor_back_obs() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.use_neighbor_back_obs)
  return _internal_use_neighbor_back_obs();
}
inline void XICABehaviorDeciderConfig::_internal_set_use_neighbor_back_obs(bool value) {
  _has_bits_[0] |= 0x00000004u;
  use_neighbor_back_obs_ = value;
}
inline void XICABehaviorDeciderConfig::set_use_neighbor_back_obs(bool value) {
  _internal_set_use_neighbor_back_obs(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.use_neighbor_back_obs)
}

// optional double lookhead_distance = 152 [default = 60];
inline bool XICABehaviorDeciderConfig::_internal_has_lookhead_distance() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_lookhead_distance() const {
  return _internal_has_lookhead_distance();
}
inline void XICABehaviorDeciderConfig::clear_lookhead_distance() {
  lookhead_distance_ = 60;
  _has_bits_[1] &= ~0x00000080u;
}
inline double XICABehaviorDeciderConfig::_internal_lookhead_distance() const {
  return lookhead_distance_;
}
inline double XICABehaviorDeciderConfig::lookhead_distance() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.lookhead_distance)
  return _internal_lookhead_distance();
}
inline void XICABehaviorDeciderConfig::_internal_set_lookhead_distance(double value) {
  _has_bits_[1] |= 0x00000080u;
  lookhead_distance_ = value;
}
inline void XICABehaviorDeciderConfig::set_lookhead_distance(double value) {
  _internal_set_lookhead_distance(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.lookhead_distance)
}

// optional bool use_virtual_obs = 153 [default = false];
inline bool XICABehaviorDeciderConfig::_internal_has_use_virtual_obs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_use_virtual_obs() const {
  return _internal_has_use_virtual_obs();
}
inline void XICABehaviorDeciderConfig::clear_use_virtual_obs() {
  use_virtual_obs_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool XICABehaviorDeciderConfig::_internal_use_virtual_obs() const {
  return use_virtual_obs_;
}
inline bool XICABehaviorDeciderConfig::use_virtual_obs() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.use_virtual_obs)
  return _internal_use_virtual_obs();
}
inline void XICABehaviorDeciderConfig::_internal_set_use_virtual_obs(bool value) {
  _has_bits_[0] |= 0x00000008u;
  use_virtual_obs_ = value;
}
inline void XICABehaviorDeciderConfig::set_use_virtual_obs(bool value) {
  _internal_set_use_virtual_obs(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.use_virtual_obs)
}

// optional int32 nudge_obstacles_num = 154 [default = 5];
inline bool XICABehaviorDeciderConfig::_internal_has_nudge_obstacles_num() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_nudge_obstacles_num() const {
  return _internal_has_nudge_obstacles_num();
}
inline void XICABehaviorDeciderConfig::clear_nudge_obstacles_num() {
  nudge_obstacles_num_ = 5;
  _has_bits_[1] &= ~0x00000100u;
}
inline int32_t XICABehaviorDeciderConfig::_internal_nudge_obstacles_num() const {
  return nudge_obstacles_num_;
}
inline int32_t XICABehaviorDeciderConfig::nudge_obstacles_num() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.nudge_obstacles_num)
  return _internal_nudge_obstacles_num();
}
inline void XICABehaviorDeciderConfig::_internal_set_nudge_obstacles_num(int32_t value) {
  _has_bits_[1] |= 0x00000100u;
  nudge_obstacles_num_ = value;
}
inline void XICABehaviorDeciderConfig::set_nudge_obstacles_num(int32_t value) {
  _internal_set_nudge_obstacles_num(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.nudge_obstacles_num)
}

// optional int32 curr_lane_obstacles_num = 155 [default = 3];
inline bool XICABehaviorDeciderConfig::_internal_has_curr_lane_obstacles_num() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_curr_lane_obstacles_num() const {
  return _internal_has_curr_lane_obstacles_num();
}
inline void XICABehaviorDeciderConfig::clear_curr_lane_obstacles_num() {
  curr_lane_obstacles_num_ = 3;
  _has_bits_[1] &= ~0x00000200u;
}
inline int32_t XICABehaviorDeciderConfig::_internal_curr_lane_obstacles_num() const {
  return curr_lane_obstacles_num_;
}
inline int32_t XICABehaviorDeciderConfig::curr_lane_obstacles_num() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.curr_lane_obstacles_num)
  return _internal_curr_lane_obstacles_num();
}
inline void XICABehaviorDeciderConfig::_internal_set_curr_lane_obstacles_num(int32_t value) {
  _has_bits_[1] |= 0x00000200u;
  curr_lane_obstacles_num_ = value;
}
inline void XICABehaviorDeciderConfig::set_curr_lane_obstacles_num(int32_t value) {
  _internal_set_curr_lane_obstacles_num(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.curr_lane_obstacles_num)
}

// optional bool always_use_neighbor_obs = 156 [default = false];
inline bool XICABehaviorDeciderConfig::_internal_has_always_use_neighbor_obs() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_always_use_neighbor_obs() const {
  return _internal_has_always_use_neighbor_obs();
}
inline void XICABehaviorDeciderConfig::clear_always_use_neighbor_obs() {
  always_use_neighbor_obs_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool XICABehaviorDeciderConfig::_internal_always_use_neighbor_obs() const {
  return always_use_neighbor_obs_;
}
inline bool XICABehaviorDeciderConfig::always_use_neighbor_obs() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.always_use_neighbor_obs)
  return _internal_always_use_neighbor_obs();
}
inline void XICABehaviorDeciderConfig::_internal_set_always_use_neighbor_obs(bool value) {
  _has_bits_[0] |= 0x00000010u;
  always_use_neighbor_obs_ = value;
}
inline void XICABehaviorDeciderConfig::set_always_use_neighbor_obs(bool value) {
  _internal_set_always_use_neighbor_obs(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.always_use_neighbor_obs)
}

// optional int32 left_obstacles_num = 157 [default = 3];
inline bool XICABehaviorDeciderConfig::_internal_has_left_obstacles_num() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_left_obstacles_num() const {
  return _internal_has_left_obstacles_num();
}
inline void XICABehaviorDeciderConfig::clear_left_obstacles_num() {
  left_obstacles_num_ = 3;
  _has_bits_[1] &= ~0x00000400u;
}
inline int32_t XICABehaviorDeciderConfig::_internal_left_obstacles_num() const {
  return left_obstacles_num_;
}
inline int32_t XICABehaviorDeciderConfig::left_obstacles_num() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.left_obstacles_num)
  return _internal_left_obstacles_num();
}
inline void XICABehaviorDeciderConfig::_internal_set_left_obstacles_num(int32_t value) {
  _has_bits_[1] |= 0x00000400u;
  left_obstacles_num_ = value;
}
inline void XICABehaviorDeciderConfig::set_left_obstacles_num(int32_t value) {
  _internal_set_left_obstacles_num(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.left_obstacles_num)
}

// optional int32 right_obstacles_num = 158 [default = 3];
inline bool XICABehaviorDeciderConfig::_internal_has_right_obstacles_num() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_right_obstacles_num() const {
  return _internal_has_right_obstacles_num();
}
inline void XICABehaviorDeciderConfig::clear_right_obstacles_num() {
  right_obstacles_num_ = 3;
  _has_bits_[1] &= ~0x00000800u;
}
inline int32_t XICABehaviorDeciderConfig::_internal_right_obstacles_num() const {
  return right_obstacles_num_;
}
inline int32_t XICABehaviorDeciderConfig::right_obstacles_num() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.right_obstacles_num)
  return _internal_right_obstacles_num();
}
inline void XICABehaviorDeciderConfig::_internal_set_right_obstacles_num(int32_t value) {
  _has_bits_[1] |= 0x00000800u;
  right_obstacles_num_ = value;
}
inline void XICABehaviorDeciderConfig::set_right_obstacles_num(int32_t value) {
  _internal_set_right_obstacles_num(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.right_obstacles_num)
}

// optional bool is_tree_pre_constructed = 159 [default = false];
inline bool XICABehaviorDeciderConfig::_internal_has_is_tree_pre_constructed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_is_tree_pre_constructed() const {
  return _internal_has_is_tree_pre_constructed();
}
inline void XICABehaviorDeciderConfig::clear_is_tree_pre_constructed() {
  is_tree_pre_constructed_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool XICABehaviorDeciderConfig::_internal_is_tree_pre_constructed() const {
  return is_tree_pre_constructed_;
}
inline bool XICABehaviorDeciderConfig::is_tree_pre_constructed() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.is_tree_pre_constructed)
  return _internal_is_tree_pre_constructed();
}
inline void XICABehaviorDeciderConfig::_internal_set_is_tree_pre_constructed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_tree_pre_constructed_ = value;
}
inline void XICABehaviorDeciderConfig::set_is_tree_pre_constructed(bool value) {
  _internal_set_is_tree_pre_constructed(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.is_tree_pre_constructed)
}

// optional double ego_agent_reward_adjust = 160 [default = 1];
inline bool XICABehaviorDeciderConfig::_internal_has_ego_agent_reward_adjust() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_ego_agent_reward_adjust() const {
  return _internal_has_ego_agent_reward_adjust();
}
inline void XICABehaviorDeciderConfig::clear_ego_agent_reward_adjust() {
  ego_agent_reward_adjust_ = 1;
  _has_bits_[1] &= ~0x00001000u;
}
inline double XICABehaviorDeciderConfig::_internal_ego_agent_reward_adjust() const {
  return ego_agent_reward_adjust_;
}
inline double XICABehaviorDeciderConfig::ego_agent_reward_adjust() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.ego_agent_reward_adjust)
  return _internal_ego_agent_reward_adjust();
}
inline void XICABehaviorDeciderConfig::_internal_set_ego_agent_reward_adjust(double value) {
  _has_bits_[1] |= 0x00001000u;
  ego_agent_reward_adjust_ = value;
}
inline void XICABehaviorDeciderConfig::set_ego_agent_reward_adjust(double value) {
  _internal_set_ego_agent_reward_adjust(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.ego_agent_reward_adjust)
}

// optional double xica_w_eff = 161 [default = 0.3];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_w_eff() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_w_eff() const {
  return _internal_has_xica_w_eff();
}
inline void XICABehaviorDeciderConfig::clear_xica_w_eff() {
  xica_w_eff_ = 0.3;
  _has_bits_[1] &= ~0x00002000u;
}
inline double XICABehaviorDeciderConfig::_internal_xica_w_eff() const {
  return xica_w_eff_;
}
inline double XICABehaviorDeciderConfig::xica_w_eff() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_w_eff)
  return _internal_xica_w_eff();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_w_eff(double value) {
  _has_bits_[1] |= 0x00002000u;
  xica_w_eff_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_w_eff(double value) {
  _internal_set_xica_w_eff(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_w_eff)
}

// optional double xica_w_acc = 162 [default = 0.1];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_w_acc() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_w_acc() const {
  return _internal_has_xica_w_acc();
}
inline void XICABehaviorDeciderConfig::clear_xica_w_acc() {
  xica_w_acc_ = 0.1;
  _has_bits_[1] &= ~0x00004000u;
}
inline double XICABehaviorDeciderConfig::_internal_xica_w_acc() const {
  return xica_w_acc_;
}
inline double XICABehaviorDeciderConfig::xica_w_acc() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_w_acc)
  return _internal_xica_w_acc();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_w_acc(double value) {
  _has_bits_[1] |= 0x00004000u;
  xica_w_acc_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_w_acc(double value) {
  _internal_set_xica_w_acc(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_w_acc)
}

// optional double xica_w_safe = 163 [default = 1];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_w_safe() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_w_safe() const {
  return _internal_has_xica_w_safe();
}
inline void XICABehaviorDeciderConfig::clear_xica_w_safe() {
  xica_w_safe_ = 1;
  _has_bits_[1] &= ~0x00008000u;
}
inline double XICABehaviorDeciderConfig::_internal_xica_w_safe() const {
  return xica_w_safe_;
}
inline double XICABehaviorDeciderConfig::xica_w_safe() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_w_safe)
  return _internal_xica_w_safe();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_w_safe(double value) {
  _has_bits_[1] |= 0x00008000u;
  xica_w_safe_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_w_safe(double value) {
  _internal_set_xica_w_safe(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_w_safe)
}

// optional double xica_w_occ = 164 [default = 0.5];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_w_occ() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_w_occ() const {
  return _internal_has_xica_w_occ();
}
inline void XICABehaviorDeciderConfig::clear_xica_w_occ() {
  xica_w_occ_ = 0.5;
  _has_bits_[1] &= ~0x00010000u;
}
inline double XICABehaviorDeciderConfig::_internal_xica_w_occ() const {
  return xica_w_occ_;
}
inline double XICABehaviorDeciderConfig::xica_w_occ() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_w_occ)
  return _internal_xica_w_occ();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_w_occ(double value) {
  _has_bits_[1] |= 0x00010000u;
  xica_w_occ_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_w_occ(double value) {
  _internal_set_xica_w_occ(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_w_occ)
}

// optional double max_acc_ = 165 [default = 1.3];
inline bool XICABehaviorDeciderConfig::_internal_has_max_acc_() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_max_acc_() const {
  return _internal_has_max_acc_();
}
inline void XICABehaviorDeciderConfig::clear_max_acc_() {
  max_acc__ = 1.3;
  _has_bits_[1] &= ~0x00020000u;
}
inline double XICABehaviorDeciderConfig::_internal_max_acc_() const {
  return max_acc__;
}
inline double XICABehaviorDeciderConfig::max_acc_() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.max_acc_)
  return _internal_max_acc_();
}
inline void XICABehaviorDeciderConfig::_internal_set_max_acc_(double value) {
  _has_bits_[1] |= 0x00020000u;
  max_acc__ = value;
}
inline void XICABehaviorDeciderConfig::set_max_acc_(double value) {
  _internal_set_max_acc_(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.max_acc_)
}

// optional double comfort_acc_ = 166 [default = 0.5];
inline bool XICABehaviorDeciderConfig::_internal_has_comfort_acc_() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_comfort_acc_() const {
  return _internal_has_comfort_acc_();
}
inline void XICABehaviorDeciderConfig::clear_comfort_acc_() {
  comfort_acc__ = 0.5;
  _has_bits_[1] &= ~0x00040000u;
}
inline double XICABehaviorDeciderConfig::_internal_comfort_acc_() const {
  return comfort_acc__;
}
inline double XICABehaviorDeciderConfig::comfort_acc_() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.comfort_acc_)
  return _internal_comfort_acc_();
}
inline void XICABehaviorDeciderConfig::_internal_set_comfort_acc_(double value) {
  _has_bits_[1] |= 0x00040000u;
  comfort_acc__ = value;
}
inline void XICABehaviorDeciderConfig::set_comfort_acc_(double value) {
  _internal_set_comfort_acc_(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.comfort_acc_)
}

// optional double acc_exp_ = 167 [default = 2];
inline bool XICABehaviorDeciderConfig::_internal_has_acc_exp_() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_acc_exp_() const {
  return _internal_has_acc_exp_();
}
inline void XICABehaviorDeciderConfig::clear_acc_exp_() {
  acc_exp__ = 2;
  _has_bits_[1] &= ~0x00080000u;
}
inline double XICABehaviorDeciderConfig::_internal_acc_exp_() const {
  return acc_exp__;
}
inline double XICABehaviorDeciderConfig::acc_exp_() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.acc_exp_)
  return _internal_acc_exp_();
}
inline void XICABehaviorDeciderConfig::_internal_set_acc_exp_(double value) {
  _has_bits_[1] |= 0x00080000u;
  acc_exp__ = value;
}
inline void XICABehaviorDeciderConfig::set_acc_exp_(double value) {
  _internal_set_acc_exp_(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.acc_exp_)
}

// optional double idm_min_dist_ = 168 [default = 2.5];
inline bool XICABehaviorDeciderConfig::_internal_has_idm_min_dist_() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_idm_min_dist_() const {
  return _internal_has_idm_min_dist_();
}
inline void XICABehaviorDeciderConfig::clear_idm_min_dist_() {
  idm_min_dist__ = 2.5;
  _has_bits_[1] &= ~0x00100000u;
}
inline double XICABehaviorDeciderConfig::_internal_idm_min_dist_() const {
  return idm_min_dist__;
}
inline double XICABehaviorDeciderConfig::idm_min_dist_() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.idm_min_dist_)
  return _internal_idm_min_dist_();
}
inline void XICABehaviorDeciderConfig::_internal_set_idm_min_dist_(double value) {
  _has_bits_[1] |= 0x00100000u;
  idm_min_dist__ = value;
}
inline void XICABehaviorDeciderConfig::set_idm_min_dist_(double value) {
  _internal_set_idm_min_dist_(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.idm_min_dist_)
}

// optional double idm_desired_time_ = 169 [default = 0.9];
inline bool XICABehaviorDeciderConfig::_internal_has_idm_desired_time_() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_idm_desired_time_() const {
  return _internal_has_idm_desired_time_();
}
inline void XICABehaviorDeciderConfig::clear_idm_desired_time_() {
  idm_desired_time__ = 0.9;
  _has_bits_[1] &= ~0x00200000u;
}
inline double XICABehaviorDeciderConfig::_internal_idm_desired_time_() const {
  return idm_desired_time__;
}
inline double XICABehaviorDeciderConfig::idm_desired_time_() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.idm_desired_time_)
  return _internal_idm_desired_time_();
}
inline void XICABehaviorDeciderConfig::_internal_set_idm_desired_time_(double value) {
  _has_bits_[1] |= 0x00200000u;
  idm_desired_time__ = value;
}
inline void XICABehaviorDeciderConfig::set_idm_desired_time_(double value) {
  _internal_set_idm_desired_time_(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.idm_desired_time_)
}

// optional double idmepsilon = 170 [default = 1e-05];
inline bool XICABehaviorDeciderConfig::_internal_has_idmepsilon() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_idmepsilon() const {
  return _internal_has_idmepsilon();
}
inline void XICABehaviorDeciderConfig::clear_idmepsilon() {
  idmepsilon_ = 1e-05;
  _has_bits_[1] &= ~0x00400000u;
}
inline double XICABehaviorDeciderConfig::_internal_idmepsilon() const {
  return idmepsilon_;
}
inline double XICABehaviorDeciderConfig::idmepsilon() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.idmepsilon)
  return _internal_idmepsilon();
}
inline void XICABehaviorDeciderConfig::_internal_set_idmepsilon(double value) {
  _has_bits_[1] |= 0x00400000u;
  idmepsilon_ = value;
}
inline void XICABehaviorDeciderConfig::set_idmepsilon(double value) {
  _internal_set_idmepsilon(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.idmepsilon)
}

// optional bool use_ref_pre_construct = 171 [default = true];
inline bool XICABehaviorDeciderConfig::_internal_has_use_ref_pre_construct() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_use_ref_pre_construct() const {
  return _internal_has_use_ref_pre_construct();
}
inline void XICABehaviorDeciderConfig::clear_use_ref_pre_construct() {
  use_ref_pre_construct_ = true;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool XICABehaviorDeciderConfig::_internal_use_ref_pre_construct() const {
  return use_ref_pre_construct_;
}
inline bool XICABehaviorDeciderConfig::use_ref_pre_construct() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.use_ref_pre_construct)
  return _internal_use_ref_pre_construct();
}
inline void XICABehaviorDeciderConfig::_internal_set_use_ref_pre_construct(bool value) {
  _has_bits_[0] |= 0x80000000u;
  use_ref_pre_construct_ = value;
}
inline void XICABehaviorDeciderConfig::set_use_ref_pre_construct(bool value) {
  _internal_set_use_ref_pre_construct(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.use_ref_pre_construct)
}

// optional bool xica_need_preconstruct = 172 [default = true];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_need_preconstruct() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_need_preconstruct() const {
  return _internal_has_xica_need_preconstruct();
}
inline void XICABehaviorDeciderConfig::clear_xica_need_preconstruct() {
  xica_need_preconstruct_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool XICABehaviorDeciderConfig::_internal_xica_need_preconstruct() const {
  return xica_need_preconstruct_;
}
inline bool XICABehaviorDeciderConfig::xica_need_preconstruct() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_need_preconstruct)
  return _internal_xica_need_preconstruct();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_need_preconstruct(bool value) {
  _has_bits_[0] |= 0x00000040u;
  xica_need_preconstruct_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_need_preconstruct(bool value) {
  _internal_set_xica_need_preconstruct(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_need_preconstruct)
}

// optional bool xica_need_ego_idm = 173 [default = true];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_need_ego_idm() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_need_ego_idm() const {
  return _internal_has_xica_need_ego_idm();
}
inline void XICABehaviorDeciderConfig::clear_xica_need_ego_idm() {
  xica_need_ego_idm_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool XICABehaviorDeciderConfig::_internal_xica_need_ego_idm() const {
  return xica_need_ego_idm_;
}
inline bool XICABehaviorDeciderConfig::xica_need_ego_idm() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_need_ego_idm)
  return _internal_xica_need_ego_idm();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_need_ego_idm(bool value) {
  _has_bits_[0] |= 0x00000080u;
  xica_need_ego_idm_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_need_ego_idm(bool value) {
  _internal_set_xica_need_ego_idm(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_need_ego_idm)
}

// optional double occ_bound_max = 174 [default = -1];
inline bool XICABehaviorDeciderConfig::_internal_has_occ_bound_max() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_occ_bound_max() const {
  return _internal_has_occ_bound_max();
}
inline void XICABehaviorDeciderConfig::clear_occ_bound_max() {
  occ_bound_max_ = -1;
  _has_bits_[1] &= ~0x00800000u;
}
inline double XICABehaviorDeciderConfig::_internal_occ_bound_max() const {
  return occ_bound_max_;
}
inline double XICABehaviorDeciderConfig::occ_bound_max() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.occ_bound_max)
  return _internal_occ_bound_max();
}
inline void XICABehaviorDeciderConfig::_internal_set_occ_bound_max(double value) {
  _has_bits_[1] |= 0x00800000u;
  occ_bound_max_ = value;
}
inline void XICABehaviorDeciderConfig::set_occ_bound_max(double value) {
  _internal_set_occ_bound_max(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.occ_bound_max)
}

// optional double xica_w_cons_his = 175 [default = 0.5];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_w_cons_his() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_w_cons_his() const {
  return _internal_has_xica_w_cons_his();
}
inline void XICABehaviorDeciderConfig::clear_xica_w_cons_his() {
  xica_w_cons_his_ = 0.5;
  _has_bits_[1] &= ~0x01000000u;
}
inline double XICABehaviorDeciderConfig::_internal_xica_w_cons_his() const {
  return xica_w_cons_his_;
}
inline double XICABehaviorDeciderConfig::xica_w_cons_his() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_w_cons_his)
  return _internal_xica_w_cons_his();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_w_cons_his(double value) {
  _has_bits_[1] |= 0x01000000u;
  xica_w_cons_his_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_w_cons_his(double value) {
  _internal_set_xica_w_cons_his(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_w_cons_his)
}

// optional double min_decision_delta_t = 176 [default = 0.5];
inline bool XICABehaviorDeciderConfig::_internal_has_min_decision_delta_t() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_min_decision_delta_t() const {
  return _internal_has_min_decision_delta_t();
}
inline void XICABehaviorDeciderConfig::clear_min_decision_delta_t() {
  min_decision_delta_t_ = 0.5;
  _has_bits_[1] &= ~0x02000000u;
}
inline double XICABehaviorDeciderConfig::_internal_min_decision_delta_t() const {
  return min_decision_delta_t_;
}
inline double XICABehaviorDeciderConfig::min_decision_delta_t() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.min_decision_delta_t)
  return _internal_min_decision_delta_t();
}
inline void XICABehaviorDeciderConfig::_internal_set_min_decision_delta_t(double value) {
  _has_bits_[1] |= 0x02000000u;
  min_decision_delta_t_ = value;
}
inline void XICABehaviorDeciderConfig::set_min_decision_delta_t(double value) {
  _internal_set_min_decision_delta_t(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.min_decision_delta_t)
}

// optional double xica_diff_dis_max = 177 [default = 5];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_diff_dis_max() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_diff_dis_max() const {
  return _internal_has_xica_diff_dis_max();
}
inline void XICABehaviorDeciderConfig::clear_xica_diff_dis_max() {
  xica_diff_dis_max_ = 5;
  _has_bits_[1] &= ~0x04000000u;
}
inline double XICABehaviorDeciderConfig::_internal_xica_diff_dis_max() const {
  return xica_diff_dis_max_;
}
inline double XICABehaviorDeciderConfig::xica_diff_dis_max() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_diff_dis_max)
  return _internal_xica_diff_dis_max();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_diff_dis_max(double value) {
  _has_bits_[1] |= 0x04000000u;
  xica_diff_dis_max_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_diff_dis_max(double value) {
  _internal_set_xica_diff_dis_max(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_diff_dis_max)
}

// optional double xica_diff_v_max = 178 [default = 3];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_diff_v_max() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_diff_v_max() const {
  return _internal_has_xica_diff_v_max();
}
inline void XICABehaviorDeciderConfig::clear_xica_diff_v_max() {
  xica_diff_v_max_ = 3;
  _has_bits_[1] &= ~0x08000000u;
}
inline double XICABehaviorDeciderConfig::_internal_xica_diff_v_max() const {
  return xica_diff_v_max_;
}
inline double XICABehaviorDeciderConfig::xica_diff_v_max() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_diff_v_max)
  return _internal_xica_diff_v_max();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_diff_v_max(double value) {
  _has_bits_[1] |= 0x08000000u;
  xica_diff_v_max_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_diff_v_max(double value) {
  _internal_set_xica_diff_v_max(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_diff_v_max)
}

// optional double xica_diff_a_max = 179 [default = 2];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_diff_a_max() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_diff_a_max() const {
  return _internal_has_xica_diff_a_max();
}
inline void XICABehaviorDeciderConfig::clear_xica_diff_a_max() {
  xica_diff_a_max_ = 2;
  _has_bits_[1] &= ~0x10000000u;
}
inline double XICABehaviorDeciderConfig::_internal_xica_diff_a_max() const {
  return xica_diff_a_max_;
}
inline double XICABehaviorDeciderConfig::xica_diff_a_max() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_diff_a_max)
  return _internal_xica_diff_a_max();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_diff_a_max(double value) {
  _has_bits_[1] |= 0x10000000u;
  xica_diff_a_max_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_diff_a_max(double value) {
  _internal_set_xica_diff_a_max(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_diff_a_max)
}

// optional double rel_lat_thresh = 180 [default = 1];
inline bool XICABehaviorDeciderConfig::_internal_has_rel_lat_thresh() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_rel_lat_thresh() const {
  return _internal_has_rel_lat_thresh();
}
inline void XICABehaviorDeciderConfig::clear_rel_lat_thresh() {
  rel_lat_thresh_ = 1;
  _has_bits_[1] &= ~0x20000000u;
}
inline double XICABehaviorDeciderConfig::_internal_rel_lat_thresh() const {
  return rel_lat_thresh_;
}
inline double XICABehaviorDeciderConfig::rel_lat_thresh() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.rel_lat_thresh)
  return _internal_rel_lat_thresh();
}
inline void XICABehaviorDeciderConfig::_internal_set_rel_lat_thresh(double value) {
  _has_bits_[1] |= 0x20000000u;
  rel_lat_thresh_ = value;
}
inline void XICABehaviorDeciderConfig::set_rel_lat_thresh(double value) {
  _internal_set_rel_lat_thresh(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.rel_lat_thresh)
}

// optional double xica_w_refline = 181 [default = 1];
inline bool XICABehaviorDeciderConfig::_internal_has_xica_w_refline() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool XICABehaviorDeciderConfig::has_xica_w_refline() const {
  return _internal_has_xica_w_refline();
}
inline void XICABehaviorDeciderConfig::clear_xica_w_refline() {
  xica_w_refline_ = 1;
  _has_bits_[1] &= ~0x40000000u;
}
inline double XICABehaviorDeciderConfig::_internal_xica_w_refline() const {
  return xica_w_refline_;
}
inline double XICABehaviorDeciderConfig::xica_w_refline() const {
  // @@protoc_insertion_point(field_get:XICABehaviorDeciderConfig.xica_w_refline)
  return _internal_xica_w_refline();
}
inline void XICABehaviorDeciderConfig::_internal_set_xica_w_refline(double value) {
  _has_bits_[1] |= 0x40000000u;
  xica_w_refline_ = value;
}
inline void XICABehaviorDeciderConfig::set_xica_w_refline(double value) {
  _internal_set_xica_w_refline(value);
  // @@protoc_insertion_point(field_set:XICABehaviorDeciderConfig.xica_w_refline)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xpp_5fmcts_5fconfig_2eproto
