<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>apollo::common::math::Box2d::InitCorners (1,445,277 samples, 1.74%)</title><rect x="952.1" y="245" width="20.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="955.11" y="255.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2,687,443 samples, 3.24%)</title><rect x="10.0" y="309" width="38.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >asm..</text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::DecisionType&gt;, true&gt;::_M_incr (1,041,905 samples, 1.26%)</title><rect x="824.1" y="213" width="14.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="827.07" y="223.5" ></text>
</g>
<g >
<title>apollo::common::math::Box2d::InitCorners (1,937,131 samples, 2.33%)</title><rect x="782.8" y="213" width="27.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="785.83" y="223.5" >a..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1,108,674 samples, 1.34%)</title><rect x="247.8" y="197" width="15.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="250.75" y="207.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Expand (31,626,742 samples, 38.11%)</title><rect x="432.8" y="261" width="449.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="435.80" y="271.5" >apollo::BehaviorPlanner::MCTSTree::Expand</text>
</g>
<g >
<title>ret_from_fork (63,734 samples, 0.08%)</title><rect x="1150.2" y="325" width="0.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1153.19" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (993,239 samples, 1.20%)</title><rect x="401.2" y="133" width="14.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="404.18" y="143.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (2,454,371 samples, 2.96%)</title><rect x="306.1" y="101" width="34.9" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="309.13" y="111.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (988,651 samples, 1.19%)</title><rect x="368.4" y="229" width="14.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="371.40" y="239.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,945,192 samples, 2.34%)</title><rect x="507.3" y="117" width="27.7" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="510.33" y="127.5" >s..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="325" width="37.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1154.10" y="335.5" >ent..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::BoundaryCheck (965,411 samples, 1.16%)</title><rect x="896.2" y="245" width="13.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="899.23" y="255.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, false&gt;::_M_head (2,454,371 samples, 2.96%)</title><rect x="306.1" y="37" width="34.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="309.13" y="47.5" >st..</text>
</g>
<g >
<title>cgroup_rstat_updated (963,107 samples, 1.16%)</title><rect x="61.9" y="245" width="13.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="64.93" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;apollo::BehaviorPlanner::MCTSNode*, std::allocator&lt;apollo::BehaviorPlanner::MCTSNode*&gt; &gt;::_M_allocate (1,373,299 samples, 1.65%)</title><rect x="446.5" y="197" width="19.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="449.51" y="207.5" ></text>
</g>
<g >
<title>do_mmap (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="229" width="37.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1154.10" y="239.5" >do_..</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (964,311 samples, 1.16%)</title><rect x="48.2" y="325" width="13.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="51.22" y="335.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::RewardFun (6,559,538 samples, 7.90%)</title><rect x="247.8" y="229" width="93.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="250.75" y="239.5" >apollo::Beh..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::operator= (962,835 samples, 1.16%)</title><rect x="479.8" y="197" width="13.7" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="482.80" y="207.5" ></text>
</g>
<g >
<title>do_vmi_munmap (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="197" width="37.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1154.10" y="207.5" >do_..</text>
</g>
<g >
<title>__hrtimer_run_queues (2,687,443 samples, 3.24%)</title><rect x="10.0" y="245" width="38.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >__h..</text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, false, true&gt;::operator++ (1,067,595 samples, 1.29%)</title><rect x="263.5" y="197" width="15.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="266.52" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (1,945,192 samples, 2.34%)</title><rect x="507.3" y="101" width="27.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="510.33" y="111.5" >_..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,011,588 samples, 1.22%)</title><rect x="972.7" y="197" width="14.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="975.66" y="207.5" ></text>
</g>
<g >
<title>MemcmpInterceptorCommon (1,945,192 samples, 2.34%)</title><rect x="507.3" y="69" width="27.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="510.33" y="79.5" >M..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::Prepuring (6,046,528 samples, 7.29%)</title><rect x="782.8" y="245" width="86.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="785.83" y="255.5" >apollo::Be..</text>
</g>
<g >
<title>std::vector&lt;apollo::BehaviorPlanner::MCTSNode*, std::allocator&lt;apollo::BehaviorPlanner::MCTSNode*&gt; &gt;::push_back (1,373,299 samples, 1.65%)</title><rect x="446.5" y="229" width="19.5" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="449.51" y="239.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="181" width="37.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1154.10" y="191.5" >do_..</text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1,925,935 samples, 2.32%)</title><rect x="1122.8" y="357" width="27.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1125.80" y="367.5" >_..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_M_head (2,454,371 samples, 2.96%)</title><rect x="306.1" y="53" width="34.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="309.13" y="63.5" >st..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (963,530 samples, 1.16%)</title><rect x="593.3" y="165" width="13.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="596.28" y="175.5" ></text>
</g>
<g >
<title>search_binary_handler (46,728 samples, 0.06%)</title><rect x="1189.3" y="213" width="0.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.34" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (993,239 samples, 1.20%)</title><rect x="401.2" y="197" width="14.1" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="404.18" y="207.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (962,521 samples, 1.16%)</title><rect x="631.3" y="117" width="13.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="634.27" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::end (962,601 samples, 1.16%)</title><rect x="796.7" y="197" width="13.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="799.69" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_execve (46,728 samples, 0.06%)</title><rect x="1189.3" y="293" width="0.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1192.34" y="303.5" ></text>
</g>
<g >
<title>mmap64 (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="341" width="37.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1154.10" y="351.5" >mma..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::RewardFun (5,490,960 samples, 6.62%)</title><rect x="354.7" y="261" width="78.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="357.72" y="271.5" >apollo::B..</text>
</g>
<g >
<title>handle_mm_fault (1,001,998 samples, 1.21%)</title><rect x="117.2" y="277" width="14.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="120.24" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleStateDetails, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt; &gt;::operator[] (1,038,485 samples, 1.25%)</title><rect x="923.6" y="229" width="14.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="926.64" y="239.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (988,651 samples, 1.19%)</title><rect x="368.4" y="213" width="14.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="371.40" y="223.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (1,019,255 samples, 1.23%)</title><rect x="131.5" y="325" width="14.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="134.48" y="335.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1,001,998 samples, 1.21%)</title><rect x="117.2" y="325" width="14.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="120.24" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (5,785,561 samples, 6.97%)</title><rect x="576.4" y="181" width="82.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="579.38" y="191.5" >std::__de..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2,104,543 samples, 2.54%)</title><rect x="838.9" y="213" width="29.9" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="841.89" y="223.5" >st..</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, true&gt;::_M_next (962,835 samples, 1.16%)</title><rect x="479.8" y="149" width="13.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="482.80" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (962,454 samples, 1.16%)</title><rect x="341.0" y="213" width="13.7" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="344.03" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,454,371 samples, 2.96%)</title><rect x="306.1" y="197" width="34.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="309.13" y="207.5" >st..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (993,239 samples, 1.20%)</title><rect x="401.2" y="229" width="14.1" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="404.18" y="239.5" ></text>
</g>
<g >
<title>load_elf_binary (810,086 samples, 0.98%)</title><rect x="146.0" y="197" width="11.5" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="148.98" y="207.5" ></text>
</g>
<g >
<title>irqentry_exit (62,466 samples, 0.08%)</title><rect x="1188.4" y="309" width="0.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1191.45" y="319.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleRewardDetails, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt; &gt;::operator[] (2,454,371 samples, 2.96%)</title><rect x="306.1" y="213" width="34.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="309.13" y="223.5" >st..</text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (993,239 samples, 1.20%)</title><rect x="401.2" y="149" width="14.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="404.18" y="159.5" ></text>
</g>
<g >
<title>perf_event_exec (46,728 samples, 0.06%)</title><rect x="1189.3" y="165" width="0.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1192.34" y="175.5" ></text>
</g>
<g >
<title>main (60,273,277 samples, 72.64%)</title><rect x="185.1" y="341" width="857.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="188.07" y="351.5" >main</text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::XICASafetyReward (4,105,167 samples, 4.95%)</title><rect x="247.8" y="213" width="58.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="250.75" y="223.5" >apollo..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::RewardFun (962,454 samples, 1.16%)</title><rect x="341.0" y="245" width="13.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="344.03" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (3,082,873 samples, 3.72%)</title><rect x="716.2" y="101" width="43.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="719.23" y="111.5" >__gn..</text>
</g>
<g >
<title>bool __gnu_cxx::operator!=&lt;apollo::BehaviorPlanner::MCTSNode* const*, std::vector&lt;apollo::BehaviorPlanner::MCTSNode*, std::allocator&lt;apollo::BehaviorPlanner::MCTSNode*&gt; &gt; &gt; (3,440,718 samples, 4.15%)</title><rect x="198.8" y="181" width="49.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="201.82" y="191.5" >bool..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::VehicleState::y (972,867 samples, 1.17%)</title><rect x="493.5" y="197" width="13.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="496.49" y="207.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::ExpandNode (4,892,851 samples, 5.90%)</title><rect x="882.5" y="277" width="69.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="885.53" y="287.5" >apollo:..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::DecisionType&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::DecisionType&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (966,412 samples, 1.16%)</title><rect x="278.7" y="165" width="13.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="281.70" y="175.5" ></text>
</g>
<g >
<title>handle_pte_fault (1,001,998 samples, 1.21%)</title><rect x="117.2" y="245" width="14.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="120.24" y="255.5" ></text>
</g>
<g >
<title>blkcg_maybe_throttle_current (59,051 samples, 0.07%)</title><rect x="1188.4" y="293" width="0.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1191.45" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (993,239 samples, 1.20%)</title><rect x="401.2" y="165" width="14.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="404.18" y="175.5" ></text>
</g>
<g >
<title>apollo::common::math::Vec2d&amp; std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::emplace_back&lt;double, double&gt; (1,445,277 samples, 1.74%)</title><rect x="952.1" y="229" width="20.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="955.11" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (810,086 samples, 0.98%)</title><rect x="146.0" y="341" width="11.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="148.98" y="351.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="117" width="37.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1154.10" y="127.5" >obj..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::StateChange (3,929,267 samples, 4.74%)</title><rect x="882.5" y="261" width="55.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="885.53" y="271.5" >apoll..</text>
</g>
<g >
<title>exec_binprm (810,086 samples, 0.98%)</title><rect x="146.0" y="229" width="11.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="148.98" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1,038,485 samples, 1.25%)</title><rect x="923.6" y="181" width="14.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="926.64" y="191.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::XICASafetyReward (988,651 samples, 1.19%)</title><rect x="368.4" y="245" width="14.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="371.40" y="255.5" ></text>
</g>
<g >
<title>sysvec_reschedule_ipi (62,466 samples, 0.08%)</title><rect x="1188.4" y="325" width="0.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1191.45" y="335.5" ></text>
</g>
<g >
<title>exec_binprm (46,728 samples, 0.06%)</title><rect x="1189.3" y="229" width="0.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1192.34" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_execve (810,086 samples, 0.98%)</title><rect x="146.0" y="293" width="11.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="148.98" y="303.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;char const*&gt;::difference_type std::__distance&lt;char const*&gt; (988,651 samples, 1.19%)</title><rect x="368.4" y="197" width="14.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="371.40" y="207.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::XICAJerkModel (2,000,966 samples, 2.41%)</title><rect x="910.0" y="245" width="28.4" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="912.96" y="255.5" >ap..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleRewardDetails, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt; &gt;::operator[] (962,454 samples, 1.16%)</title><rect x="341.0" y="229" width="13.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="344.03" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1,229,940 samples, 1.48%)</title><rect x="415.3" y="213" width="17.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="418.31" y="223.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (962,949 samples, 1.16%)</title><rect x="810.4" y="213" width="13.7" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="813.38" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; std::__get_helper&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2,454,371 samples, 2.96%)</title><rect x="306.1" y="69" width="34.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="309.13" y="79.5" >st..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleStateDetails, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt; &gt;::operator[] (1,945,192 samples, 2.34%)</title><rect x="507.3" y="197" width="27.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="510.33" y="207.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,945,192 samples, 2.34%)</title><rect x="507.3" y="133" width="27.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="510.33" y="143.5" >s..</text>
</g>
<g >
<title>_dl_map_object (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="357" width="37.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1154.10" y="367.5" >_dl..</text>
</g>
<g >
<title>ret_from_fork_asm (63,734 samples, 0.08%)</title><rect x="1150.2" y="341" width="0.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1153.19" y="351.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleState, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt; &gt;::at (6,797,628 samples, 8.19%)</title><rect x="686.2" y="213" width="96.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="689.17" y="223.5" >std::unorde..</text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (964,311 samples, 1.16%)</title><rect x="48.2" y="309" width="13.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="51.22" y="319.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Backpropagate (10,962,710 samples, 13.21%)</title><rect x="198.8" y="261" width="155.9" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="201.82" y="271.5" >apollo::BehaviorPlan..</text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::construct&lt;apollo::common::math::Vec2d, double, double&gt; (974,530 samples, 1.17%)</title><rect x="782.8" y="165" width="13.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="785.83" y="175.5" ></text>
</g>
<g >
<title>vm_area_dup (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="149" width="37.3" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1154.10" y="159.5" >vm_..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,945,192 samples, 2.34%)</title><rect x="507.3" y="149" width="27.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="510.33" y="159.5" >s..</text>
</g>
<g >
<title>hypot@@GLIBC_2.35 (964,994 samples, 1.16%)</title><rect x="868.8" y="245" width="13.7" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="871.81" y="255.5" ></text>
</g>
<g >
<title>do_anonymous_page (1,001,998 samples, 1.21%)</title><rect x="117.2" y="229" width="14.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="120.24" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, true&gt;::_M_next (1,085,368 samples, 1.31%)</title><rect x="700.8" y="133" width="15.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="703.80" y="143.5" ></text>
</g>
<g >
<title>setup_arg_pages (810,086 samples, 0.98%)</title><rect x="146.0" y="181" width="11.5" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="148.98" y="191.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (46,728 samples, 0.06%)</title><rect x="1189.3" y="245" width="0.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1192.34" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (2,454,371 samples, 2.96%)</title><rect x="306.1" y="181" width="34.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="309.13" y="191.5" >st..</text>
</g>
<g >
<title>__irqentry_text_end (2,345,157 samples, 2.83%)</title><rect x="1075.8" y="341" width="33.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1078.76" y="351.5" >__..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (999,341 samples, 1.20%)</title><rect x="103.0" y="341" width="14.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="106.02" y="351.5" ></text>
</g>
<g >
<title>perf-exec (46,728 samples, 0.06%)</title><rect x="1189.3" y="373" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1192.34" y="383.5" ></text>
</g>
<g >
<title>perf_event_enable_on_exec (46,728 samples, 0.06%)</title><rect x="1189.3" y="149" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1192.34" y="159.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, true&gt; &gt; &gt; &gt; (962,835 samples, 1.16%)</title><rect x="479.8" y="165" width="13.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="482.80" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;apollo::BehaviorPlanner::MCTSNode* const*, std::vector&lt;apollo::BehaviorPlanner::MCTSNode*, std::allocator&lt;apollo::BehaviorPlanner::MCTSNode*&gt; &gt; &gt;::base (984,936 samples, 1.19%)</title><rect x="1028.2" y="261" width="14.0" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1031.16" y="271.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Backpropagate (3,440,718 samples, 4.15%)</title><rect x="198.8" y="213" width="49.0" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="201.82" y="223.5" >apol..</text>
</g>
<g >
<title>std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::_M_check_len (1,445,277 samples, 1.74%)</title><rect x="952.1" y="197" width="20.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="955.11" y="207.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::StateChange (20,346,917 samples, 24.52%)</title><rect x="493.5" y="229" width="289.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="496.49" y="239.5" >apollo::BehaviorPlanner::XICAMCTSFunct..</text>
</g>
<g >
<title>__lsan::CollectIgnoredCb (2,362,866 samples, 2.85%)</title><rect x="1042.2" y="357" width="33.6" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1045.16" y="367.5" >__..</text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (962,941 samples, 1.16%)</title><rect x="645.0" y="165" width="13.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="647.96" y="175.5" ></text>
</g>
<g >
<title>__lsan::ScanRangeForPointers (2,345,157 samples, 2.83%)</title><rect x="1075.8" y="357" width="33.3" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="1078.76" y="367.5" >__..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (46,728 samples, 0.06%)</title><rect x="1189.3" y="277" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1192.34" y="287.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (976,362 samples, 1.18%)</title><rect x="171.2" y="357" width="13.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="174.18" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (46,728 samples, 0.06%)</title><rect x="1189.3" y="341" width="0.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.34" y="351.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::ChooseAction (962,835 samples, 1.16%)</title><rect x="479.8" y="229" width="13.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="482.80" y="239.5" ></text>
</g>
<g >
<title>bprm_execve (46,728 samples, 0.06%)</title><rect x="1189.3" y="261" width="0.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1192.34" y="271.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; &gt;::type&amp; std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2,454,371 samples, 2.96%)</title><rect x="306.1" y="85" width="34.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="309.13" y="95.5" >st..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, PredictionObstacle, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt; &gt;::at (993,239 samples, 1.20%)</title><rect x="401.2" y="245" width="14.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="404.18" y="255.5" ></text>
</g>
<g >
<title>void std::vector&lt;apollo::BehaviorPlanner::MCTSNode*, std::allocator&lt;apollo::BehaviorPlanner::MCTSNode*&gt; &gt;::_M_realloc_insert&lt;apollo::BehaviorPlanner::MCTSNode* const&amp;&gt; (1,373,299 samples, 1.65%)</title><rect x="446.5" y="213" width="19.5" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="449.51" y="223.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple (962,521 samples, 1.16%)</title><rect x="631.3" y="101" width="13.7" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="634.27" y="111.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt;::find (1,935,086 samples, 2.33%)</title><rect x="658.6" y="213" width="27.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="661.65" y="223.5" >s..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleStateDetails, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt; &gt;::operator[] (5,785,561 samples, 6.97%)</title><rect x="576.4" y="197" width="82.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="579.38" y="207.5" >std::unor..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (993,239 samples, 1.20%)</title><rect x="401.2" y="181" width="14.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="404.18" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1,707,906 samples, 2.06%)</title><rect x="607.0" y="165" width="24.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="609.98" y="175.5" >s..</text>
</g>
<g >
<title>ksys_mmap_pgoff (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="261" width="37.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1154.10" y="271.5" >ksy..</text>
</g>
<g >
<title>exc_page_fault (1,001,998 samples, 1.21%)</title><rect x="117.2" y="309" width="14.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="120.24" y="319.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (3,082,873 samples, 3.72%)</title><rect x="716.2" y="117" width="43.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="719.23" y="127.5" >std:..</text>
</g>
<g >
<title>__asan::Allocator::Deallocate (964,139 samples, 1.16%)</title><rect x="75.6" y="341" width="13.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="78.62" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (2,454,371 samples, 2.96%)</title><rect x="306.1" y="165" width="34.9" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="309.13" y="175.5" >st..</text>
</g>
<g >
<title>load_elf_binary (46,728 samples, 0.06%)</title><rect x="1189.3" y="197" width="0.7" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="1192.34" y="207.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1,600,468 samples, 1.93%)</title><rect x="760.1" y="133" width="22.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="763.07" y="143.5" >s..</text>
</g>
<g >
<title>do_user_addr_fault (1,001,998 samples, 1.21%)</title><rect x="117.2" y="293" width="14.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="120.24" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (962,486 samples, 1.16%)</title><rect x="292.4" y="181" width="13.7" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="295.44" y="191.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (3,082,873 samples, 3.72%)</title><rect x="716.2" y="85" width="43.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="719.23" y="95.5" >__in..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1,935,086 samples, 2.33%)</title><rect x="658.6" y="197" width="27.6" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="661.65" y="207.5" >s..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,038,485 samples, 1.25%)</title><rect x="923.6" y="213" width="14.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="926.64" y="223.5" ></text>
</g>
<g >
<title>[unknown] (10,372,406 samples, 12.50%)</title><rect x="10.0" y="357" width="147.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >[unknown]</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::DecisionType&gt;, true&gt;::_M_next (1,041,905 samples, 1.26%)</title><rect x="824.1" y="197" width="14.8" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="827.07" y="207.5" ></text>
</g>
<g >
<title>__strlen_avx2 (962,949 samples, 1.16%)</title><rect x="810.4" y="197" width="13.7" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="813.38" y="207.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::get_max_dkappa (968,775 samples, 1.17%)</title><rect x="562.6" y="197" width="13.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="565.60" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (2,104,543 samples, 2.54%)</title><rect x="838.9" y="197" width="29.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="841.89" y="207.5" >st..</text>
</g>
<g >
<title>do_syscall_64 (46,728 samples, 0.06%)</title><rect x="1189.3" y="325" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.34" y="335.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::BoundaryCheck (2,918,059 samples, 3.52%)</title><rect x="493.5" y="213" width="41.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="496.49" y="223.5" >apo..</text>
</g>
<g >
<title>asm_exc_page_fault (963,107 samples, 1.16%)</title><rect x="61.9" y="325" width="13.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="64.93" y="335.5" ></text>
</g>
<g >
<title>count_memcg_events.constprop.0 (963,107 samples, 1.16%)</title><rect x="61.9" y="261" width="13.7" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="64.93" y="271.5" ></text>
</g>
<g >
<title>apollo::common::math::Box2d::Box2d (1,937,131 samples, 2.33%)</title><rect x="782.8" y="229" width="27.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="785.83" y="239.5" >a..</text>
</g>
<g >
<title>pthread_getspecific@@GLIBC_2.34 (62,466 samples, 0.08%)</title><rect x="1188.4" y="357" width="0.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1191.45" y="367.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (962,521 samples, 1.16%)</title><rect x="631.3" y="133" width="13.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="634.27" y="143.5" ></text>
</g>
<g >
<title>do_user_addr_fault (963,107 samples, 1.16%)</title><rect x="61.9" y="293" width="13.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="64.93" y="303.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;apollo::common::math::Vec2d&gt;::construct&lt;apollo::common::math::Vec2d, double, double&gt; (974,530 samples, 1.17%)</title><rect x="782.8" y="149" width="13.9" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="785.83" y="159.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::_M_get_Tp_allocator (1,445,277 samples, 1.74%)</title><rect x="952.1" y="181" width="20.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="955.11" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (5,197,160 samples, 6.26%)</title><rect x="686.2" y="165" width="73.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="689.17" y="175.5" >std::_Ha..</text>
</g>
<g >
<title>mas_store_prealloc (810,086 samples, 0.98%)</title><rect x="146.0" y="149" width="11.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="148.98" y="159.5" ></text>
</g>
<g >
<title>exc_page_fault (963,107 samples, 1.16%)</title><rect x="61.9" y="309" width="13.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="64.93" y="319.5" ></text>
</g>
<g >
<title>__strpbrk_sse42 (1,019,255 samples, 1.23%)</title><rect x="131.5" y="341" width="14.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="134.48" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (1,229,940 samples, 1.48%)</title><rect x="415.3" y="133" width="17.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="418.31" y="143.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (1,001,998 samples, 1.21%)</title><rect x="117.2" y="197" width="14.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="120.24" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (963,530 samples, 1.16%)</title><rect x="593.3" y="133" width="13.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="596.28" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (963,584 samples, 1.16%)</title><rect x="938.4" y="245" width="13.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="941.41" y="255.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (2,454,371 samples, 2.96%)</title><rect x="306.1" y="149" width="34.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="309.13" y="159.5" >vo..</text>
</g>
<g >
<title>__cosf_fma (979,397 samples, 1.18%)</title><rect x="548.7" y="197" width="13.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="551.67" y="207.5" ></text>
</g>
<g >
<title>bprm_execve (810,086 samples, 0.98%)</title><rect x="146.0" y="261" width="11.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="148.98" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6,797,628 samples, 8.19%)</title><rect x="686.2" y="181" width="96.6" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="689.17" y="191.5" >std::_Hasht..</text>
</g>
<g >
<title>__mem_cgroup_charge (1,001,998 samples, 1.21%)</title><rect x="117.2" y="213" width="14.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="120.24" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (962,521 samples, 1.16%)</title><rect x="631.3" y="165" width="13.7" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="634.27" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (1,229,940 samples, 1.48%)</title><rect x="415.3" y="181" width="17.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="418.31" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="309" width="37.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1154.10" y="319.5" >do_..</text>
</g>
<g >
<title>__count_memcg_events (1,001,998 samples, 1.21%)</title><rect x="117.2" y="181" width="14.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="120.24" y="191.5" ></text>
</g>
<g >
<title>handle_mm_fault (963,107 samples, 1.16%)</title><rect x="61.9" y="277" width="13.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="64.93" y="287.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (810,086 samples, 0.98%)</title><rect x="146.0" y="245" width="11.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="148.98" y="255.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Expand (7,349,716 samples, 8.86%)</title><rect x="882.5" y="293" width="104.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="885.53" y="303.5" >apollo::Beha..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::VehicleState::y (962,477 samples, 1.16%)</title><rect x="354.7" y="245" width="13.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="357.72" y="255.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Backpropagate (3,440,718 samples, 4.15%)</title><rect x="198.8" y="229" width="49.0" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="201.82" y="239.5" >apol..</text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;&amp;&amp; std::forward&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; &gt; (1,038,485 samples, 1.25%)</title><rect x="923.6" y="165" width="14.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="926.64" y="175.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt;::operator= (962,835 samples, 1.16%)</title><rect x="479.8" y="213" width="13.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="482.80" y="223.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Backpropagate (3,440,718 samples, 4.15%)</title><rect x="198.8" y="197" width="49.0" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="201.82" y="207.5" >apol..</text>
</g>
<g >
<title>apollo::common::math::Vec2d&amp; std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::emplace_back&lt;double, double&gt; (974,530 samples, 1.17%)</title><rect x="782.8" y="197" width="13.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="785.83" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::DecisionType&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (966,412 samples, 1.16%)</title><rect x="278.7" y="149" width="13.7" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="281.70" y="159.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (2,687,443 samples, 3.24%)</title><rect x="10.0" y="261" width="38.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >hrt..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (962,763 samples, 1.16%)</title><rect x="1109.1" y="357" width="13.7" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1112.11" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2,454,371 samples, 2.96%)</title><rect x="306.1" y="117" width="34.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="309.13" y="127.5" >st..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Backpropagate (16,453,670 samples, 19.83%)</title><rect x="198.8" y="277" width="234.0" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="201.82" y="287.5" >apollo::BehaviorPlanner::MCTSTr..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Select (3,875,808 samples, 4.67%)</title><rect x="987.0" y="293" width="55.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="990.05" y="303.5" >apoll..</text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (2,454,371 samples, 2.96%)</title><rect x="306.1" y="133" width="34.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="309.13" y="143.5" >vo..</text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (2,120,309 samples, 2.56%)</title><rect x="729.9" y="69" width="30.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="732.92" y="79.5" >__..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (964,757 samples, 1.16%)</title><rect x="672.4" y="181" width="13.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="675.45" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,945,192 samples, 2.34%)</title><rect x="507.3" y="181" width="27.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="510.33" y="191.5" >s..</text>
</g>
<g >
<title>x64_sys_call (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="293" width="37.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1154.10" y="303.5" >x64..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleRewardDetails, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt; &gt;::operator[] (1,229,940 samples, 1.48%)</title><rect x="415.3" y="245" width="17.5" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="418.31" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (962,949 samples, 1.16%)</title><rect x="810.4" y="229" width="13.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="813.38" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,028,919 samples, 1.24%)</title><rect x="686.2" y="133" width="14.6" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="689.17" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (962,521 samples, 1.16%)</title><rect x="631.3" y="149" width="13.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="634.27" y="159.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (810,086 samples, 0.98%)</title><rect x="146.0" y="277" width="11.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="148.98" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (810,086 samples, 0.98%)</title><rect x="146.0" y="325" width="11.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="148.98" y="335.5" ></text>
</g>
<g >
<title>mmap_region (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="213" width="37.3" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1154.10" y="223.5" >mma..</text>
</g>
<g >
<title>__sanitizer::internal_memset (1,001,998 samples, 1.21%)</title><rect x="117.2" y="341" width="14.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="120.24" y="351.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::VehicleState::y (965,411 samples, 1.16%)</title><rect x="896.2" y="229" width="13.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="899.23" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt;::unordered_map (963,584 samples, 1.16%)</title><rect x="938.4" y="261" width="13.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="941.41" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (1,229,940 samples, 1.48%)</title><rect x="415.3" y="197" width="17.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="418.31" y="207.5" ></text>
</g>
<g >
<title>void std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::_M_realloc_insert&lt;double, double&gt; (974,530 samples, 1.17%)</title><rect x="782.8" y="181" width="13.9" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="785.83" y="191.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::Planner::MakeDecision (60,273,277 samples, 72.64%)</title><rect x="185.1" y="325" width="857.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="188.07" y="335.5" >apollo::BehaviorPlanner::Planner::MakeDecision</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6,797,628 samples, 8.19%)</title><rect x="686.2" y="197" width="96.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="689.17" y="207.5" >std::__deta..</text>
</g>
<g >
<title>VehicleExecutab (82,934,124 samples, 99.94%)</title><rect x="10.0" y="373" width="1179.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >VehicleExecutab</text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::ExpandNode (22,277,718 samples, 26.85%)</title><rect x="466.0" y="245" width="316.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="469.04" y="255.5" >apollo::BehaviorPlanner::XICAMCTSFunction:..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, PredictionObstacle, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt; &gt;::at (1,011,588 samples, 1.22%)</title><rect x="972.7" y="261" width="14.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="975.66" y="271.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSNode::SelectBestChild (2,911,691 samples, 3.51%)</title><rect x="1000.8" y="277" width="41.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1003.76" y="287.5" >apo..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::DecisionType, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::DecisionType&gt; &gt; &gt;::at (966,412 samples, 1.16%)</title><rect x="278.7" y="197" width="13.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="281.70" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,011,588 samples, 1.22%)</title><rect x="972.7" y="213" width="14.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="975.66" y="223.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (966,412 samples, 1.16%)</title><rect x="278.7" y="133" width="13.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="281.70" y="143.5" ></text>
</g>
<g >
<title>apollo::common::math::Box2d::Box2d (1,445,277 samples, 1.74%)</title><rect x="952.1" y="261" width="20.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="955.11" y="271.5" ></text>
</g>
<g >
<title>begin_new_exec (46,728 samples, 0.06%)</title><rect x="1189.3" y="181" width="0.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1192.34" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (1,229,940 samples, 1.48%)</title><rect x="415.3" y="149" width="17.5" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="418.31" y="159.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1,316,653 samples, 1.59%)</title><rect x="382.5" y="245" width="18.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="385.46" y="255.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::UctSearch (60,273,277 samples, 72.64%)</title><rect x="185.1" y="309" width="857.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="188.07" y="319.5" >apollo::BehaviorPlanner::MCTSTree::UctSearch</text>
</g>
<g >
<title>__sanitizer::internal_clone (63,734 samples, 0.08%)</title><rect x="1150.2" y="357" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1153.19" y="367.5" ></text>
</g>
<g >
<title>__split_vma (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="165" width="37.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1154.10" y="175.5" >__s..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1,011,588 samples, 1.22%)</title><rect x="972.7" y="245" width="14.3" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="975.66" y="255.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (2,687,443 samples, 3.24%)</title><rect x="10.0" y="277" width="38.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >__s..</text>
</g>
<g >
<title>__interceptor_memcmp (1,945,192 samples, 2.34%)</title><rect x="507.3" y="85" width="27.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="510.33" y="95.5" >_..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (1,229,940 samples, 1.48%)</title><rect x="415.3" y="165" width="17.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="418.31" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1,011,588 samples, 1.22%)</title><rect x="972.7" y="229" width="14.3" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="975.66" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1,011,588 samples, 1.22%)</title><rect x="972.7" y="181" width="14.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="975.66" y="191.5" ></text>
</g>
<g >
<title>void std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::_M_realloc_insert&lt;double, double&gt; (1,445,277 samples, 1.74%)</title><rect x="952.1" y="213" width="20.6" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="955.11" y="223.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (963,107 samples, 1.16%)</title><rect x="61.9" y="341" width="13.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="64.93" y="351.5" ></text>
</g>
<g >
<title>[unknown] (3,651,754 samples, 4.40%)</title><rect x="10.0" y="341" width="51.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >[unkn..</text>
</g>
<g >
<title>search_binary_handler (810,086 samples, 0.98%)</title><rect x="146.0" y="213" width="11.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="148.98" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (993,239 samples, 1.20%)</title><rect x="401.2" y="213" width="14.1" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="404.18" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,600,468 samples, 1.93%)</title><rect x="760.1" y="165" width="22.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="763.07" y="175.5" >s..</text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::DecisionType&gt;, false, true&gt;::operator++ (1,041,905 samples, 1.26%)</title><rect x="824.1" y="229" width="14.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="827.07" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,945,192 samples, 2.34%)</title><rect x="507.3" y="165" width="27.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="510.33" y="175.5" >s..</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (2,687,443 samples, 3.24%)</title><rect x="10.0" y="293" width="38.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >sys..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleState, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt; &gt;::find (962,486 samples, 1.16%)</title><rect x="292.4" y="197" width="13.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="295.44" y="207.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (962,515 samples, 1.16%)</title><rect x="157.5" y="357" width="13.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="160.50" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (3,082,873 samples, 3.72%)</title><rect x="716.2" y="133" width="43.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="719.23" y="143.5" >std:..</text>
</g>
<g >
<title>std::_Hash_bytes (966,412 samples, 1.16%)</title><rect x="278.7" y="117" width="13.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="281.70" y="127.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleState, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt; &gt;::find (2,104,543 samples, 2.54%)</title><rect x="838.9" y="229" width="29.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="841.89" y="239.5" >st..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (963,530 samples, 1.16%)</title><rect x="593.3" y="149" width="13.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="596.28" y="159.5" ></text>
</g>
<g >
<title>[unknown] (46,728 samples, 0.06%)</title><rect x="1189.3" y="357" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.34" y="367.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::XICAJerkModel (8,696,144 samples, 10.48%)</title><rect x="535.0" y="213" width="123.6" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="537.99" y="223.5" >apollo::Behavio..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::DecisionType&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::DecisionType&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (966,412 samples, 1.16%)</title><rect x="278.7" y="181" width="13.7" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="281.70" y="191.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt; (962,835 samples, 1.16%)</title><rect x="479.8" y="181" width="13.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="482.80" y="191.5" ></text>
</g>
<g >
<title>__ieee754_log_fma (964,117 samples, 1.16%)</title><rect x="987.0" y="277" width="13.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="990.05" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,001,998 samples, 1.21%)</title><rect x="117.2" y="261" width="14.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="120.24" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="277" width="37.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1154.10" y="287.5" >__x..</text>
</g>
<g >
<title>__asan::PoisonShadow (962,726 samples, 1.16%)</title><rect x="89.3" y="341" width="13.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="92.33" y="351.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSNode::AddChild (1,373,299 samples, 1.65%)</title><rect x="446.5" y="245" width="19.5" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="449.51" y="255.5" ></text>
</g>
<g >
<title>expand_stack_locked (810,086 samples, 0.98%)</title><rect x="146.0" y="165" width="11.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="148.98" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5,197,160 samples, 6.26%)</title><rect x="686.2" y="149" width="73.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="689.17" y="159.5" >std::_Ha..</text>
</g>
<g >
<title>vm_mmap_pgoff (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="245" width="37.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1154.10" y="255.5" >vm_..</text>
</g>
<g >
<title>__libc_start_call_main (60,273,277 samples, 72.64%)</title><rect x="185.1" y="357" width="857.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="188.07" y="367.5" >__libc_start_call_main</text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::Prepuring (2,456,865 samples, 2.96%)</title><rect x="952.1" y="277" width="34.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="955.11" y="287.5" >ap..</text>
</g>
<g >
<title>kmem_cache_alloc (2,626,643 samples, 3.17%)</title><rect x="1151.1" y="133" width="37.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1154.10" y="143.5" >kme..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::DefaultPolicy (48,080,412 samples, 57.94%)</title><rect x="198.8" y="293" width="683.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="201.82" y="303.5" >apollo::BehaviorPlanner::MCTSTree::DefaultPolicy</text>
</g>
<g >
<title>cgroup_rstat_updated (1,001,998 samples, 1.21%)</title><rect x="117.2" y="165" width="14.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="120.24" y="175.5" ></text>
</g>
<g >
<title>calculate_sigpending (60,382 samples, 0.07%)</title><rect x="1150.2" y="309" width="0.8" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1153.19" y="319.5" ></text>
</g>
<g >
<title>all (82,980,852 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>x64_sys_call (46,728 samples, 0.06%)</title><rect x="1189.3" y="309" width="0.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1192.34" y="319.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (2,687,443 samples, 3.24%)</title><rect x="10.0" y="325" width="38.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >_dl..</text>
</g>
<g >
<title>operator new (1,229,940 samples, 1.48%)</title><rect x="415.3" y="117" width="17.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="418.31" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,229,940 samples, 1.48%)</title><rect x="415.3" y="229" width="17.5" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="418.31" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1,038,485 samples, 1.25%)</title><rect x="923.6" y="197" width="14.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="926.64" y="207.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Backpropagate (10,000,256 samples, 12.05%)</title><rect x="198.8" y="245" width="142.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="201.82" y="255.5" >apollo::BehaviorPl..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;apollo::BehaviorPlanner::MCTSNode*&gt; &gt;::allocate (1,373,299 samples, 1.65%)</title><rect x="446.5" y="181" width="19.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="449.51" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,600,468 samples, 1.93%)</title><rect x="760.1" y="149" width="22.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="763.07" y="159.5" >s..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Rollout (31,626,742 samples, 38.11%)</title><rect x="432.8" y="277" width="449.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="435.80" y="287.5" >apollo::BehaviorPlanner::MCTSTree::Rollout</text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (62,466 samples, 0.08%)</title><rect x="1188.4" y="341" width="0.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1191.45" y="351.5" ></text>
</g>
<g >
<title>x64_sys_call (810,086 samples, 0.98%)</title><rect x="146.0" y="309" width="11.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="148.98" y="319.5" ></text>
</g>
</g>
</svg>
