<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="550.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>alloc_pages_mpol (5,361,669 samples, 1.01%)</title><rect x="590.0" y="309" width="11.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="592.98" y="319.5" ></text>
</g>
<g >
<title>apollo::common::math::Box2d::InitCorners (4,022,975 samples, 0.76%)</title><rect x="411.1" y="325" width="8.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="414.06" y="335.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1,205,110 samples, 0.23%)</title><rect x="1074.8" y="197" width="2.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1077.77" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt; &gt; &gt;::_M_range_check (1,316,743 samples, 0.25%)</title><rect x="336.1" y="309" width="2.9" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="339.09" y="319.5" ></text>
</g>
<g >
<title>do_user_addr_fault (2,861,704 samples, 0.54%)</title><rect x="132.7" y="405" width="6.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="135.71" y="415.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1,328,056 samples, 0.25%)</title><rect x="369.2" y="229" width="2.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="372.17" y="239.5" ></text>
</g>
<g >
<title>folio_remove_rmap_ptes (1,145,808 samples, 0.22%)</title><rect x="1072.2" y="229" width="2.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1075.23" y="239.5" ></text>
</g>
<g >
<title>VehicleExecutab (531,937,565 samples, 99.98%)</title><rect x="10.0" y="485" width="1179.7" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >VehicleExecutab</text>
</g>
<g >
<title>tlb_batch_pages_flush (1,205,110 samples, 0.23%)</title><rect x="1074.8" y="213" width="2.6" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1077.77" y="223.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memset (9,316,042 samples, 1.75%)</title><rect x="616.7" y="469" width="20.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="619.72" y="479.5" ></text>
</g>
<g >
<title>dwarf_lookup_pc (1,339,462 samples, 0.25%)</title><rect x="701.3" y="469" width="3.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="704.29" y="479.5" ></text>
</g>
<g >
<title>arch_scale_freq_tick (1,340,600 samples, 0.25%)</title><rect x="1023.4" y="309" width="3.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1026.40" y="319.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;apollo::BehaviorPlanner::TreeNodePool, std::allocator&lt;apollo::BehaviorPlanner::TreeNodePool&gt;,  (3,962,687 samples, 0.74%)</title><rect x="456.8" y="229" width="8.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="459.84" y="239.5" ></text>
</g>
<g >
<title>main (71,633,943 samples, 13.46%)</title><rect x="306.8" y="453" width="158.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="309.76" y="463.5" >main</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_cget (1,312,170 samples, 0.25%)</title><rect x="315.6" y="277" width="2.9" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="318.58" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (5,295,255 samples, 1.00%)</title><rect x="1011.7" y="389" width="11.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1014.66" y="399.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (7,080,586 samples, 1.33%)</title><rect x="1061.7" y="261" width="15.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1064.74" y="271.5" ></text>
</g>
<g >
<title>sched_clock (1,319,828 samples, 0.25%)</title><rect x="657.0" y="309" width="2.9" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="659.95" y="319.5" ></text>
</g>
<g >
<title>exit_mmap (8,335,578 samples, 1.57%)</title><rect x="1059.0" y="325" width="18.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1061.95" y="335.5" ></text>
</g>
<g >
<title>get_page_from_freelist (5,361,669 samples, 1.01%)</title><rect x="590.0" y="277" width="11.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="592.98" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (1,323,913 samples, 0.25%)</title><rect x="459.8" y="53" width="2.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="462.76" y="63.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (1,323,301 samples, 0.25%)</title><rect x="680.5" y="293" width="3.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="683.53" y="303.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (1,320,361 samples, 0.25%)</title><rect x="654.0" y="277" width="3.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="657.03" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, double&gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_deallocate (1,321,659 samples, 0.25%)</title><rect x="462.7" y="117" width="2.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="465.70" y="127.5" ></text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (1,336,165 samples, 0.25%)</title><rect x="177.4" y="245" width="3.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="180.43" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (7,876,140 samples, 1.48%)</title><rect x="496.5" y="389" width="17.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="499.54" y="399.5" ></text>
</g>
<g >
<title>operator new (1,327,061 samples, 0.25%)</title><rect x="417.0" y="229" width="3.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="420.04" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1,319,230 samples, 0.25%)</title><rect x="318.5" y="341" width="2.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="321.49" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (8,335,578 samples, 1.57%)</title><rect x="1059.0" y="453" width="18.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1061.95" y="463.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (2,648,399 samples, 0.50%)</title><rect x="662.8" y="325" width="5.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="665.85" y="335.5" ></text>
</g>
<g >
<title>schedule (1,319,828 samples, 0.25%)</title><rect x="657.0" y="373" width="2.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="659.95" y="383.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1,330,807 samples, 0.25%)</title><rect x="151.1" y="405" width="2.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="154.06" y="415.5" ></text>
</g>
<g >
<title>rcu_do_batch (1,332,646 samples, 0.25%)</title><rect x="96.9" y="309" width="2.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="99.85" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::_M_check_len (1,293,708 samples, 0.24%)</title><rect x="429.1" y="309" width="2.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="432.05" y="319.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;apollo::BehaviorPlanner::MCTSTree&gt;::destroy&lt;apollo::BehaviorPlanner::MCTSTree&gt; (3,962,687 samples, 0.74%)</title><rect x="456.8" y="325" width="8.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="459.84" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4,369,054 samples, 0.82%)</title><rect x="347.0" y="277" width="9.7" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="349.99" y="287.5" ></text>
</g>
<g >
<title>rcu_core_si (1,332,646 samples, 0.25%)</title><rect x="96.9" y="341" width="2.9" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="99.85" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2,607,388 samples, 0.49%)</title><rect x="423.3" y="309" width="5.8" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="426.27" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt; &gt;::allocate (1,279,561 samples, 0.24%)</title><rect x="366.3" y="229" width="2.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="369.34" y="239.5" ></text>
</g>
<g >
<title>perf_event_mmap_event (1,339,226 samples, 0.25%)</title><rect x="26.0" y="277" width="2.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="28.97" y="287.5" ></text>
</g>
<g >
<title>sync_regs (4,013,503 samples, 0.75%)</title><rect x="607.8" y="453" width="8.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="610.82" y="463.5" ></text>
</g>
<g >
<title>exc_page_fault (1,332,608 samples, 0.25%)</title><rect x="205.1" y="421" width="3.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="208.10" y="431.5" ></text>
</g>
<g >
<title>rcu_core_si (2,681,366 samples, 0.50%)</title><rect x="1032.3" y="373" width="6.0" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1035.32" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt;::find (1,285,397 samples, 0.24%)</title><rect x="383.8" y="325" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="386.76" y="335.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,339,194 samples, 0.25%)</title><rect x="1035.3" y="309" width="3.0" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1038.29" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,333,706 samples, 0.25%)</title><rect x="431.9" y="325" width="3.0" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="434.92" y="335.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (7,973,461 samples, 1.50%)</title><rect x="668.7" y="325" width="17.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="671.72" y="335.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1,254,992 samples, 0.24%)</title><rect x="1059.0" y="277" width="2.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1061.95" y="287.5" ></text>
</g>
<g >
<title>apollo::common::math::Vec2d&amp; std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::emplace_back&lt;double, double&gt; (2,618,684 samples, 0.49%)</title><rect x="414.2" y="309" width="5.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="417.18" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (1,328,056 samples, 0.25%)</title><rect x="369.2" y="197" width="2.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="372.17" y="207.5" ></text>
</g>
<g >
<title>folio_batch_move_lru (4,867,848 samples, 0.91%)</title><rect x="643.2" y="293" width="10.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="646.23" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,319,828 samples, 0.25%)</title><rect x="657.0" y="437" width="2.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="659.95" y="447.5" ></text>
</g>
<g >
<title>handle_softirqs (1,332,646 samples, 0.25%)</title><rect x="96.9" y="357" width="2.9" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="99.85" y="367.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::Prepuring (8,111,264 samples, 1.52%)</title><rect x="411.1" y="357" width="18.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="414.06" y="367.5" ></text>
</g>
<g >
<title>handle_pte_fault (5,295,255 samples, 1.00%)</title><rect x="1011.7" y="373" width="11.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1014.66" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::internal_munmap (6,188,209 samples, 1.16%)</title><rect x="643.2" y="469" width="13.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="646.23" y="479.5" ></text>
</g>
<g >
<title>do_anonymous_page (5,295,255 samples, 1.00%)</title><rect x="1011.7" y="357" width="11.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1014.66" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleState, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt; &gt;::at (1,335,763 samples, 0.25%)</title><rect x="434.9" y="373" width="2.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="437.88" y="383.5" ></text>
</g>
<g >
<title>tick_sched_handle (4,020,523 samples, 0.76%)</title><rect x="1023.4" y="357" width="8.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1026.40" y="367.5" ></text>
</g>
<g >
<title>exc_page_fault (7,876,140 samples, 1.48%)</title><rect x="496.5" y="437" width="17.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="499.54" y="447.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;&gt; (3,142,677 samples, 0.59%)</title><rect x="329.1" y="293" width="7.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="332.12" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::allocate (1,327,061 samples, 0.25%)</title><rect x="417.0" y="261" width="3.0" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="420.04" y="271.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (10,621,860 samples, 2.00%)</title><rect x="662.8" y="341" width="23.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="665.85" y="351.5" >_..</text>
</g>
<g >
<title>mt_find (1,337,067 samples, 0.25%)</title><rect x="695.4" y="373" width="2.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="698.35" y="383.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (116,436 samples, 0.02%)</title><rect x="1189.7" y="357" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1192.74" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,285,397 samples, 0.24%)</title><rect x="383.8" y="277" width="2.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="386.76" y="287.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Select (5,290,179 samples, 0.99%)</title><rect x="437.8" y="405" width="11.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="440.84" y="415.5" ></text>
</g>
<g >
<title>handle_pte_fault (10,633,891 samples, 2.00%)</title><rect x="581.3" y="373" width="23.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="584.27" y="383.5" >h..</text>
</g>
<g >
<title>mmap_region (2,053,382 samples, 0.39%)</title><rect x="216.7" y="229" width="4.6" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="219.70" y="239.5" ></text>
</g>
<g >
<title>exec_binprm (2,053,382 samples, 0.39%)</title><rect x="216.7" y="341" width="4.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="219.70" y="351.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (6,701,889 samples, 1.26%)</title><rect x="1023.4" y="453" width="14.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1026.40" y="463.5" ></text>
</g>
<g >
<title>exc_page_fault (15,993,478 samples, 3.01%)</title><rect x="662.8" y="437" width="35.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="665.85" y="447.5" >exc..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8,335,578 samples, 1.57%)</title><rect x="1059.0" y="469" width="18.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1061.95" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (116,436 samples, 0.02%)</title><rect x="1189.7" y="453" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.74" y="463.5" ></text>
</g>
<g >
<title>zap_pte_range (2,350,918 samples, 0.44%)</title><rect x="1072.2" y="245" width="5.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1075.23" y="255.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (3,929,056 samples, 0.74%)</title><rect x="581.3" y="325" width="8.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="584.27" y="335.5" ></text>
</g>
<g >
<title>sqrt@plt (1,304,934 samples, 0.25%)</title><rect x="446.7" y="389" width="2.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="449.68" y="399.5" ></text>
</g>
<g >
<title>folio_batch_move_lru (1,343,166 samples, 0.25%)</title><rect x="601.9" y="309" width="3.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="604.88" y="319.5" ></text>
</g>
<g >
<title>ksys_write (2,650,184 samples, 0.50%)</title><rect x="174.5" y="373" width="5.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="177.51" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, PredictionObstacle, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt; &gt;::at (1,312,170 samples, 0.25%)</title><rect x="315.6" y="357" width="2.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="318.58" y="367.5" ></text>
</g>
<g >
<title>do_anonymous_page (2,642,046 samples, 0.50%)</title><rect x="508.1" y="357" width="5.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="511.15" y="367.5" ></text>
</g>
<g >
<title>rmqueue (4,327,526 samples, 0.81%)</title><rect x="117.4" y="245" width="9.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="120.36" y="255.5" ></text>
</g>
<g >
<title>handle_mm_fault (7,876,140 samples, 1.48%)</title><rect x="496.5" y="405" width="17.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="499.54" y="415.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (1,343,166 samples, 0.25%)</title><rect x="601.9" y="261" width="3.0" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="604.88" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,313,739 samples, 0.25%)</title><rect x="378.0" y="261" width="2.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="380.99" y="271.5" ></text>
</g>
<g >
<title>lru_add_drain_cpu (4,867,848 samples, 0.91%)</title><rect x="643.2" y="309" width="10.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="646.23" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::_M_allocate (1,327,061 samples, 0.25%)</title><rect x="417.0" y="277" width="3.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="420.04" y="287.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1,308,128 samples, 0.25%)</title><rect x="303.9" y="453" width="2.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="306.86" y="463.5" ></text>
</g>
<g >
<title>do_user_addr_fault (7,876,140 samples, 1.48%)</title><rect x="496.5" y="421" width="17.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="499.54" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, true&gt;::_Node_iterator_base (1,324,464 samples, 0.25%)</title><rect x="408.1" y="277" width="3.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="411.12" y="287.5" ></text>
</g>
<g >
<title>native_read_msr (1,340,600 samples, 0.25%)</title><rect x="1023.4" y="293" width="3.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1026.40" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,053,382 samples, 0.39%)</title><rect x="216.7" y="437" width="4.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="219.70" y="447.5" ></text>
</g>
<g >
<title>handle_pte_fault (1,535,106 samples, 0.29%)</title><rect x="135.7" y="357" width="3.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="138.65" y="367.5" ></text>
</g>
<g >
<title>free_unref_page_list (1,205,110 samples, 0.23%)</title><rect x="1074.8" y="165" width="2.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1077.77" y="175.5" ></text>
</g>
<g >
<title>read_referenced_name (2,663,920 samples, 0.50%)</title><rect x="105.7" y="437" width="5.9" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="108.72" y="447.5" ></text>
</g>
<g >
<title>perf_event_mmap (2,674,124 samples, 0.50%)</title><rect x="26.0" y="293" width="5.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="28.97" y="303.5" ></text>
</g>
<g >
<title>file_path (2,053,382 samples, 0.39%)</title><rect x="216.7" y="181" width="4.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="219.70" y="191.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::StateChange (32,487,040 samples, 6.11%)</title><rect x="339.0" y="341" width="72.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="342.01" y="351.5" >apollo::..</text>
</g>
<g >
<title>x64_sys_call (8,335,578 samples, 1.57%)</title><rect x="1059.0" y="437" width="18.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1061.95" y="447.5" ></text>
</g>
<g >
<title>read_uint32 (1,323,380 samples, 0.25%)</title><rect x="111.6" y="437" width="3.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="114.63" y="447.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Expand (48,532,257 samples, 9.12%)</title><rect x="321.4" y="373" width="107.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="324.42" y="383.5" >apollo::Behav..</text>
</g>
<g >
<title>__x64_sys_exit_group (8,335,578 samples, 1.57%)</title><rect x="1059.0" y="421" width="18.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1061.95" y="431.5" ></text>
</g>
<g >
<title>rmqueue_bulk (1,340,944 samples, 0.25%)</title><rect x="598.9" y="229" width="3.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="601.90" y="239.5" ></text>
</g>
<g >
<title>vm_area_free_rcu_cb (2,681,366 samples, 0.50%)</title><rect x="1032.3" y="325" width="6.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1035.32" y="335.5" ></text>
</g>
<g >
<title>down_read_trylock (1,326,598 samples, 0.25%)</title><rect x="132.7" y="389" width="3.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="135.71" y="399.5" ></text>
</g>
<g >
<title>perf_event_mmap_event (2,053,382 samples, 0.39%)</title><rect x="216.7" y="197" width="4.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="219.70" y="207.5" ></text>
</g>
<g >
<title>decltype  (1,457,500 samples, 0.27%)</title><rect x="401.9" y="245" width="3.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="404.93" y="255.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (6,188,209 samples, 1.16%)</title><rect x="643.2" y="357" width="13.8" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="646.23" y="367.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,962,687 samples, 0.74%)</title><rect x="456.8" y="245" width="8.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="459.84" y="255.5" ></text>
</g>
<g >
<title>elf_load (2,053,382 samples, 0.39%)</title><rect x="216.7" y="293" width="4.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="219.70" y="303.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (3,962,687 samples, 0.74%)</title><rect x="456.8" y="261" width="8.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="459.84" y="271.5" ></text>
</g>
<g >
<title>exc_page_fault (1,318,551 samples, 0.25%)</title><rect x="14.3" y="389" width="2.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="17.26" y="399.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1,332,608 samples, 0.25%)</title><rect x="205.1" y="437" width="3.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="208.10" y="447.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (4,546,932 samples, 0.85%)</title><rect x="180.4" y="453" width="10.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="183.39" y="463.5" ></text>
</g>
<g >
<title>d_substitution (1,342,342 samples, 0.25%)</title><rect x="99.8" y="437" width="3.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="102.81" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;apollo::BehaviorPlanner::MCTSTree, std::allocator&lt;apollo::BehaviorPlanner::MCTSTree&gt;,  (3,962,687 samples, 0.74%)</title><rect x="456.8" y="357" width="8.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="459.84" y="367.5" ></text>
</g>
<g >
<title>abbrev_compare (1,337,632 samples, 0.25%)</title><rect x="659.9" y="469" width="2.9" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="662.88" y="479.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (2,053,382 samples, 0.39%)</title><rect x="216.7" y="357" width="4.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="219.70" y="367.5" ></text>
</g>
<g >
<title>read_uint32 (2,644,412 samples, 0.50%)</title><rect x="238.8" y="453" width="5.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="241.83" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleRewardDetails, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt; &gt;::~unordered_map (1,323,913 samples, 0.25%)</title><rect x="459.8" y="149" width="2.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="462.76" y="159.5" ></text>
</g>
<g >
<title>begin_new_exec (116,436 samples, 0.02%)</title><rect x="1189.7" y="293" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1192.74" y="303.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Expand (3,963,177 samples, 0.74%)</title><rect x="429.1" y="405" width="8.7" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="432.05" y="415.5" ></text>
</g>
<g >
<title>lru_gen_add_folio (1,343,166 samples, 0.25%)</title><rect x="601.9" y="277" width="3.0" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="604.88" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::back (1,291,623 samples, 0.24%)</title><rect x="414.2" y="293" width="2.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="417.18" y="303.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (110,931 samples, 0.02%)</title><rect x="1189.8" y="261" width="0.2" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1192.75" y="271.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (2,678,062 samples, 0.50%)</title><rect x="595.9" y="245" width="6.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="598.94" y="255.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;apollo::BehaviorPlanner::TreeNodePool&gt;::~shared_ptr (3,962,687 samples, 0.74%)</title><rect x="456.8" y="293" width="8.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="459.84" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1,323,913 samples, 0.25%)</title><rect x="459.8" y="133" width="2.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="462.76" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,650,184 samples, 0.50%)</title><rect x="174.5" y="437" width="5.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="177.51" y="447.5" ></text>
</g>
<g >
<title>lru_add_fn (1,343,166 samples, 0.25%)</title><rect x="601.9" y="293" width="3.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="604.88" y="303.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,633,891 samples, 2.00%)</title><rect x="581.3" y="357" width="23.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="584.27" y="367.5" >d..</text>
</g>
<g >
<title>__vm_area_free (1,342,172 samples, 0.25%)</title><rect x="1032.3" y="309" width="3.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1035.32" y="319.5" ></text>
</g>
<g >
<title>line_compare (3,988,382 samples, 0.75%)</title><rect x="1080.4" y="469" width="8.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1083.37" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::deallocate (1,321,659 samples, 0.25%)</title><rect x="462.7" y="101" width="2.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="465.70" y="111.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, PredictionObstacle, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt; &gt;::at (4,369,054 samples, 0.82%)</title><rect x="347.0" y="309" width="9.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="349.99" y="319.5" ></text>
</g>
<g >
<title>__mmput (8,335,578 samples, 1.57%)</title><rect x="1059.0" y="341" width="18.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1061.95" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (1,323,913 samples, 0.25%)</title><rect x="459.8" y="69" width="2.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="462.76" y="79.5" ></text>
</g>
<g >
<title>__count_memcg_events (2,623,987 samples, 0.49%)</title><rect x="581.3" y="309" width="5.8" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="584.27" y="319.5" ></text>
</g>
<g >
<title>vma_expand (1,319,228 samples, 0.25%)</title><rect x="640.3" y="325" width="2.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="643.30" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1,312,170 samples, 0.25%)</title><rect x="315.6" y="325" width="2.9" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="318.58" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;::_M_valptr (1,280,712 samples, 0.24%)</title><rect x="393.3" y="261" width="2.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="396.32" y="271.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (1,340,364 samples, 0.25%)</title><rect x="1026.4" y="293" width="2.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1029.37" y="303.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (1,318,551 samples, 0.25%)</title><rect x="14.3" y="277" width="2.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="17.26" y="287.5" ></text>
</g>
<g >
<title>alloc_anon_folio (1,325,083 samples, 0.25%)</title><rect x="689.4" y="341" width="2.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="692.35" y="351.5" ></text>
</g>
<g >
<title>x64_sys_call (2,650,184 samples, 0.50%)</title><rect x="174.5" y="405" width="5.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="177.51" y="415.5" ></text>
</g>
<g >
<title>queue_work_on (1,336,165 samples, 0.25%)</title><rect x="177.4" y="229" width="3.0" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="180.43" y="239.5" ></text>
</g>
<g >
<title>lookup_abbrev (1,318,279 samples, 0.25%)</title><rect x="1089.2" y="469" width="2.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1092.21" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4,097,556 samples, 0.77%)</title><rect x="399.0" y="277" width="9.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="402.04" y="287.5" ></text>
</g>
<g >
<title>TrajectoryPoint::relative_time (3,276,875 samples, 0.62%)</title><rect x="449.6" y="405" width="7.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="452.57" y="415.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (1,320,361 samples, 0.25%)</title><rect x="654.0" y="261" width="3.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="657.03" y="271.5" ></text>
</g>
<g >
<title>perf_event_mmap_event (1,316,692 samples, 0.25%)</title><rect x="637.4" y="309" width="2.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="640.38" y="319.5" ></text>
</g>
<g >
<title>__sanitizer::ReportFile::Write (1,332,423 samples, 0.25%)</title><rect x="144.9" y="453" width="3.0" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="147.94" y="463.5" ></text>
</g>
<g >
<title>lru_gen_add_folio (1,380,413 samples, 0.26%)</title><rect x="692.3" y="277" width="3.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="695.29" y="287.5" ></text>
</g>
<g >
<title>dwarf_lookup_pc (3,898,902 samples, 0.73%)</title><rect x="208.1" y="453" width="8.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="211.05" y="463.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (2,410,688 samples, 0.45%)</title><rect x="525.6" y="453" width="5.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="528.60" y="463.5" ></text>
</g>
<g >
<title>unmap_single_vma (7,080,586 samples, 1.33%)</title><rect x="1061.7" y="293" width="15.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1064.74" y="303.5" ></text>
</g>
<g >
<title>_compound_head (4,729,668 samples, 0.89%)</title><rect x="1061.7" y="245" width="10.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1064.74" y="255.5" ></text>
</g>
<g >
<title>int std::uniform_int_distribution&lt;int&gt;::operator (1,269,795 samples, 0.24%)</title><rect x="356.7" y="293" width="2.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="359.68" y="303.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (6,674,673 samples, 1.25%)</title><rect x="26.0" y="341" width="14.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="28.97" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::operator= (3,142,677 samples, 0.59%)</title><rect x="329.1" y="309" width="7.0" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="332.12" y="319.5" ></text>
</g>
<g >
<title>down_read_trylock (1,315,933 samples, 0.25%)</title><rect x="1008.7" y="405" width="3.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1011.74" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (1,323,913 samples, 0.25%)</title><rect x="459.8" y="117" width="2.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="462.76" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt; &gt; &gt;::allocate (1,279,561 samples, 0.24%)</title><rect x="366.3" y="245" width="2.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="369.34" y="255.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::RewardFun (5,246,468 samples, 0.99%)</title><rect x="309.8" y="373" width="11.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="312.78" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (2,635,920 samples, 0.50%)</title><rect x="637.4" y="469" width="5.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="640.38" y="479.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (2,053,382 samples, 0.39%)</title><rect x="216.7" y="261" width="4.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="219.70" y="271.5" ></text>
</g>
<g >
<title>__asan_backtrace_dwarf_add (3,994,251 samples, 0.75%)</title><rect x="247.5" y="469" width="8.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="250.54" y="479.5" ></text>
</g>
<g >
<title>elf_symbol_compare (1,364,849 samples, 0.26%)</title><rect x="704.3" y="469" width="3.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="707.26" y="479.5" ></text>
</g>
<g >
<title>x64_sys_call (2,053,382 samples, 0.39%)</title><rect x="216.7" y="421" width="4.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="219.70" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;apollo::BehaviorPlanner::MCTSNode*, std::allocator&lt;apollo::BehaviorPlanner::MCTSNode*&gt; &gt;::push_back (1,326,619 samples, 0.25%)</title><rect x="321.4" y="341" width="3.0" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="324.42" y="351.5" ></text>
</g>
<g >
<title>[unknown] (116,436 samples, 0.02%)</title><rect x="1189.7" y="469" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.74" y="479.5" ></text>
</g>
<g >
<title>lru_add_fn (4,867,848 samples, 0.91%)</title><rect x="643.2" y="277" width="10.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="646.23" y="287.5" ></text>
</g>
<g >
<title>folio_add_lru_vma (1,343,166 samples, 0.25%)</title><rect x="601.9" y="341" width="3.0" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="604.88" y="351.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Rollout (48,532,257 samples, 9.12%)</title><rect x="321.4" y="389" width="107.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="324.42" y="399.5" >apollo::Behav..</text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::RewardFun (1,362,300 samples, 0.26%)</title><rect x="306.8" y="341" width="3.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="309.76" y="351.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;apollo::BehaviorPlanner::MCTSTree,  (3,962,687 samples, 0.74%)</title><rect x="456.8" y="405" width="8.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="459.84" y="415.5" ></text>
</g>
<g >
<title>std::__detail::operator== (1,315,572 samples, 0.25%)</title><rect x="375.1" y="325" width="2.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="378.07" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6,720,601 samples, 1.26%)</title><rect x="396.2" y="309" width="14.9" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="399.16" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,298,581 samples, 0.24%)</title><rect x="396.2" y="293" width="2.8" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="399.16" y="303.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::UctSearch (64,394,381 samples, 12.10%)</title><rect x="306.8" y="421" width="142.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="309.76" y="431.5" >apollo::BehaviorPl..</text>
</g>
<g >
<title>asm_exc_page_fault (1,330,807 samples, 0.25%)</title><rect x="151.1" y="437" width="2.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="154.06" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, PredictionObstacle, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt; &gt;::at (1,333,706 samples, 0.25%)</title><rect x="431.9" y="373" width="3.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="434.92" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (6,188,209 samples, 1.16%)</title><rect x="643.2" y="437" width="13.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="646.23" y="447.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::lock (1,330,807 samples, 0.25%)</title><rect x="151.1" y="453" width="2.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="154.06" y="463.5" ></text>
</g>
<g >
<title>sync_regs (1,328,589 samples, 0.25%)</title><rect x="634.4" y="453" width="3.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="637.44" y="463.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (11,974,032 samples, 2.25%)</title><rect x="578.3" y="453" width="26.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="581.30" y="463.5" >a..</text>
</g>
<g >
<title>void std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::_M_realloc_insert&lt;double, double&gt; (1,293,708 samples, 0.24%)</title><rect x="429.1" y="325" width="2.8" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="432.05" y="335.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSNode::~MCTSNode (3,962,687 samples, 0.74%)</title><rect x="456.8" y="165" width="8.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="459.84" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2,602,703 samples, 0.49%)</title><rect x="378.0" y="309" width="5.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="380.99" y="319.5" ></text>
</g>
<g >
<title>alloc_anon_folio (2,616,249 samples, 0.49%)</title><rect x="1017.6" y="341" width="5.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1020.60" y="351.5" ></text>
</g>
<g >
<title>do_wp_page (4,327,526 samples, 0.81%)</title><rect x="117.4" y="341" width="9.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="120.36" y="351.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::TreeNodePool::~TreeNodePool (3,962,687 samples, 0.74%)</title><rect x="456.8" y="181" width="8.8" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="459.84" y="191.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (1,326,971 samples, 0.25%)</title><rect x="20.1" y="437" width="2.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="23.10" y="447.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (1,535,106 samples, 0.29%)</title><rect x="135.7" y="293" width="3.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="138.65" y="303.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1,319,228 samples, 0.25%)</title><rect x="640.3" y="261" width="2.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="643.30" y="271.5" ></text>
</g>
<g >
<title>free_unref_page_prepare (1,205,110 samples, 0.23%)</title><rect x="1074.8" y="149" width="2.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1077.77" y="159.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Backpropagate (6,608,768 samples, 1.24%)</title><rect x="306.8" y="389" width="14.6" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="309.76" y="399.5" ></text>
</g>
<g >
<title>__asan_backtrace_qsort (21,400,277 samples, 4.02%)</title><rect x="256.4" y="469" width="47.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="259.40" y="479.5" >__as..</text>
</g>
<g >
<title>__vm_munmap (6,188,209 samples, 1.16%)</title><rect x="643.2" y="389" width="13.8" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="646.23" y="399.5" ></text>
</g>
<g >
<title>get_page_from_freelist (4,327,526 samples, 0.81%)</title><rect x="117.4" y="261" width="9.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="120.36" y="271.5" ></text>
</g>
<g >
<title>handle_mm_fault (4,327,526 samples, 0.81%)</title><rect x="117.4" y="389" width="9.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="120.36" y="399.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (2,053,382 samples, 0.39%)</title><rect x="216.7" y="389" width="4.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="219.70" y="399.5" ></text>
</g>
<g >
<title>__sanitizer::internal_strlen (1,335,011 samples, 0.25%)</title><rect x="168.6" y="453" width="3.0" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="171.61" y="463.5" ></text>
</g>
<g >
<title>update_rq_clock (1,319,828 samples, 0.25%)</title><rect x="657.0" y="341" width="2.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="659.95" y="351.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (5,591,101 samples, 1.05%)</title><rect x="114.6" y="453" width="12.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="117.56" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt; &gt; &gt;::at (1,316,743 samples, 0.25%)</title><rect x="336.1" y="325" width="2.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="339.09" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,316,197 samples, 0.25%)</title><rect x="423.3" y="261" width="2.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="426.27" y="271.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;apollo::BehaviorPlanner::MCTSTree&gt;::~shared_ptr (3,962,687 samples, 0.74%)</title><rect x="456.8" y="421" width="8.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="459.84" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_begin (1,287,224 samples, 0.24%)</title><rect x="333.2" y="261" width="2.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="336.24" y="271.5" ></text>
</g>
<g >
<title>pty_write (1,336,165 samples, 0.25%)</title><rect x="177.4" y="261" width="3.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="180.43" y="271.5" ></text>
</g>
<g >
<title>mas_wr_walk (1,335,660 samples, 0.25%)</title><rect x="34.9" y="261" width="2.9" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="37.87" y="271.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1,332,646 samples, 0.25%)</title><rect x="96.9" y="373" width="2.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="99.85" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::DecisionType&gt;, false, true&gt;::operator* (1,330,934 samples, 0.25%)</title><rect x="372.1" y="325" width="3.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="375.12" y="335.5" ></text>
</g>
<g >
<title>release_pages (1,254,992 samples, 0.24%)</title><rect x="1059.0" y="261" width="2.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1061.95" y="271.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,313,739 samples, 0.25%)</title><rect x="378.0" y="229" width="2.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="380.99" y="239.5" ></text>
</g>
<g >
<title>n_tty_write (2,650,184 samples, 0.50%)</title><rect x="174.5" y="293" width="5.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="177.51" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (1,335,096 samples, 0.25%)</title><rect x="405.2" y="245" width="2.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="408.16" y="255.5" ></text>
</g>
<g >
<title>__libc_start_call_main (71,633,943 samples, 13.46%)</title><rect x="306.8" y="469" width="158.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="309.76" y="479.5" >__libc_start_call_main</text>
</g>
<g >
<title>__handle_mm_fault (10,633,891 samples, 2.00%)</title><rect x="581.3" y="389" width="23.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="584.27" y="399.5" >_..</text>
</g>
<g >
<title>nohz_balancer_kick (1,339,559 samples, 0.25%)</title><rect x="1029.3" y="293" width="3.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1032.35" y="303.5" ></text>
</g>
<g >
<title>__mmap (7,991,785 samples, 1.50%)</title><rect x="23.0" y="437" width="17.8" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="26.05" y="447.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (6,701,889 samples, 1.26%)</title><rect x="1023.4" y="437" width="14.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1026.40" y="447.5" ></text>
</g>
<g >
<title>__alloc_pages (2,616,249 samples, 0.49%)</title><rect x="1017.6" y="293" width="5.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1020.60" y="303.5" ></text>
</g>
<g >
<title>read_attribute (1,341,315 samples, 0.25%)</title><rect x="1092.1" y="469" width="3.0" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1095.14" y="479.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,318,551 samples, 0.25%)</title><rect x="14.3" y="341" width="2.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="17.26" y="351.5" ></text>
</g>
<g >
<title>elf_zlib_verify_checksum (9,328,406 samples, 1.75%)</title><rect x="1038.3" y="469" width="20.7" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="1041.26" y="479.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (1,339,096 samples, 0.25%)</title><rect x="1011.7" y="341" width="2.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1014.66" y="351.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (1,333,706 samples, 0.25%)</title><rect x="431.9" y="245" width="3.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="434.92" y="255.5" ></text>
</g>
<g >
<title>get_vma_policy (1,325,083 samples, 0.25%)</title><rect x="689.4" y="309" width="2.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="692.35" y="319.5" ></text>
</g>
<g >
<title>exc_page_fault (2,861,704 samples, 0.54%)</title><rect x="132.7" y="421" width="6.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="135.71" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,319,230 samples, 0.25%)</title><rect x="318.5" y="325" width="2.9" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="321.49" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (1,285,397 samples, 0.24%)</title><rect x="383.8" y="293" width="2.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="386.76" y="303.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::Planner::~Planner (3,962,687 samples, 0.74%)</title><rect x="456.8" y="437" width="8.8" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="459.84" y="447.5" ></text>
</g>
<g >
<title>handle_mm_fault (5,295,255 samples, 1.00%)</title><rect x="1011.7" y="405" width="11.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1014.66" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1,333,706 samples, 0.25%)</title><rect x="431.9" y="341" width="3.0" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="434.92" y="351.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;::type const&amp; std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; (1,457,500 samples, 0.27%)</title><rect x="401.9" y="229" width="3.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="404.93" y="239.5" ></text>
</g>
<g >
<title>vm_mmap (2,053,382 samples, 0.39%)</title><rect x="216.7" y="277" width="4.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="219.70" y="287.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memset (6,584,655 samples, 1.24%)</title><rect x="154.0" y="453" width="14.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="157.01" y="463.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (3,962,687 samples, 0.74%)</title><rect x="456.8" y="389" width="8.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="459.84" y="399.5" ></text>
</g>
<g >
<title>all (532,054,001 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>do_group_exit (8,335,578 samples, 1.57%)</title><rect x="1059.0" y="405" width="18.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1061.95" y="415.5" ></text>
</g>
<g >
<title>sync_regs (4,663,118 samples, 0.88%)</title><rect x="465.6" y="453" width="10.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="468.63" y="463.5" ></text>
</g>
<g >
<title>native_sched_clock (1,319,828 samples, 0.25%)</title><rect x="657.0" y="277" width="2.9" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="659.95" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,333,706 samples, 0.25%)</title><rect x="431.9" y="309" width="3.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="434.92" y="319.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::ExpandNode (39,094,374 samples, 7.35%)</title><rect x="324.4" y="357" width="86.7" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="327.36" y="367.5" >apollo::Be..</text>
</g>
<g >
<title>__sanitizer::internal_strncpy (1,325,952 samples, 0.25%)</title><rect x="171.6" y="453" width="2.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="174.57" y="463.5" ></text>
</g>
<g >
<title>sync_regs (1,338,117 samples, 0.25%)</title><rect x="698.3" y="453" width="3.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="701.32" y="463.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1,319,828 samples, 0.25%)</title><rect x="657.0" y="325" width="2.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="659.95" y="335.5" ></text>
</g>
<g >
<title>unit_addrs_compare (1,369,999 samples, 0.26%)</title><rect x="1186.7" y="469" width="3.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1189.70" y="479.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memcpy (38,673,375 samples, 7.27%)</title><rect x="531.0" y="469" width="85.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="533.95" y="479.5" >__sanitize..</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::PopulateFreeList (9,196,501 samples, 1.73%)</title><rect x="493.6" y="469" width="20.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="496.61" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2,607,388 samples, 0.49%)</title><rect x="423.3" y="325" width="5.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="426.27" y="335.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;apollo::BehaviorPlanner::TreeNodePool&gt; &gt;::destroy&lt;apollo::BehaviorPlanner::TreeNodePool&gt; (3,962,687 samples, 0.74%)</title><rect x="456.8" y="213" width="8.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="459.84" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (4,369,054 samples, 0.82%)</title><rect x="347.0" y="261" width="9.7" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="349.99" y="271.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (1,313,739 samples, 0.25%)</title><rect x="378.0" y="197" width="2.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="380.99" y="207.5" ></text>
</g>
<g >
<title>unmap_vmas (7,080,586 samples, 1.33%)</title><rect x="1061.7" y="309" width="15.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1064.74" y="319.5" ></text>
</g>
<g >
<title>do_user_addr_fault (6,611,188 samples, 1.24%)</title><rect x="1008.7" y="421" width="14.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1011.74" y="431.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (1,343,166 samples, 0.25%)</title><rect x="601.9" y="245" width="3.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="604.88" y="255.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1,328,056 samples, 0.25%)</title><rect x="369.2" y="245" width="2.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="372.17" y="255.5" ></text>
</g>
<g >
<title>exc_page_fault (1,330,807 samples, 0.25%)</title><rect x="151.1" y="421" width="2.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="154.06" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;::_M_ptr (1,280,712 samples, 0.24%)</title><rect x="393.3" y="245" width="2.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="396.32" y="255.5" ></text>
</g>
<g >
<title>CplusV3DemangleCallback (1,337,881 samples, 0.25%)</title><rect x="10.0" y="469" width="3.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1,320,361 samples, 0.25%)</title><rect x="654.0" y="325" width="3.0" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="657.03" y="335.5" ></text>
</g>
<g >
<title>__sanitizer::AppendString (2,651,040 samples, 0.50%)</title><rect x="139.1" y="453" width="5.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="142.06" y="463.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (1,339,226 samples, 0.25%)</title><rect x="26.0" y="245" width="2.9" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="28.97" y="255.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (1,324,795 samples, 0.25%)</title><rect x="683.5" y="309" width="2.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="686.47" y="319.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (1,307,423 samples, 0.25%)</title><rect x="490.7" y="469" width="2.9" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="493.71" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1,335,763 samples, 0.25%)</title><rect x="434.9" y="341" width="2.9" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="437.88" y="351.5" ></text>
</g>
<g >
<title>unsigned int std::uniform_int_distribution&lt;int&gt;::_S_nd&lt;unsigned long, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;, unsigned int&gt; (1,269,795 samples, 0.24%)</title><rect x="356.7" y="277" width="2.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="359.68" y="287.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::SmoothnessReward (1,332,442 samples, 0.25%)</title><rect x="312.6" y="357" width="3.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="315.62" y="367.5" ></text>
</g>
<g >
<title>apollo::common::math::Vec2d&amp; std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::emplace_back&lt;double, double&gt; (1,293,708 samples, 0.24%)</title><rect x="429.1" y="341" width="2.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="432.05" y="351.5" ></text>
</g>
<g >
<title>do_anonymous_page (14,656,411 samples, 2.75%)</title><rect x="662.8" y="357" width="32.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="665.85" y="367.5" >do..</text>
</g>
<g >
<title>__lsan::ScanRangeForPointers (4,663,118 samples, 0.88%)</title><rect x="465.6" y="469" width="10.4" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="468.63" y="479.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2,616,249 samples, 0.49%)</title><rect x="1017.6" y="277" width="5.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1020.60" y="287.5" ></text>
</g>
<g >
<title>file_tty_write.constprop.0 (2,650,184 samples, 0.50%)</title><rect x="174.5" y="325" width="5.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="177.51" y="335.5" ></text>
</g>
<g >
<title>exc_page_fault (11,974,032 samples, 2.25%)</title><rect x="578.3" y="437" width="26.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="581.30" y="447.5" >e..</text>
</g>
<g >
<title>copy_from_kernel_nofault_allowed (2,053,382 samples, 0.39%)</title><rect x="216.7" y="85" width="4.6" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="219.70" y="95.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (2,635,920 samples, 0.50%)</title><rect x="637.4" y="389" width="5.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="640.38" y="399.5" ></text>
</g>
<g >
<title>vma_expand (2,674,169 samples, 0.50%)</title><rect x="31.9" y="293" width="5.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="34.90" y="303.5" ></text>
</g>
<g >
<title>perf_event_mmap (2,053,382 samples, 0.39%)</title><rect x="216.7" y="213" width="4.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="219.70" y="223.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1,318,551 samples, 0.25%)</title><rect x="14.3" y="373" width="2.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="17.26" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1,426,150 samples, 0.27%)</title><rect x="147.9" y="453" width="3.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="150.89" y="463.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Backpropagate (1,362,300 samples, 0.26%)</title><rect x="306.8" y="373" width="3.0" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="309.76" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,330,807 samples, 0.25%)</title><rect x="151.1" y="389" width="2.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="154.06" y="399.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1,254,992 samples, 0.24%)</title><rect x="1059.0" y="309" width="2.7" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1061.95" y="319.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,316,197 samples, 0.25%)</title><rect x="423.3" y="245" width="2.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="426.27" y="255.5" ></text>
</g>
<g >
<title>mas_node_count_gfp (1,319,228 samples, 0.25%)</title><rect x="640.3" y="293" width="2.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="643.30" y="303.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1,333,706 samples, 0.25%)</title><rect x="431.9" y="277" width="3.0" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="434.92" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt;::~unordered_map (1,317,115 samples, 0.25%)</title><rect x="456.8" y="149" width="3.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="459.84" y="159.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleState, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt; &gt;::at (2,607,388 samples, 0.49%)</title><rect x="423.3" y="341" width="5.8" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="426.27" y="351.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (1,332,608 samples, 0.25%)</title><rect x="205.1" y="389" width="3.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="208.10" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6,188,209 samples, 1.16%)</title><rect x="643.2" y="453" width="13.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="646.23" y="463.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (4,020,523 samples, 0.76%)</title><rect x="1023.4" y="373" width="8.9" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1026.40" y="383.5" ></text>
</g>
<g >
<title>idle_cpu (1,339,559 samples, 0.25%)</title><rect x="1029.3" y="261" width="3.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1032.35" y="271.5" ></text>
</g>
<g >
<title>search_binary_handler (116,436 samples, 0.02%)</title><rect x="1189.7" y="325" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.74" y="335.5" ></text>
</g>
<g >
<title>do_wp_page (1,330,807 samples, 0.25%)</title><rect x="151.1" y="341" width="2.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="154.06" y="351.5" ></text>
</g>
<g >
<title>prepend (2,053,382 samples, 0.39%)</title><rect x="216.7" y="133" width="4.6" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="219.70" y="143.5" ></text>
</g>
<g >
<title>void std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;, std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, true&gt; &gt; &gt; &gt; (1,287,224 samples, 0.24%)</title><rect x="333.2" y="277" width="2.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="336.24" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (1,323,913 samples, 0.25%)</title><rect x="459.8" y="101" width="2.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="462.76" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (1,319,230 samples, 0.25%)</title><rect x="318.5" y="277" width="2.9" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="321.49" y="287.5" ></text>
</g>
<g >
<title>__pte_offset_map_lock (1,329,055 samples, 0.25%)</title><rect x="686.4" y="341" width="3.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="689.40" y="351.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (1,308,128 samples, 0.25%)</title><rect x="303.9" y="469" width="2.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="306.86" y="479.5" ></text>
</g>
<g >
<title>perf_iterate_sb (1,316,692 samples, 0.25%)</title><rect x="637.4" y="293" width="2.9" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="640.38" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt; &gt; &gt;::size (1,316,743 samples, 0.25%)</title><rect x="336.1" y="293" width="2.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="339.09" y="303.5" ></text>
</g>
<g >
<title>bool std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2,025,530 samples, 0.38%)</title><rect x="342.5" y="309" width="4.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="345.50" y="319.5" ></text>
</g>
<g >
<title>perf-exec (116,436 samples, 0.02%)</title><rect x="1189.7" y="485" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1192.74" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1,312,170 samples, 0.25%)</title><rect x="315.6" y="341" width="2.9" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="318.58" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,635,920 samples, 0.50%)</title><rect x="637.4" y="453" width="5.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="640.38" y="463.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,330,807 samples, 0.25%)</title><rect x="151.1" y="373" width="2.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="154.06" y="383.5" ></text>
</g>
<g >
<title>apollo::common::math::Box2d::Box2d (5,503,876 samples, 1.03%)</title><rect x="411.1" y="341" width="12.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="414.06" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (1,313,739 samples, 0.25%)</title><rect x="378.0" y="213" width="2.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="380.99" y="223.5" ></text>
</g>
<g >
<title>read_attribute (7,924,855 samples, 1.49%)</title><rect x="221.3" y="453" width="17.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="224.25" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_copy_code (1,855,453 samples, 0.35%)</title><rect x="329.1" y="277" width="4.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="332.12" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,288,964 samples, 0.24%)</title><rect x="380.9" y="277" width="2.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="383.90" y="287.5" ></text>
</g>
<g >
<title>folio_add_lru (1,380,413 samples, 0.26%)</title><rect x="692.3" y="325" width="3.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="695.29" y="335.5" ></text>
</g>
<g >
<title>[unknown] (104,483,467 samples, 19.64%)</title><rect x="13.0" y="469" width="231.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.97" y="479.5" >[unknown]</text>
</g>
<g >
<title>flush_tlb_mm_range (1,320,361 samples, 0.25%)</title><rect x="654.0" y="309" width="3.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="657.03" y="319.5" ></text>
</g>
<g >
<title>vma_alloc_folio (4,327,526 samples, 0.81%)</title><rect x="117.4" y="309" width="9.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="120.36" y="319.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (1,327,854 samples, 0.25%)</title><rect x="511.1" y="325" width="2.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="514.06" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (116,436 samples, 0.02%)</title><rect x="1189.7" y="437" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.74" y="447.5" ></text>
</g>
<g >
<title>bprm_execve (116,436 samples, 0.02%)</title><rect x="1189.7" y="373" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1192.74" y="383.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSNode::AddChild (1,326,619 samples, 0.25%)</title><rect x="321.4" y="357" width="3.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="324.42" y="367.5" ></text>
</g>
<g >
<title>x64_sys_call (6,674,673 samples, 1.25%)</title><rect x="26.0" y="389" width="14.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="28.97" y="399.5" ></text>
</g>
<g >
<title>_dl_relocate_object (4,546,932 samples, 0.85%)</title><rect x="180.4" y="421" width="10.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="183.39" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;TrajectoryPoint, std::allocator&lt;TrajectoryPoint&gt; &gt;::empty (1,362,300 samples, 0.26%)</title><rect x="306.8" y="309" width="3.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="309.76" y="319.5" ></text>
</g>
<g >
<title>exc_page_fault (6,611,188 samples, 1.24%)</title><rect x="1008.7" y="437" width="14.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1011.74" y="447.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (1,269,795 samples, 0.24%)</title><rect x="356.7" y="245" width="2.8" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="359.68" y="255.5" ></text>
</g>
<g >
<title>vma_alloc_folio (1,325,083 samples, 0.25%)</title><rect x="689.4" y="325" width="2.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="692.35" y="335.5" ></text>
</g>
<g >
<title>mmap_region (2,635,920 samples, 0.50%)</title><rect x="637.4" y="341" width="5.8" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="640.38" y="351.5" ></text>
</g>
<g >
<title>apollo::common::math::Box2d::InitCorners (1,293,708 samples, 0.24%)</title><rect x="429.1" y="357" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="432.05" y="367.5" ></text>
</g>
<g >
<title>folio_add_lru (1,343,166 samples, 0.25%)</title><rect x="601.9" y="325" width="3.0" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="604.88" y="335.5" ></text>
</g>
<g >
<title>sched_clock_noinstr (1,319,828 samples, 0.25%)</title><rect x="657.0" y="293" width="2.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="659.95" y="303.5" ></text>
</g>
<g >
<title>down_write (1,338,509 samples, 0.25%)</title><rect x="31.9" y="277" width="3.0" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="34.90" y="287.5" ></text>
</g>
<g >
<title>mas_preallocate (1,319,228 samples, 0.25%)</title><rect x="640.3" y="309" width="2.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="643.30" y="319.5" ></text>
</g>
<g >
<title>error_entry (1,337,142 samples, 0.25%)</title><rect x="604.9" y="453" width="2.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="607.86" y="463.5" ></text>
</g>
<g >
<title>prepend_path (2,053,382 samples, 0.39%)</title><rect x="216.7" y="149" width="4.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="219.70" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (6,188,209 samples, 1.16%)</title><rect x="643.2" y="405" width="13.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="646.23" y="415.5" ></text>
</g>
<g >
<title>read_uleb128 (30,732,298 samples, 5.78%)</title><rect x="1118.5" y="469" width="68.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1121.54" y="479.5" >read_ul..</text>
</g>
<g >
<title>irq_exit_rcu (1,332,646 samples, 0.25%)</title><rect x="96.9" y="389" width="2.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="99.85" y="399.5" ></text>
</g>
<g >
<title>mmap_region (5,348,293 samples, 1.01%)</title><rect x="26.0" y="309" width="11.8" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="28.97" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (4,097,556 samples, 0.77%)</title><rect x="399.0" y="293" width="9.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="402.04" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1,333,706 samples, 0.25%)</title><rect x="431.9" y="357" width="3.0" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="434.92" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash (1,312,170 samples, 0.25%)</title><rect x="315.6" y="293" width="2.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="318.58" y="303.5" ></text>
</g>
<g >
<title>__interceptor_memset (1,317,115 samples, 0.25%)</title><rect x="456.8" y="101" width="3.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="459.84" y="111.5" ></text>
</g>
<g >
<title>native_flush_tlb_multi (1,320,361 samples, 0.25%)</title><rect x="654.0" y="293" width="3.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="657.03" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4,369,054 samples, 0.82%)</title><rect x="347.0" y="245" width="9.7" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="349.99" y="255.5" ></text>
</g>
<g >
<title>x64_sys_call (6,188,209 samples, 1.16%)</title><rect x="643.2" y="421" width="13.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="646.23" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,313,739 samples, 0.25%)</title><rect x="378.0" y="245" width="2.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="380.99" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,319,828 samples, 0.25%)</title><rect x="657.0" y="453" width="2.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="659.95" y="463.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1,205,110 samples, 0.23%)</title><rect x="1074.8" y="229" width="2.6" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1077.77" y="239.5" ></text>
</g>
<g >
<title>search_binary_handler (2,053,382 samples, 0.39%)</title><rect x="216.7" y="325" width="4.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="219.70" y="335.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (1,333,706 samples, 0.25%)</title><rect x="431.9" y="229" width="3.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="434.92" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,333,706 samples, 0.25%)</title><rect x="431.9" y="293" width="3.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="434.92" y="303.5" ></text>
</g>
<g >
<title>scheduler_tick (4,020,523 samples, 0.76%)</title><rect x="1023.4" y="325" width="8.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1026.40" y="335.5" ></text>
</g>
<g >
<title>d_path (2,053,382 samples, 0.39%)</title><rect x="216.7" y="165" width="4.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="219.70" y="175.5" ></text>
</g>
<g >
<title>handle_pte_fault (3,956,608 samples, 0.74%)</title><rect x="505.2" y="373" width="8.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="508.23" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;apollo::common::math::Vec2d*, std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt; &gt;::__normal_iterator (1,291,623 samples, 0.24%)</title><rect x="414.2" y="261" width="2.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="417.18" y="271.5" ></text>
</g>
<g >
<title>__asan_backtrace_alloc (1,318,177 samples, 0.25%)</title><rect x="17.2" y="437" width="2.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="20.18" y="447.5" ></text>
</g>
<g >
<title>lru_gen_add_folio (4,867,848 samples, 0.91%)</title><rect x="643.2" y="261" width="10.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="646.23" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (3,962,687 samples, 0.74%)</title><rect x="456.8" y="373" width="8.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="459.84" y="383.5" ></text>
</g>
<g >
<title>[unknown] (45,807,861 samples, 8.61%)</title><rect x="13.0" y="453" width="101.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.97" y="463.5" >[unknown]</text>
</g>
<g >
<title>__mem_cgroup_charge (1,330,807 samples, 0.25%)</title><rect x="151.1" y="309" width="2.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="154.06" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,312,170 samples, 0.25%)</title><rect x="315.6" y="309" width="2.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="318.58" y="319.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindImpl (1,385,195 samples, 0.26%)</title><rect x="487.6" y="469" width="3.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="490.64" y="479.5" ></text>
</g>
<g >
<title>__alloc_pages (4,327,526 samples, 0.81%)</title><rect x="117.4" y="277" width="9.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="120.36" y="287.5" ></text>
</g>
<g >
<title>apollo::common::math::Box2d::Box2d (1,293,708 samples, 0.24%)</title><rect x="429.1" y="373" width="2.8" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="432.05" y="383.5" ></text>
</g>
<g >
<title>function_addrs_compare (1,320,438 samples, 0.25%)</title><rect x="1077.4" y="469" width="3.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1080.44" y="479.5" ></text>
</g>
<g >
<title>rmqueue (2,616,249 samples, 0.49%)</title><rect x="1017.6" y="261" width="5.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1020.60" y="271.5" ></text>
</g>
<g >
<title>perf_event_addr_filters_exec (110,931 samples, 0.02%)</title><rect x="1189.8" y="245" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.75" y="255.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::~MCTSTree (3,962,687 samples, 0.74%)</title><rect x="456.8" y="309" width="8.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="459.84" y="319.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::Planner::MakeDecision (67,671,256 samples, 12.72%)</title><rect x="306.8" y="437" width="150.0" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="309.76" y="447.5" >apollo::BehaviorPla..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;apollo::common::math::Vec2d*, std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt; &gt;::operator- (1,291,623 samples, 0.24%)</title><rect x="414.2" y="277" width="2.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="417.18" y="287.5" ></text>
</g>
<g >
<title>load_elf_binary (116,436 samples, 0.02%)</title><rect x="1189.7" y="309" width="0.3" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="1192.74" y="319.5" ></text>
</g>
<g >
<title>trigger_load_balance (1,339,559 samples, 0.25%)</title><rect x="1029.3" y="309" width="3.0" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1032.35" y="319.5" ></text>
</g>
<g >
<title>handle_pte_fault (14,656,411 samples, 2.75%)</title><rect x="662.8" y="373" width="32.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="665.85" y="383.5" >ha..</text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,328,056 samples, 0.25%)</title><rect x="369.2" y="213" width="2.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="372.17" y="223.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,535,106 samples, 0.29%)</title><rect x="135.7" y="373" width="3.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="138.65" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2,602,703 samples, 0.49%)</title><rect x="378.0" y="293" width="5.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="380.99" y="303.5" ></text>
</g>
<g >
<title>read_sleb128 (3,968,490 samples, 0.75%)</title><rect x="1109.7" y="469" width="8.8" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1112.74" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (1,298,581 samples, 0.24%)</title><rect x="396.2" y="277" width="2.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="399.16" y="287.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::Prepuring (3,963,177 samples, 0.74%)</title><rect x="429.1" y="389" width="8.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="432.05" y="399.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1,291,191 samples, 0.24%)</title><rect x="426.2" y="277" width="2.9" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="429.19" y="287.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (6,674,673 samples, 1.25%)</title><rect x="26.0" y="357" width="14.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="28.97" y="367.5" ></text>
</g>
<g >
<title>mas_preallocate (1,335,660 samples, 0.25%)</title><rect x="34.9" y="277" width="2.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="37.87" y="287.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (4,327,526 samples, 0.81%)</title><rect x="117.4" y="293" width="9.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="120.36" y="303.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::Backpropagate (1,362,300 samples, 0.26%)</title><rect x="306.8" y="357" width="3.0" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="309.76" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::max_size (1,293,708 samples, 0.24%)</title><rect x="429.1" y="293" width="2.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="432.05" y="303.5" ></text>
</g>
<g >
<title>do_user_addr_fault (15,993,478 samples, 3.01%)</title><rect x="662.8" y="421" width="35.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="665.85" y="431.5" >do_..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,316,197 samples, 0.25%)</title><rect x="423.3" y="293" width="2.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="426.27" y="303.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1,318,551 samples, 0.25%)</title><rect x="14.3" y="405" width="2.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="17.26" y="415.5" ></text>
</g>
<g >
<title>folio_add_lru_vma (1,380,413 samples, 0.26%)</title><rect x="692.3" y="341" width="3.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="695.29" y="351.5" ></text>
</g>
<g >
<title>x64_sys_call (116,436 samples, 0.02%)</title><rect x="1189.7" y="421" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1192.74" y="431.5" ></text>
</g>
<g >
<title>__memcg_slab_free_hook (1,342,172 samples, 0.25%)</title><rect x="1032.3" y="277" width="3.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1035.32" y="287.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::BoundaryCheck (6,394,584 samples, 1.20%)</title><rect x="342.5" y="325" width="14.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="345.50" y="335.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSNode::expanded_num (2,147,914 samples, 0.40%)</title><rect x="324.4" y="325" width="4.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="327.36" y="335.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (1,330,807 samples, 0.25%)</title><rect x="151.1" y="293" width="2.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="154.06" y="303.5" ></text>
</g>
<g >
<title>do_exit (8,335,578 samples, 1.57%)</title><rect x="1059.0" y="389" width="18.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1061.95" y="399.5" ></text>
</g>
<g >
<title>__alloc_pages (5,361,669 samples, 1.01%)</title><rect x="590.0" y="293" width="11.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="592.98" y="303.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;apollo::BehaviorPlanner::TreeNodePool,  (3,962,687 samples, 0.74%)</title><rect x="456.8" y="277" width="8.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="459.84" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1,335,763 samples, 0.25%)</title><rect x="434.9" y="357" width="2.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="437.88" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, double&gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::~_Vector_base (1,321,659 samples, 0.25%)</title><rect x="462.7" y="133" width="2.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="465.70" y="143.5" ></text>
</g>
<g >
<title>backtrace_free_locked.part.0 (7,925,240 samples, 1.49%)</title><rect x="190.5" y="453" width="17.6" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="193.47" y="463.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (9,287,694 samples, 1.75%)</title><rect x="1002.8" y="453" width="20.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1005.80" y="463.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;apollo::BehaviorPlanner::MCTSTree&gt; &gt;::destroy&lt;apollo::BehaviorPlanner::MCTSTree&gt; (3,962,687 samples, 0.74%)</title><rect x="456.8" y="341" width="8.8" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="459.84" y="351.5" ></text>
</g>
<g >
<title>backtrace_free_locked.part.0 (26,618,637 samples, 5.00%)</title><rect x="40.8" y="437" width="59.0" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="43.77" y="447.5" >backtr..</text>
</g>
<g >
<title>get_pfnblock_flags_mask (1,205,110 samples, 0.23%)</title><rect x="1074.8" y="133" width="2.6" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1077.77" y="143.5" ></text>
</g>
<g >
<title>__pte_offset_map_lock (1,339,910 samples, 0.25%)</title><rect x="1014.6" y="341" width="3.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1017.63" y="351.5" ></text>
</g>
<g >
<title>rcu_core (2,681,366 samples, 0.50%)</title><rect x="1032.3" y="357" width="6.0" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1035.32" y="367.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (4,020,523 samples, 0.76%)</title><rect x="1023.4" y="405" width="8.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1026.40" y="415.5" ></text>
</g>
<g >
<title>do_user_addr_fault (11,974,032 samples, 2.25%)</title><rect x="578.3" y="421" width="26.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="581.30" y="431.5" >d..</text>
</g>
<g >
<title>tlb_batch_pages_flush (1,254,992 samples, 0.24%)</title><rect x="1059.0" y="293" width="2.7" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1061.95" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4,369,054 samples, 0.82%)</title><rect x="347.0" y="293" width="9.7" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="349.99" y="303.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (2,616,249 samples, 0.49%)</title><rect x="1017.6" y="245" width="5.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1020.60" y="255.5" ></text>
</g>
<g >
<title>add_line.isra.0 (1,318,551 samples, 0.25%)</title><rect x="14.3" y="421" width="2.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="17.26" y="431.5" ></text>
</g>
<g >
<title>dl_main (4,546,932 samples, 0.85%)</title><rect x="180.4" y="437" width="10.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="183.39" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (2,607,617 samples, 0.49%)</title><rect x="366.3" y="277" width="5.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="369.34" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,316,197 samples, 0.25%)</title><rect x="423.3" y="277" width="2.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="426.27" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4,303,391 samples, 0.81%)</title><rect x="386.6" y="309" width="9.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="389.61" y="319.5" ></text>
</g>
<g >
<title>unmap_region (6,188,209 samples, 1.16%)</title><rect x="643.2" y="341" width="13.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="646.23" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,318,551 samples, 0.25%)</title><rect x="14.3" y="357" width="2.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="17.26" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (5,454,560 samples, 1.03%)</title><rect x="127.0" y="453" width="12.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="129.96" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleState, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt; &gt;::at (4,303,391 samples, 0.81%)</title><rect x="386.6" y="325" width="9.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="389.61" y="335.5" ></text>
</g>
<g >
<title>elf_zlib_inflate (149,237,227 samples, 28.05%)</title><rect x="707.3" y="469" width="331.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="710.28" y="479.5" >elf_zlib_inflate</text>
</g>
<g >
<title>do_syscall_64 (2,650,184 samples, 0.50%)</title><rect x="174.5" y="421" width="5.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="177.51" y="431.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (1,269,795 samples, 0.24%)</title><rect x="356.7" y="261" width="2.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="359.68" y="271.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;apollo::BehaviorPlanner::MCTSNode*&gt;::construct&lt;apollo::BehaviorPlanner::MCTSNode*, apollo::BehaviorPlanner::MCTSNode* const&amp;&gt; (1,326,619 samples, 0.25%)</title><rect x="321.4" y="293" width="3.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="324.42" y="303.5" ></text>
</g>
<g >
<title>release_pages (1,205,110 samples, 0.23%)</title><rect x="1074.8" y="181" width="2.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1077.77" y="191.5" ></text>
</g>
<g >
<title>perf_iterate_sb (1,339,226 samples, 0.25%)</title><rect x="26.0" y="261" width="2.9" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="28.97" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (1,316,197 samples, 0.25%)</title><rect x="423.3" y="229" width="2.9" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="426.27" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1,317,115 samples, 0.25%)</title><rect x="456.8" y="133" width="3.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="459.84" y="143.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleRewardDetails, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt; &gt;::operator[] (1,319,230 samples, 0.25%)</title><rect x="318.5" y="357" width="2.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="321.49" y="367.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (2,616,249 samples, 0.49%)</title><rect x="1017.6" y="309" width="5.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1020.60" y="319.5" ></text>
</g>
<g >
<title>copy_from_kernel_nofault (2,053,382 samples, 0.39%)</title><rect x="216.7" y="101" width="4.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="219.70" y="111.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (1,535,106 samples, 0.29%)</title><rect x="135.7" y="309" width="3.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="138.65" y="319.5" ></text>
</g>
<g >
<title>mas_alloc_nodes (1,319,228 samples, 0.25%)</title><rect x="640.3" y="277" width="2.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="643.30" y="287.5" ></text>
</g>
<g >
<title>folio_batch_move_lru (1,380,413 samples, 0.26%)</title><rect x="692.3" y="309" width="3.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="695.29" y="319.5" ></text>
</g>
<g >
<title>vfs_write (2,650,184 samples, 0.50%)</title><rect x="174.5" y="357" width="5.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="177.51" y="367.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,332,646 samples, 0.25%)</title><rect x="96.9" y="405" width="2.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="99.85" y="415.5" ></text>
</g>
<g >
<title>operator new (1,279,561 samples, 0.24%)</title><rect x="366.3" y="213" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="369.34" y="223.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,535,106 samples, 0.29%)</title><rect x="135.7" y="389" width="3.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="138.65" y="399.5" ></text>
</g>
<g >
<title>do_user_addr_fault (4,327,526 samples, 0.81%)</title><rect x="117.4" y="405" width="9.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="120.36" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,053,382 samples, 0.39%)</title><rect x="216.7" y="453" width="4.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="219.70" y="463.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (1,305,069 samples, 0.25%)</title><rect x="587.1" y="309" width="2.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="590.09" y="319.5" ></text>
</g>
<g >
<title>exit_mm (8,335,578 samples, 1.57%)</title><rect x="1059.0" y="373" width="18.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1061.95" y="383.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (2,642,046 samples, 0.50%)</title><rect x="508.1" y="341" width="5.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="511.15" y="351.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (7,876,140 samples, 1.48%)</title><rect x="496.5" y="453" width="17.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="499.54" y="463.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (7,640,373 samples, 1.44%)</title><rect x="514.0" y="469" width="17.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="517.01" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (1,333,706 samples, 0.25%)</title><rect x="431.9" y="261" width="3.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="434.92" y="271.5" ></text>
</g>
<g >
<title>alloc_anon_folio (5,361,669 samples, 1.01%)</title><rect x="590.0" y="341" width="11.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="592.98" y="351.5" ></text>
</g>
<g >
<title>down_read_trylock (1,340,141 samples, 0.25%)</title><rect x="578.3" y="405" width="3.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="581.30" y="415.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,633,891 samples, 2.00%)</title><rect x="581.3" y="405" width="23.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="584.27" y="415.5" >h..</text>
</g>
<g >
<title>elf_add (1,322,971 samples, 0.25%)</title><rect x="102.8" y="437" width="2.9" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="105.78" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,617,940 samples, 0.30%)</title><rect x="353.1" y="229" width="3.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="356.09" y="239.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (1,316,692 samples, 0.25%)</title><rect x="637.4" y="277" width="2.9" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="640.38" y="287.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::StateConsistencyReward (1,362,300 samples, 0.26%)</title><rect x="306.8" y="325" width="3.0" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="309.76" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,319,230 samples, 0.25%)</title><rect x="318.5" y="309" width="2.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="321.49" y="319.5" ></text>
</g>
<g >
<title>exc_page_fault (4,327,526 samples, 0.81%)</title><rect x="117.4" y="421" width="9.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="120.36" y="431.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::ChooseAction (6,607,334 samples, 1.24%)</title><rect x="324.4" y="341" width="14.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="327.36" y="351.5" ></text>
</g>
<g >
<title>handle_pte_fault (1,330,807 samples, 0.25%)</title><rect x="151.1" y="357" width="2.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="154.06" y="367.5" ></text>
</g>
<g >
<title>[unknown] (1,899,678 samples, 0.36%)</title><rect x="13.0" y="437" width="4.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.97" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,711,500 samples, 0.32%)</title><rect x="389.5" y="293" width="3.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="392.52" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, PredictionObstacle&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (1,617,940 samples, 0.30%)</title><rect x="353.1" y="213" width="3.6" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="356.09" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_write (2,650,184 samples, 0.50%)</title><rect x="174.5" y="389" width="5.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="177.51" y="399.5" ></text>
</g>
<g >
<title>handle_mm_fault (14,656,411 samples, 2.75%)</title><rect x="662.8" y="405" width="32.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="665.85" y="415.5" >ha..</text>
</g>
<g >
<title>do_sched_yield (1,319,828 samples, 0.25%)</title><rect x="657.0" y="389" width="2.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="659.95" y="399.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;apollo::BehaviorPlanner::TreeNodePool&gt;::destroy&lt;apollo::BehaviorPlanner::TreeNodePool&gt; (3,962,687 samples, 0.74%)</title><rect x="456.8" y="197" width="8.8" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="459.84" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets (1,323,913 samples, 0.25%)</title><rect x="459.8" y="85" width="2.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="462.76" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_execve (116,436 samples, 0.02%)</title><rect x="1189.7" y="405" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1192.74" y="415.5" ></text>
</g>
<g >
<title>handle_pte_fault (1,318,551 samples, 0.25%)</title><rect x="14.3" y="325" width="2.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="17.26" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (6,674,673 samples, 1.25%)</title><rect x="26.0" y="373" width="14.8" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="28.97" y="383.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (581,127 samples, 0.11%)</title><rect x="13.0" y="405" width="1.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="15.97" y="415.5" ></text>
</g>
<g >
<title>lru_add_fn (1,380,413 samples, 0.26%)</title><rect x="692.3" y="293" width="3.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="695.29" y="303.5" ></text>
</g>
<g >
<title>do_mmap (2,053,382 samples, 0.39%)</title><rect x="216.7" y="245" width="4.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="219.70" y="255.5" ></text>
</g>
<g >
<title>perf_event_mmap (1,316,692 samples, 0.25%)</title><rect x="637.4" y="325" width="2.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="640.38" y="335.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (1,330,807 samples, 0.25%)</title><rect x="151.1" y="277" width="2.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="154.06" y="287.5" ></text>
</g>
<g >
<title>lru_add_drain (4,867,848 samples, 0.91%)</title><rect x="643.2" y="325" width="10.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="646.23" y="335.5" ></text>
</g>
<g >
<title>prepend_copy (2,053,382 samples, 0.39%)</title><rect x="216.7" y="117" width="4.6" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="219.70" y="127.5" ></text>
</g>
<g >
<title>__sanitizer::internal_write (2,650,184 samples, 0.50%)</title><rect x="174.5" y="453" width="5.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="177.51" y="463.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSNode::SelectBestChild (2,656,288 samples, 0.50%)</title><rect x="440.8" y="389" width="5.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="443.79" y="399.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_bottom (1,282,310 samples, 0.24%)</title><rect x="244.7" y="469" width="2.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="247.69" y="479.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (4,020,523 samples, 0.76%)</title><rect x="1023.4" y="421" width="8.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1026.40" y="431.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (4,020,523 samples, 0.76%)</title><rect x="1023.4" y="389" width="8.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1026.40" y="399.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::InitNode (1,269,795 samples, 0.24%)</title><rect x="356.7" y="325" width="2.8" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="359.68" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt;::operator= (3,142,677 samples, 0.59%)</title><rect x="329.1" y="325" width="7.0" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="332.12" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,335,763 samples, 0.25%)</title><rect x="434.9" y="325" width="2.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="437.88" y="335.5" ></text>
</g>
<g >
<title>rmqueue_bulk (2,616,249 samples, 0.49%)</title><rect x="1017.6" y="229" width="5.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1020.60" y="239.5" ></text>
</g>
<g >
<title>__sched_yield (1,319,828 samples, 0.25%)</title><rect x="657.0" y="469" width="2.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="659.95" y="479.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (581,127 samples, 0.11%)</title><rect x="13.0" y="421" width="1.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="15.97" y="431.5" ></text>
</g>
<g >
<title>read_function_entry (6,596,844 samples, 1.24%)</title><rect x="1095.1" y="469" width="14.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1098.11" y="479.5" ></text>
</g>
<g >
<title>rcu_do_batch (2,681,366 samples, 0.50%)</title><rect x="1032.3" y="341" width="6.0" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1035.32" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, false, true&gt;::operator (1,280,712 samples, 0.24%)</title><rect x="393.3" y="293" width="2.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="396.32" y="303.5" ></text>
</g>
<g >
<title>tty_write (2,650,184 samples, 0.50%)</title><rect x="174.5" y="341" width="5.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="177.51" y="351.5" ></text>
</g>
<g >
<title>do_mmap (5,348,293 samples, 1.01%)</title><rect x="26.0" y="325" width="11.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="28.97" y="335.5" ></text>
</g>
<g >
<title>rcu_cblist_dequeue (1,332,646 samples, 0.25%)</title><rect x="96.9" y="293" width="2.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="99.85" y="303.5" ></text>
</g>
<g >
<title>rmqueue (2,678,062 samples, 0.50%)</title><rect x="595.9" y="261" width="6.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="598.94" y="271.5" ></text>
</g>
<g >
<title>rcu_core (1,332,646 samples, 0.25%)</title><rect x="96.9" y="325" width="2.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="99.85" y="335.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,332,646 samples, 0.25%)</title><rect x="96.9" y="421" width="2.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="99.85" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6,674,673 samples, 1.25%)</title><rect x="26.0" y="421" width="14.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="28.97" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleRewardDetails&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (1,319,230 samples, 0.25%)</title><rect x="318.5" y="293" width="2.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="321.49" y="303.5" ></text>
</g>
<g >
<title>x64_sys_call (2,635,920 samples, 0.50%)</title><rect x="637.4" y="421" width="5.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="640.38" y="431.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (2,635,920 samples, 0.50%)</title><rect x="637.4" y="373" width="5.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="640.38" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (2,792,596 samples, 0.52%)</title><rect x="401.9" y="261" width="6.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="404.93" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,635,920 samples, 0.50%)</title><rect x="637.4" y="437" width="5.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="640.38" y="447.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (3,929,056 samples, 0.74%)</title><rect x="581.3" y="341" width="8.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="584.27" y="351.5" ></text>
</g>
<g >
<title>update_process_times (4,020,523 samples, 0.76%)</title><rect x="1023.4" y="341" width="8.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1026.40" y="351.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;apollo::BehaviorPlanner::MCTSNode*&gt; &gt;::construct&lt;apollo::BehaviorPlanner::MCTSNode*, apollo::BehaviorPlanner::MCTSNode* const&amp;&gt; (1,326,619 samples, 0.25%)</title><rect x="321.4" y="309" width="3.0" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="324.42" y="319.5" ></text>
</g>
<g >
<title>sched_use_asym_prio (1,339,559 samples, 0.25%)</title><rect x="1029.3" y="277" width="3.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1032.35" y="287.5" ></text>
</g>
<g >
<title>wp_page_copy (4,327,526 samples, 0.81%)</title><rect x="117.4" y="325" width="9.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="120.36" y="335.5" ></text>
</g>
<g >
<title>do_vmi_munmap (6,188,209 samples, 1.16%)</title><rect x="643.2" y="373" width="13.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="646.23" y="383.5" ></text>
</g>
<g >
<title>__schedule (1,319,828 samples, 0.25%)</title><rect x="657.0" y="357" width="2.9" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="659.95" y="367.5" ></text>
</g>
<g >
<title>rmqueue_bulk (4,327,526 samples, 0.81%)</title><rect x="117.4" y="213" width="9.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="120.36" y="223.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (1,318,551 samples, 0.25%)</title><rect x="14.3" y="261" width="2.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="17.26" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1,317,115 samples, 0.25%)</title><rect x="456.8" y="117" width="3.0" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="459.84" y="127.5" ></text>
</g>
<g >
<title>wp_page_copy (1,330,807 samples, 0.25%)</title><rect x="151.1" y="325" width="2.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="154.06" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (1,291,191 samples, 0.24%)</title><rect x="426.2" y="293" width="2.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="429.19" y="303.5" ></text>
</g>
<g >
<title>irq_exit_rcu (2,681,366 samples, 0.50%)</title><rect x="1032.3" y="421" width="6.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1035.32" y="431.5" ></text>
</g>
<g >
<title>void std::vector&lt;apollo::common::math::Vec2d, std::allocator&lt;apollo::common::math::Vec2d&gt; &gt;::_M_realloc_insert&lt;double, double&gt; (1,327,061 samples, 0.25%)</title><rect x="417.0" y="293" width="3.0" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="420.04" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_execve (2,053,382 samples, 0.39%)</title><rect x="216.7" y="405" width="4.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="219.70" y="415.5" ></text>
</g>
<g >
<title>security_mmap_file (1,326,380 samples, 0.25%)</title><rect x="37.8" y="325" width="3.0" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="40.83" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleStateDetails, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt; &gt;::operator[] (3,918,609 samples, 0.74%)</title><rect x="363.4" y="309" width="8.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="366.43" y="319.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (2,681,366 samples, 0.50%)</title><rect x="1032.3" y="405" width="6.0" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1035.32" y="415.5" ></text>
</g>
<g >
<title>lock_mm_and_find_vma (1,337,067 samples, 0.25%)</title><rect x="695.4" y="405" width="2.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="698.35" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (2,607,617 samples, 0.49%)</title><rect x="366.3" y="261" width="5.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="369.34" y="271.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1,314,192 samples, 0.25%)</title><rect x="508.1" y="325" width="3.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="511.15" y="335.5" ></text>
</g>
<g >
<title>do_mmap (2,635,920 samples, 0.50%)</title><rect x="637.4" y="357" width="5.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="640.38" y="367.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (4,327,526 samples, 0.81%)</title><rect x="117.4" y="437" width="9.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="120.36" y="447.5" ></text>
</g>
<g >
<title>__sqrt (1,328,957 samples, 0.25%)</title><rect x="437.8" y="389" width="3.0" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="440.84" y="399.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::MCTSTree::DefaultPolicy (55,141,025 samples, 10.36%)</title><rect x="306.8" y="405" width="122.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="309.76" y="415.5" >apollo::Behavio..</text>
</g>
<g >
<title>asm_exc_page_fault (2,861,704 samples, 0.54%)</title><rect x="132.7" y="437" width="6.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="135.71" y="447.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::Planner::UpdateDecisionParams (3,276,875 samples, 0.62%)</title><rect x="449.6" y="421" width="7.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="452.57" y="431.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (1,535,106 samples, 0.29%)</title><rect x="135.7" y="325" width="3.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="138.65" y="335.5" ></text>
</g>
<g >
<title>backtrace_free_locked.part.0 (17,331,595 samples, 3.26%)</title><rect x="662.8" y="469" width="38.5" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="665.85" y="479.5" >bac..</text>
</g>
<g >
<title>fmin@plt (1,480,901 samples, 0.28%)</title><rect x="420.0" y="325" width="3.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="422.98" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (6,674,673 samples, 1.25%)</title><rect x="26.0" y="405" width="14.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="28.97" y="415.5" ></text>
</g>
<g >
<title>find_vma (1,337,067 samples, 0.25%)</title><rect x="695.4" y="389" width="2.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="698.35" y="399.5" ></text>
</g>
<g >
<title>perf_event_task_tick (1,340,364 samples, 0.25%)</title><rect x="1026.4" y="309" width="2.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1029.37" y="319.5" ></text>
</g>
<g >
<title>handle_pte_fault (4,327,526 samples, 0.81%)</title><rect x="117.4" y="357" width="9.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="120.36" y="367.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (1,318,551 samples, 0.25%)</title><rect x="14.3" y="293" width="2.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="17.26" y="303.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (1,145,808 samples, 0.22%)</title><rect x="1072.2" y="213" width="2.6" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1075.23" y="223.5" ></text>
</g>
<g >
<title>x64_sys_call (1,319,828 samples, 0.25%)</title><rect x="657.0" y="421" width="2.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="659.95" y="431.5" ></text>
</g>
<g >
<title>int std::uniform_int_distribution&lt;int&gt;::operator (1,269,795 samples, 0.24%)</title><rect x="356.7" y="309" width="2.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="359.68" y="319.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (1,314,562 samples, 0.25%)</title><rect x="505.2" y="357" width="2.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="508.23" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt;, false, true&gt;::_Node_iterator (1,324,464 samples, 0.25%)</title><rect x="408.1" y="293" width="3.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="411.12" y="303.5" ></text>
</g>
<g >
<title>do_anonymous_page (1,318,551 samples, 0.25%)</title><rect x="14.3" y="309" width="2.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="17.26" y="319.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (5,260,530 samples, 0.99%)</title><rect x="476.0" y="469" width="11.6" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="478.97" y="479.5" ></text>
</g>
<g >
<title>load_elf_binary (2,053,382 samples, 0.39%)</title><rect x="216.7" y="309" width="4.6" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="219.70" y="319.5" ></text>
</g>
<g >
<title>irqentry_exit (1,332,608 samples, 0.25%)</title><rect x="205.1" y="405" width="3.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="208.10" y="415.5" ></text>
</g>
<g >
<title>__count_memcg_events (6,648,666 samples, 1.25%)</title><rect x="668.7" y="309" width="14.8" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="671.72" y="319.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (4,327,526 samples, 0.81%)</title><rect x="117.4" y="229" width="9.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="120.36" y="239.5" ></text>
</g>
<g >
<title> (1,280,712 samples, 0.24%)</title><rect x="393.3" y="277" width="2.9" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="396.32" y="287.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1,322,971 samples, 0.25%)</title><rect x="102.8" y="421" width="2.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="105.78" y="431.5" ></text>
</g>
<g >
<title>kmem_cache_free (1,342,172 samples, 0.25%)</title><rect x="1032.3" y="293" width="3.0" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1035.32" y="303.5" ></text>
</g>
<g >
<title>iterate_tty_write (2,650,184 samples, 0.50%)</title><rect x="174.5" y="309" width="5.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="177.51" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleStateDetails&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (3,918,609 samples, 0.74%)</title><rect x="363.4" y="293" width="8.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="366.43" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (2,635,920 samples, 0.50%)</title><rect x="637.4" y="405" width="5.8" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="640.38" y="415.5" ></text>
</g>
<g >
<title>do_anonymous_page (1,535,106 samples, 0.29%)</title><rect x="135.7" y="341" width="3.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="138.65" y="351.5" ></text>
</g>
<g >
<title>unmap_page_range (7,080,586 samples, 1.33%)</title><rect x="1061.7" y="277" width="15.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1064.74" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_sched_yield (1,319,828 samples, 0.25%)</title><rect x="657.0" y="405" width="2.9" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="659.95" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,313,739 samples, 0.25%)</title><rect x="378.0" y="277" width="2.9" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="380.99" y="287.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (1,323,913 samples, 0.25%)</title><rect x="459.8" y="37" width="2.9" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="462.76" y="47.5" ></text>
</g>
<g >
<title>void std::vector&lt;apollo::BehaviorPlanner::MCTSNode*, std::allocator&lt;apollo::BehaviorPlanner::MCTSNode*&gt; &gt;::_M_realloc_insert&lt;apollo::BehaviorPlanner::MCTSNode* const&amp;&gt; (1,326,619 samples, 0.25%)</title><rect x="321.4" y="325" width="3.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="324.42" y="335.5" ></text>
</g>
<g >
<title>vma_alloc_folio (5,361,669 samples, 1.01%)</title><rect x="590.0" y="325" width="11.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="592.98" y="335.5" ></text>
</g>
<g >
<title>clear_page_erms (1,340,106 samples, 0.25%)</title><rect x="593.0" y="261" width="2.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="595.96" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;apollo::common::math::Vec2d&gt;::allocate (1,327,061 samples, 0.25%)</title><rect x="417.0" y="245" width="3.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="420.04" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (14,656,411 samples, 2.75%)</title><rect x="662.8" y="389" width="32.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="665.85" y="399.5" >__..</text>
</g>
<g >
<title>mmput (8,335,578 samples, 1.57%)</title><rect x="1059.0" y="357" width="18.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1061.95" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1,285,397 samples, 0.24%)</title><rect x="383.8" y="309" width="2.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="386.76" y="319.5" ></text>
</g>
<g >
<title>vma_alloc_folio (2,616,249 samples, 0.49%)</title><rect x="1017.6" y="325" width="5.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1020.60" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, double&gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::~vector (1,321,659 samples, 0.25%)</title><rect x="462.7" y="149" width="2.9" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="465.70" y="159.5" ></text>
</g>
<g >
<title>__rcu_read_lock (1,314,192 samples, 0.25%)</title><rect x="508.1" y="309" width="3.0" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="511.15" y="319.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (1,327,854 samples, 0.25%)</title><rect x="511.1" y="309" width="2.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="514.06" y="319.5" ></text>
</g>
<g >
<title>handle_softirqs (2,681,366 samples, 0.50%)</title><rect x="1032.3" y="389" width="6.0" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1035.32" y="399.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (15,993,478 samples, 3.01%)</title><rect x="662.8" y="453" width="35.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="665.85" y="463.5" >asm..</text>
</g>
<g >
<title>exec_binprm (116,436 samples, 0.02%)</title><rect x="1189.7" y="341" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1192.74" y="351.5" ></text>
</g>
<g >
<title>perf_event_exec (116,436 samples, 0.02%)</title><rect x="1189.7" y="277" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1192.74" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleState, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleState&gt; &gt; &gt;::find (6,720,601 samples, 1.26%)</title><rect x="396.2" y="325" width="14.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="399.16" y="335.5" ></text>
</g>
<g >
<title>__handle_mm_fault (4,327,526 samples, 0.81%)</title><rect x="117.4" y="373" width="9.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="120.36" y="383.5" ></text>
</g>
<g >
<title>process_output_block (2,650,184 samples, 0.50%)</title><rect x="174.5" y="277" width="5.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="177.51" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, apollo::BehaviorPlanner::VehicleAction, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, apollo::BehaviorPlanner::VehicleAction&gt; &gt; &gt;::at (2,602,703 samples, 0.49%)</title><rect x="378.0" y="325" width="5.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="380.99" y="335.5" ></text>
</g>
<g >
<title>apollo::BehaviorPlanner::XICAMCTSFunction::XICAJerkModel (5,693,280 samples, 1.07%)</title><rect x="359.5" y="325" width="12.6" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="362.49" y="335.5" ></text>
</g>
<g >
<title>strlen (1,334,898 samples, 0.25%)</title><rect x="28.9" y="277" width="3.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="31.94" y="287.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (116,436 samples, 0.02%)</title><rect x="1189.7" y="389" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1192.74" y="399.5" ></text>
</g>
<g >
<title>bprm_execve (2,053,382 samples, 0.39%)</title><rect x="216.7" y="373" width="4.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="219.70" y="383.5" ></text>
</g>
</g>
</svg>
